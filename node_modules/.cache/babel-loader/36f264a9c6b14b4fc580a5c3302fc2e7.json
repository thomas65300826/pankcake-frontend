{"ast":null,"code":"var _jsxFileName = \"/Users/thomas/Documents/PycharmProjects/pancake-frontend/src/contexts/ToastsContext/Provider.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useCallback, useState } from 'react';\nimport { kebabCase } from 'lodash';\nimport { toastTypes } from '@pancakeswap/uikit';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ToastsContext = /*#__PURE__*/createContext(undefined);\nexport const ToastsProvider = ({\n  children\n}) => {\n  _s();\n\n  const [toasts, setToasts] = useState([]);\n  const toast = useCallback(({\n    title,\n    description,\n    type\n  }) => {\n    setToasts(prevToasts => {\n      const id = kebabCase(title); // Remove any existing toasts with the same id\n\n      const currentToasts = prevToasts.filter(prevToast => prevToast.id !== id);\n      return [{\n        id,\n        title,\n        description,\n        type\n      }, ...currentToasts];\n    });\n  }, [setToasts]);\n\n  const toastError = (title, description) => {\n    return toast({\n      title,\n      description,\n      type: toastTypes.DANGER\n    });\n  };\n\n  const toastInfo = (title, description) => {\n    return toast({\n      title,\n      description,\n      type: toastTypes.INFO\n    });\n  };\n\n  const toastSuccess = (title, description) => {\n    return toast({\n      title,\n      description,\n      type: toastTypes.SUCCESS\n    });\n  };\n\n  const toastWarning = (title, description) => {\n    return toast({\n      title,\n      description,\n      type: toastTypes.WARNING\n    });\n  };\n\n  const clear = () => setToasts([]);\n\n  const remove = id => {\n    setToasts(prevToasts => prevToasts.filter(prevToast => prevToast.id !== id));\n  };\n\n  return /*#__PURE__*/_jsxDEV(ToastsContext.Provider, {\n    value: {\n      toasts,\n      clear,\n      remove,\n      toastError,\n      toastInfo,\n      toastSuccess,\n      toastWarning\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ToastsProvider, \"OPZKGrTNnwp+klP+pH502F/rcGc=\");\n\n_c = ToastsProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ToastsProvider\");","map":{"version":3,"sources":["/Users/thomas/Documents/PycharmProjects/pancake-frontend/src/contexts/ToastsContext/Provider.tsx"],"names":["React","createContext","useCallback","useState","kebabCase","toastTypes","ToastsContext","undefined","ToastsProvider","children","toasts","setToasts","toast","title","description","type","prevToasts","id","currentToasts","filter","prevToast","toastError","DANGER","toastInfo","INFO","toastSuccess","SUCCESS","toastWarning","WARNING","clear","remove"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA0CC,WAA1C,EAAuDC,QAAvD,QAAuE,OAAvE;AACA,SAASC,SAAT,QAA0B,QAA1B;AACA,SAAgBC,UAAhB,QAAkC,oBAAlC;;AAGA,OAAO,MAAMC,aAAa,gBAAGL,aAAa,CAAkBM,SAAlB,CAAnC;AAEP,OAAO,MAAMC,cAAwB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAAA;;AACxD,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBR,QAAQ,CAA4B,EAA5B,CAApC;AAEA,QAAMS,KAAK,GAAGV,WAAW,CACvB,CAAC;AAAEW,IAAAA,KAAF;AAASC,IAAAA,WAAT;AAAsBC,IAAAA;AAAtB,GAAD,KAAqD;AACnDJ,IAAAA,SAAS,CAAEK,UAAD,IAAgB;AACxB,YAAMC,EAAE,GAAGb,SAAS,CAACS,KAAD,CAApB,CADwB,CAGxB;;AACA,YAAMK,aAAa,GAAGF,UAAU,CAACG,MAAX,CAAmBC,SAAD,IAAeA,SAAS,CAACH,EAAV,KAAiBA,EAAlD,CAAtB;AAEA,aAAO,CACL;AACEA,QAAAA,EADF;AAEEJ,QAAAA,KAFF;AAGEC,QAAAA,WAHF;AAIEC,QAAAA;AAJF,OADK,EAOL,GAAGG,aAPE,CAAP;AASD,KAfQ,CAAT;AAgBD,GAlBsB,EAmBvB,CAACP,SAAD,CAnBuB,CAAzB;;AAsBA,QAAMU,UAAU,GAAG,CAACR,KAAD,EAAgBC,WAAhB,KAA4C;AAC7D,WAAOF,KAAK,CAAC;AAAEC,MAAAA,KAAF;AAASC,MAAAA,WAAT;AAAsBC,MAAAA,IAAI,EAAEV,UAAU,CAACiB;AAAvC,KAAD,CAAZ;AACD,GAFD;;AAGA,QAAMC,SAAS,GAAG,CAACV,KAAD,EAAgBC,WAAhB,KAA4C;AAC5D,WAAOF,KAAK,CAAC;AAAEC,MAAAA,KAAF;AAASC,MAAAA,WAAT;AAAsBC,MAAAA,IAAI,EAAEV,UAAU,CAACmB;AAAvC,KAAD,CAAZ;AACD,GAFD;;AAGA,QAAMC,YAAY,GAAG,CAACZ,KAAD,EAAgBC,WAAhB,KAA4C;AAC/D,WAAOF,KAAK,CAAC;AAAEC,MAAAA,KAAF;AAASC,MAAAA,WAAT;AAAsBC,MAAAA,IAAI,EAAEV,UAAU,CAACqB;AAAvC,KAAD,CAAZ;AACD,GAFD;;AAGA,QAAMC,YAAY,GAAG,CAACd,KAAD,EAAgBC,WAAhB,KAA4C;AAC/D,WAAOF,KAAK,CAAC;AAAEC,MAAAA,KAAF;AAASC,MAAAA,WAAT;AAAsBC,MAAAA,IAAI,EAAEV,UAAU,CAACuB;AAAvC,KAAD,CAAZ;AACD,GAFD;;AAGA,QAAMC,KAAK,GAAG,MAAMlB,SAAS,CAAC,EAAD,CAA7B;;AACA,QAAMmB,MAAM,GAAIb,EAAD,IAAgB;AAC7BN,IAAAA,SAAS,CAAEK,UAAD,IAAgBA,UAAU,CAACG,MAAX,CAAmBC,SAAD,IAAeA,SAAS,CAACH,EAAV,KAAiBA,EAAlD,CAAjB,CAAT;AACD,GAFD;;AAIA,sBACE,QAAC,aAAD,CAAe,QAAf;AAAwB,IAAA,KAAK,EAAE;AAAEP,MAAAA,MAAF;AAAUmB,MAAAA,KAAV;AAAiBC,MAAAA,MAAjB;AAAyBT,MAAAA,UAAzB;AAAqCE,MAAAA,SAArC;AAAgDE,MAAAA,YAAhD;AAA8DE,MAAAA;AAA9D,KAA/B;AAAA,cACGlB;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CA/CM;;GAAMD,c;;KAAAA,c","sourcesContent":["import React, { createContext, ReactNode, useCallback, useState } from 'react'\nimport { kebabCase } from 'lodash'\nimport { Toast, toastTypes } from '@pancakeswap/uikit'\nimport { ToastContextApi } from './types'\n\nexport const ToastsContext = createContext<ToastContextApi>(undefined)\n\nexport const ToastsProvider: React.FC = ({ children }) => {\n  const [toasts, setToasts] = useState<ToastContextApi['toasts']>([])\n\n  const toast = useCallback(\n    ({ title, description, type }: Omit<Toast, 'id'>) => {\n      setToasts((prevToasts) => {\n        const id = kebabCase(title)\n\n        // Remove any existing toasts with the same id\n        const currentToasts = prevToasts.filter((prevToast) => prevToast.id !== id)\n\n        return [\n          {\n            id,\n            title,\n            description,\n            type,\n          },\n          ...currentToasts,\n        ]\n      })\n    },\n    [setToasts],\n  )\n\n  const toastError = (title: string, description?: ReactNode) => {\n    return toast({ title, description, type: toastTypes.DANGER })\n  }\n  const toastInfo = (title: string, description?: ReactNode) => {\n    return toast({ title, description, type: toastTypes.INFO })\n  }\n  const toastSuccess = (title: string, description?: ReactNode) => {\n    return toast({ title, description, type: toastTypes.SUCCESS })\n  }\n  const toastWarning = (title: string, description?: ReactNode) => {\n    return toast({ title, description, type: toastTypes.WARNING })\n  }\n  const clear = () => setToasts([])\n  const remove = (id: string) => {\n    setToasts((prevToasts) => prevToasts.filter((prevToast) => prevToast.id !== id))\n  }\n\n  return (\n    <ToastsContext.Provider value={{ toasts, clear, remove, toastError, toastInfo, toastSuccess, toastWarning }}>\n      {children}\n    </ToastsContext.Provider>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}