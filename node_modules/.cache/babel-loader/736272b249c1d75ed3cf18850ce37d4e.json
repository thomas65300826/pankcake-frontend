{"ast":null,"code":"var _jsxFileName = \"/Users/thomas/Documents/pancake-frontend/pankcake-frontend/src/views/Voting/CreateProposal/Choice.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Box, CloseIcon, IconButton, Input } from '@pancakeswap/uikit';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Choice = ({\n  onRemove,\n  onTextInput,\n  ...props\n}) => {\n  _s();\n\n  const [isWarning, setIsWarning] = useState(false);\n  const [isDirty, setIsDirty] = useState(false);\n\n  const handleChange = evt => {\n    const {\n      value\n    } = evt.currentTarget;\n    setIsWarning(isDirty && value.length === 0);\n    setIsDirty(true);\n    onTextInput(value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    position: \"relative\",\n    mb: \"16px\",\n    children: [/*#__PURE__*/_jsxDEV(Input, { ...props,\n      onChange: handleChange,\n      isWarning: isWarning\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this), onRemove && /*#__PURE__*/_jsxDEV(Box, {\n      position: \"absolute\",\n      right: \"8px\",\n      top: \"0px\",\n      zIndex: 30,\n      children: /*#__PURE__*/_jsxDEV(IconButton, {\n        variant: \"text\",\n        onClick: onRemove,\n        children: /*#__PURE__*/_jsxDEV(CloseIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Choice, \"SjXOK7T0xjR4Wj8yDw8KMhVpJhI=\");\n\n_c = Choice;\nexport default Choice;\n\nvar _c;\n\n$RefreshReg$(_c, \"Choice\");","map":{"version":3,"sources":["/Users/thomas/Documents/pancake-frontend/pankcake-frontend/src/views/Voting/CreateProposal/Choice.tsx"],"names":["React","useState","Box","CloseIcon","IconButton","Input","Choice","onRemove","onTextInput","props","isWarning","setIsWarning","isDirty","setIsDirty","handleChange","evt","value","currentTarget","length"],"mappings":";;;AAAA,OAAOA,KAAP,IAAkDC,QAAlD,QAAkE,OAAlE;AACA,SAASC,GAAT,EAAcC,SAAd,EAAyBC,UAAzB,EAAqCC,KAArC,QAA8D,oBAA9D;;;AAOA,MAAMC,MAA6B,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA,WAAZ;AAAyB,KAAGC;AAA5B,CAAD,KAAyC;AAAA;;AAC7E,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BV,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACW,OAAD,EAAUC,UAAV,IAAwBZ,QAAQ,CAAC,KAAD,CAAtC;;AAEA,QAAMa,YAAY,GAAIC,GAAD,IAAwC;AAC3D,UAAM;AAAEC,MAAAA;AAAF,QAAYD,GAAG,CAACE,aAAtB;AAEAN,IAAAA,YAAY,CAACC,OAAO,IAAII,KAAK,CAACE,MAAN,KAAiB,CAA7B,CAAZ;AACAL,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAL,IAAAA,WAAW,CAACQ,KAAD,CAAX;AACD,GAND;;AAQA,sBACE,QAAC,GAAD;AAAK,IAAA,QAAQ,EAAC,UAAd;AAAyB,IAAA,EAAE,EAAC,MAA5B;AAAA,4BACE,QAAC,KAAD,OAAWP,KAAX;AAAkB,MAAA,QAAQ,EAAEK,YAA5B;AAA0C,MAAA,SAAS,EAAEJ;AAArD;AAAA;AAAA;AAAA;AAAA,YADF,EAEGH,QAAQ,iBACP,QAAC,GAAD;AAAK,MAAA,QAAQ,EAAC,UAAd;AAAyB,MAAA,KAAK,EAAC,KAA/B;AAAqC,MAAA,GAAG,EAAC,KAAzC;AAA+C,MAAA,MAAM,EAAE,EAAvD;AAAA,6BACE,QAAC,UAAD;AAAY,QAAA,OAAO,EAAC,MAApB;AAA2B,QAAA,OAAO,EAAEA,QAApC;AAAA,+BACE,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAYD,CAxBD;;GAAMD,M;;KAAAA,M;AA0BN,eAAeA,MAAf","sourcesContent":["import React, { ChangeEvent, InputHTMLAttributes, useState } from 'react'\nimport { Box, CloseIcon, IconButton, Input, InputProps } from '@pancakeswap/uikit'\n\ninterface ChoiceProps extends InputProps, InputHTMLAttributes<HTMLInputElement> {\n  onTextInput: (value: string) => void\n  onRemove?: () => void\n}\n\nconst Choice: React.FC<ChoiceProps> = ({ onRemove, onTextInput, ...props }) => {\n  const [isWarning, setIsWarning] = useState(false)\n  const [isDirty, setIsDirty] = useState(false)\n\n  const handleChange = (evt: ChangeEvent<HTMLInputElement>) => {\n    const { value } = evt.currentTarget\n\n    setIsWarning(isDirty && value.length === 0)\n    setIsDirty(true)\n    onTextInput(value)\n  }\n\n  return (\n    <Box position=\"relative\" mb=\"16px\">\n      <Input {...props} onChange={handleChange} isWarning={isWarning} />\n      {onRemove && (\n        <Box position=\"absolute\" right=\"8px\" top=\"0px\" zIndex={30}>\n          <IconButton variant=\"text\" onClick={onRemove}>\n            <CloseIcon />\n          </IconButton>\n        </Box>\n      )}\n    </Box>\n  )\n}\n\nexport default Choice\n"]},"metadata":{},"sourceType":"module"}