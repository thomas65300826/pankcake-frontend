{"ast":null,"code":"var _jsxFileName = \"/Users/thomas/Documents/PycharmProjects/pancake-frontend/src/views/Pools/components/CakeVaultCard/UnstakingFeeCountdownRow.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { Flex, Text, TooltipText, useTooltip } from '@pancakeswap/uikit';\nimport { useTranslation } from 'contexts/Localization';\nimport { useWeb3React } from '@web3-react/core';\nimport useWithdrawalFeeTimer from 'views/Pools/hooks/useWithdrawalFeeTimer';\nimport { useCakeVault } from 'state/pools/hooks';\nimport WithdrawalFeeTimer from './WithdrawalFeeTimer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst UnstakingFeeCountdownRow = ({\n  isTableVariant\n}) => {\n  _s();\n\n  const {\n    t\n  } = useTranslation();\n  const {\n    account\n  } = useWeb3React();\n  const {\n    userData: {\n      lastDepositedTime,\n      userShares\n    },\n    fees: {\n      withdrawalFee,\n      withdrawalFeePeriod\n    }\n  } = useCakeVault();\n  const feeAsDecimal = withdrawalFee / 100 || '-';\n  const {\n    targetRef,\n    tooltip,\n    tooltipVisible\n  } = useTooltip( /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Text, {\n      bold: true,\n      mb: \"4px\",\n      children: t('Unstaking fee: %fee%%', {\n        fee: feeAsDecimal\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Text, {\n      children: t('Only applies within 3 days of staking. Unstaking after 3 days will not include a fee. Timer resets every time you stake new CAKE in the pool.')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true), {\n    placement: 'bottom-start'\n  });\n  const {\n    secondsRemaining,\n    hasUnstakingFee\n  } = useWithdrawalFeeTimer(parseInt(lastDepositedTime, 10), userShares, withdrawalFeePeriod); // The user has made a deposit, but has no fee\n\n  const noFeeToPay = lastDepositedTime && !hasUnstakingFee && userShares.gt(0); // Show the timer if a user is connected, has deposited, and has an unstaking fee\n\n  const shouldShowTimer = account && lastDepositedTime && hasUnstakingFee;\n\n  const getRowText = () => {\n    if (noFeeToPay) {\n      return t('Unstaking Fee').toLowerCase();\n    }\n\n    if (shouldShowTimer) {\n      return t('unstaking fee until');\n    }\n\n    return t('unstaking fee if withdrawn within 72h');\n  };\n\n  return /*#__PURE__*/_jsxDEV(Flex, {\n    alignItems: isTableVariant ? 'flex-start' : 'center',\n    justifyContent: \"space-between\",\n    flexDirection: isTableVariant ? 'column' : 'row',\n    children: [tooltipVisible && tooltip, /*#__PURE__*/_jsxDEV(TooltipText, {\n      ref: targetRef,\n      small: true,\n      children: [noFeeToPay ? '0' : feeAsDecimal, \"% \", getRowText()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), shouldShowTimer && /*#__PURE__*/_jsxDEV(WithdrawalFeeTimer, {\n      secondsRemaining: secondsRemaining\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 27\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n\n_s(UnstakingFeeCountdownRow, \"GvTlAfaVoIpkaNZCAtRerVohSeU=\", false, function () {\n  return [useTranslation, useWeb3React, useCakeVault, useTooltip, useWithdrawalFeeTimer];\n});\n\n_c = UnstakingFeeCountdownRow;\nexport default UnstakingFeeCountdownRow;\n\nvar _c;\n\n$RefreshReg$(_c, \"UnstakingFeeCountdownRow\");","map":{"version":3,"sources":["/Users/thomas/Documents/PycharmProjects/pancake-frontend/src/views/Pools/components/CakeVaultCard/UnstakingFeeCountdownRow.tsx"],"names":["React","Flex","Text","TooltipText","useTooltip","useTranslation","useWeb3React","useWithdrawalFeeTimer","useCakeVault","WithdrawalFeeTimer","UnstakingFeeCountdownRow","isTableVariant","t","account","userData","lastDepositedTime","userShares","fees","withdrawalFee","withdrawalFeePeriod","feeAsDecimal","targetRef","tooltip","tooltipVisible","fee","placement","secondsRemaining","hasUnstakingFee","parseInt","noFeeToPay","gt","shouldShowTimer","getRowText","toLowerCase"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { Flex, Text, TooltipText, useTooltip } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useWeb3React } from '@web3-react/core'\nimport useWithdrawalFeeTimer from 'views/Pools/hooks/useWithdrawalFeeTimer'\nimport { useCakeVault } from 'state/pools/hooks'\nimport WithdrawalFeeTimer from './WithdrawalFeeTimer'\n\ninterface UnstakingFeeCountdownRowProps {\n  isTableVariant?: boolean\n}\n\nconst UnstakingFeeCountdownRow: React.FC<UnstakingFeeCountdownRowProps> = ({ isTableVariant }) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const {\n    userData: { lastDepositedTime, userShares },\n    fees: { withdrawalFee, withdrawalFeePeriod },\n  } = useCakeVault()\n  const feeAsDecimal = withdrawalFee / 100 || '-'\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    <>\n      <Text bold mb=\"4px\">\n        {t('Unstaking fee: %fee%%', { fee: feeAsDecimal })}\n      </Text>\n      <Text>\n        {t(\n          'Only applies within 3 days of staking. Unstaking after 3 days will not include a fee. Timer resets every time you stake new CAKE in the pool.',\n        )}\n      </Text>\n    </>,\n    { placement: 'bottom-start' },\n  )\n\n  const { secondsRemaining, hasUnstakingFee } = useWithdrawalFeeTimer(\n    parseInt(lastDepositedTime, 10),\n    userShares,\n    withdrawalFeePeriod,\n  )\n\n  // The user has made a deposit, but has no fee\n  const noFeeToPay = lastDepositedTime && !hasUnstakingFee && userShares.gt(0)\n\n  // Show the timer if a user is connected, has deposited, and has an unstaking fee\n  const shouldShowTimer = account && lastDepositedTime && hasUnstakingFee\n\n  const getRowText = () => {\n    if (noFeeToPay) {\n      return t('Unstaking Fee').toLowerCase()\n    }\n    if (shouldShowTimer) {\n      return t('unstaking fee until')\n    }\n    return t('unstaking fee if withdrawn within 72h')\n  }\n\n  return (\n    <Flex\n      alignItems={isTableVariant ? 'flex-start' : 'center'}\n      justifyContent=\"space-between\"\n      flexDirection={isTableVariant ? 'column' : 'row'}\n    >\n      {tooltipVisible && tooltip}\n      <TooltipText ref={targetRef} small>\n        {noFeeToPay ? '0' : feeAsDecimal}% {getRowText()}\n      </TooltipText>\n      {shouldShowTimer && <WithdrawalFeeTimer secondsRemaining={secondsRemaining} />}\n    </Flex>\n  )\n}\n\nexport default UnstakingFeeCountdownRow\n"]},"metadata":{},"sourceType":"module"}