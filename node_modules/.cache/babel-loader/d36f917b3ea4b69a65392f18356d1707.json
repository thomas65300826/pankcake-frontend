{"ast":null,"code":"var _jsxFileName = \"/Users/thomas/Documents/pancake-frontend/src/views/FarmAuction/components/AuctionLeaderboard/AuctionLeaderboardTable.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { Text, Flex, Box, BunnyPlaceholderIcon, Skeleton, Button, useMatchBreakpoints, useModal, SubMenu, SubMenuItem, EllipsisIcon, LinkExternal } from '@pancakeswap/uikit';\nimport { getBscScanLink } from 'utils';\nimport { getBalanceNumber } from 'utils/formatBalance';\nimport { useTranslation } from 'contexts/Localization';\nimport { usePriceCakeBusd } from 'state/farms/hooks';\nimport WhitelistedBiddersModal from '../WhitelistedBiddersModal';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst LeaderboardContainer = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 5fr 3fr 1fr;\n  ${({\n  theme\n}) => theme.mediaQueries.md} {\n    grid-template-columns: 3fr 5fr 5fr 1fr;\n  }\n`;\n_c = LeaderboardContainer;\nconst GridCell = styled(Flex)`\n  height: 65px;\n  align-items: center;\n  border-bottom: 1px solid ${({\n  theme\n}) => theme.colors.cardBorder};\n\n  ${({\n  theme,\n  isTopPosition\n}) => isTopPosition && `background-color: ${theme.colors.warning}2D;`}\n`;\n_c2 = GridCell;\n\nconst LeaderboardRow = ({\n  bidder,\n  cakePriceBusd,\n  isMobile\n}) => {\n  _s();\n\n  const {\n    t\n  } = useTranslation();\n  const {\n    isTopPosition,\n    position,\n    samePositionAsAbove,\n    farmName,\n    tokenName,\n    amount,\n    projectSite,\n    lpAddress,\n    account\n  } = bidder;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(GridCell, {\n      isTopPosition: isTopPosition,\n      pl: ['12px', '24px'],\n      children: /*#__PURE__*/_jsxDEV(Flex, {\n        children: /*#__PURE__*/_jsxDEV(Text, {\n          bold: isTopPosition,\n          color: samePositionAsAbove ? 'textDisabled' : 'text',\n          textTransform: \"uppercase\",\n          children: [\"#\", position]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(GridCell, {\n      isTopPosition: isTopPosition,\n      children: /*#__PURE__*/_jsxDEV(Flex, {\n        flexDirection: \"column\",\n        pl: ['8px'],\n        children: [/*#__PURE__*/_jsxDEV(Flex, {\n          children: [/*#__PURE__*/_jsxDEV(Text, {\n            bold: isTopPosition,\n            mr: \"4px\",\n            children: farmName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 13\n          }, this), !isMobile && /*#__PURE__*/_jsxDEV(Text, {\n            children: \"(1x)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 27\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Text, {\n          fontSize: \"12px\",\n          color: \"textSubtle\",\n          children: tokenName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(GridCell, {\n      isTopPosition: isTopPosition,\n      children: /*#__PURE__*/_jsxDEV(Flex, {\n        flexDirection: \"column\",\n        width: \"100%\",\n        justifyContent: \"flex-end\",\n        pr: [null, null, '24px'],\n        children: [/*#__PURE__*/_jsxDEV(Text, {\n          bold: true,\n          textTransform: \"uppercase\",\n          width: \"100%\",\n          textAlign: \"right\",\n          children: getBalanceNumber(amount).toLocaleString()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this), cakePriceBusd.gt(0) ? /*#__PURE__*/_jsxDEV(Text, {\n          fontSize: \"12px\",\n          color: \"textSubtle\",\n          textAlign: \"right\",\n          children: [\"~$\", getBalanceNumber(amount.times(cakePriceBusd)).toLocaleString('en', {\n            maximumFractionDigits: 0\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(Flex, {\n          justifyContent: \"flex-end\",\n          children: /*#__PURE__*/_jsxDEV(Skeleton, {\n            width: \"48px\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(GridCell, {\n      isTopPosition: isTopPosition,\n      children: /*#__PURE__*/_jsxDEV(SubMenu, {\n        component: /*#__PURE__*/_jsxDEV(EllipsisIcon, {\n          height: \"16px\",\n          width: \"16px\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 29\n        }, this),\n        children: [projectSite && /*#__PURE__*/_jsxDEV(SubMenuItem, {\n          as: LinkExternal,\n          href: projectSite,\n          bold: false,\n          color: \"text\",\n          children: t('Project Site')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 13\n        }, this), lpAddress && /*#__PURE__*/_jsxDEV(SubMenuItem, {\n          as: LinkExternal,\n          href: `http://pancakeswap.info/pool/${lpAddress}`,\n          bold: false,\n          color: \"text\",\n          children: t('LP Info')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 13\n        }, this), account && /*#__PURE__*/_jsxDEV(SubMenuItem, {\n          as: LinkExternal,\n          href: getBscScanLink(account, 'address'),\n          bold: false,\n          color: \"text\",\n          children: t('Bidder Address')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(LeaderboardRow, \"zlIdU9EjM2llFt74AbE2KsUJXyM=\", false, function () {\n  return [useTranslation];\n});\n\n_c3 = LeaderboardRow;\n\nconst AuctionLeaderboardTable = ({\n  bidders,\n  noBidsText\n}) => {\n  _s2();\n\n  const [visibleBidders, setVisibleBidders] = useState(10);\n  const cakePriceBusd = usePriceCakeBusd();\n  const {\n    t\n  } = useTranslation();\n  const {\n    isXs,\n    isSm\n  } = useMatchBreakpoints();\n  const [onShowWhitelistedBidders] = useModal( /*#__PURE__*/_jsxDEV(WhitelistedBiddersModal, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 47\n  }, this));\n  const totalBidders = bidders.length;\n\n  if (totalBidders === 0) {\n    return /*#__PURE__*/_jsxDEV(Flex, {\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      flexDirection: \"column\",\n      py: \"24px\",\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        mb: \"8px\",\n        children: noBidsText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(BunnyPlaceholderIcon, {\n        height: \"64px\",\n        width: \"64px\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    children: [/*#__PURE__*/_jsxDEV(LeaderboardContainer, {\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        color: \"secondary\",\n        bold: true,\n        fontSize: \"12px\",\n        textTransform: \"uppercase\",\n        pl: ['12px', '24px'],\n        py: \"16px\",\n        children: t('Position')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Text, {\n        color: \"secondary\",\n        bold: true,\n        fontSize: \"12px\",\n        textTransform: \"uppercase\",\n        pl: ['8px'],\n        py: \"16px\",\n        children: t('Farm')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Text, {\n        color: \"secondary\",\n        bold: true,\n        fontSize: \"12px\",\n        textTransform: \"uppercase\",\n        textAlign: \"right\",\n        pr: [null, null, '24px'],\n        py: \"16px\",\n        children: t('CAKE bid')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }, this), bidders.slice(0, visibleBidders).map(bidder => /*#__PURE__*/_jsxDEV(LeaderboardRow, {\n        bidder: bidder,\n        cakePriceBusd: cakePriceBusd,\n        isMobile: isXs || isSm\n      }, bidder.account, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Flex, {\n      mt: \"16px\",\n      px: \"24px\",\n      flexDirection: \"column\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      children: [visibleBidders <= 10 && totalBidders > 10 && /*#__PURE__*/_jsxDEV(Text, {\n        color: \"textSubtle\",\n        textAlign: \"center\",\n        children: [t('Showing top 10 bids only.'), ' ', /*#__PURE__*/_jsxDEV(Button, {\n          px: \"0\",\n          variant: \"text\",\n          onClick: onShowWhitelistedBidders,\n          children: t('See all whitelisted bidders')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 11\n      }, this), visibleBidders < totalBidders && /*#__PURE__*/_jsxDEV(Button, {\n        mt: \"16px\",\n        variant: \"text\",\n        onClick: () => setVisibleBidders(prev => {\n          if (totalBidders - prev > 10) {\n            return prev + 10;\n          }\n\n          return totalBidders;\n        }),\n        children: t('Show More')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(AuctionLeaderboardTable, \"B4sCuULhYVMrDd8dfoakC7gmo5c=\", false, function () {\n  return [usePriceCakeBusd, useTranslation, useMatchBreakpoints, useModal];\n});\n\n_c4 = AuctionLeaderboardTable;\nexport default AuctionLeaderboardTable;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"LeaderboardContainer\");\n$RefreshReg$(_c2, \"GridCell\");\n$RefreshReg$(_c3, \"LeaderboardRow\");\n$RefreshReg$(_c4, \"AuctionLeaderboardTable\");","map":{"version":3,"sources":["/Users/thomas/Documents/pancake-frontend/src/views/FarmAuction/components/AuctionLeaderboard/AuctionLeaderboardTable.tsx"],"names":["React","useState","styled","Text","Flex","Box","BunnyPlaceholderIcon","Skeleton","Button","useMatchBreakpoints","useModal","SubMenu","SubMenuItem","EllipsisIcon","LinkExternal","getBscScanLink","getBalanceNumber","useTranslation","usePriceCakeBusd","WhitelistedBiddersModal","LeaderboardContainer","div","theme","mediaQueries","md","GridCell","colors","cardBorder","isTopPosition","warning","LeaderboardRow","bidder","cakePriceBusd","isMobile","t","position","samePositionAsAbove","farmName","tokenName","amount","projectSite","lpAddress","account","toLocaleString","gt","times","maximumFractionDigits","AuctionLeaderboardTable","bidders","noBidsText","visibleBidders","setVisibleBidders","isXs","isSm","onShowWhitelistedBidders","totalBidders","length","slice","map","prev"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport {\n  Text,\n  Flex,\n  Box,\n  BunnyPlaceholderIcon,\n  Skeleton,\n  Button,\n  useMatchBreakpoints,\n  useModal,\n  SubMenu,\n  SubMenuItem,\n  EllipsisIcon,\n  LinkExternal,\n} from '@pancakeswap/uikit'\nimport { getBscScanLink } from 'utils'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useTranslation } from 'contexts/Localization'\nimport { usePriceCakeBusd } from 'state/farms/hooks'\nimport { Bidder } from 'config/constants/types'\nimport WhitelistedBiddersModal from '../WhitelistedBiddersModal'\n\nconst LeaderboardContainer = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 5fr 3fr 1fr;\n  ${({ theme }) => theme.mediaQueries.md} {\n    grid-template-columns: 3fr 5fr 5fr 1fr;\n  }\n`\n\nconst GridCell = styled(Flex)<{ isTopPosition: boolean }>`\n  height: 65px;\n  align-items: center;\n  border-bottom: 1px solid ${({ theme }) => theme.colors.cardBorder};\n\n  ${({ theme, isTopPosition }) => isTopPosition && `background-color: ${theme.colors.warning}2D;`}\n`\n\ninterface LeaderboardRowProps {\n  bidder: Bidder\n  cakePriceBusd: BigNumber\n  isMobile: boolean\n}\n\nconst LeaderboardRow: React.FC<LeaderboardRowProps> = ({ bidder, cakePriceBusd, isMobile }) => {\n  const { t } = useTranslation()\n  const { isTopPosition, position, samePositionAsAbove, farmName, tokenName, amount, projectSite, lpAddress, account } =\n    bidder\n  return (\n    <>\n      <GridCell isTopPosition={isTopPosition} pl={['12px', '24px']}>\n        <Flex>\n          <Text bold={isTopPosition} color={samePositionAsAbove ? 'textDisabled' : 'text'} textTransform=\"uppercase\">\n            #{position}\n          </Text>\n        </Flex>\n      </GridCell>\n      <GridCell isTopPosition={isTopPosition}>\n        <Flex flexDirection=\"column\" pl={['8px']}>\n          <Flex>\n            <Text bold={isTopPosition} mr=\"4px\">\n              {farmName}\n            </Text>\n            {!isMobile && <Text>(1x)</Text>}\n          </Flex>\n          <Text fontSize=\"12px\" color=\"textSubtle\">\n            {tokenName}\n          </Text>\n        </Flex>\n      </GridCell>\n      <GridCell isTopPosition={isTopPosition}>\n        <Flex flexDirection=\"column\" width=\"100%\" justifyContent=\"flex-end\" pr={[null, null, '24px']}>\n          <Text bold textTransform=\"uppercase\" width=\"100%\" textAlign=\"right\">\n            {getBalanceNumber(amount).toLocaleString()}\n          </Text>\n          {cakePriceBusd.gt(0) ? (\n            <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"right\">\n              ~${getBalanceNumber(amount.times(cakePriceBusd)).toLocaleString('en', { maximumFractionDigits: 0 })}\n            </Text>\n          ) : (\n            <Flex justifyContent=\"flex-end\">\n              <Skeleton width=\"48px\" />\n            </Flex>\n          )}\n        </Flex>\n      </GridCell>\n      <GridCell isTopPosition={isTopPosition}>\n        <SubMenu component={<EllipsisIcon height=\"16px\" width=\"16px\" />}>\n          {projectSite && (\n            <SubMenuItem as={LinkExternal} href={projectSite} bold={false} color=\"text\">\n              {t('Project Site')}\n            </SubMenuItem>\n          )}\n          {lpAddress && (\n            <SubMenuItem as={LinkExternal} href={`http://pancakeswap.info/pool/${lpAddress}`} bold={false} color=\"text\">\n              {t('LP Info')}\n            </SubMenuItem>\n          )}\n          {account && (\n            <SubMenuItem as={LinkExternal} href={getBscScanLink(account, 'address')} bold={false} color=\"text\">\n              {t('Bidder Address')}\n            </SubMenuItem>\n          )}\n        </SubMenu>\n      </GridCell>\n    </>\n  )\n}\n\nconst AuctionLeaderboardTable: React.FC<{ bidders: Bidder[]; noBidsText: string }> = ({ bidders, noBidsText }) => {\n  const [visibleBidders, setVisibleBidders] = useState(10)\n  const cakePriceBusd = usePriceCakeBusd()\n  const { t } = useTranslation()\n\n  const { isXs, isSm } = useMatchBreakpoints()\n  const [onShowWhitelistedBidders] = useModal(<WhitelistedBiddersModal />)\n\n  const totalBidders = bidders.length\n\n  if (totalBidders === 0) {\n    return (\n      <Flex justifyContent=\"center\" alignItems=\"center\" flexDirection=\"column\" py=\"24px\">\n        <Text mb=\"8px\">{noBidsText}</Text>\n        <BunnyPlaceholderIcon height=\"64px\" width=\"64px\" />\n      </Flex>\n    )\n  }\n\n  return (\n    <Box>\n      <LeaderboardContainer>\n        <Text color=\"secondary\" bold fontSize=\"12px\" textTransform=\"uppercase\" pl={['12px', '24px']} py=\"16px\">\n          {t('Position')}\n        </Text>\n        <Text color=\"secondary\" bold fontSize=\"12px\" textTransform=\"uppercase\" pl={['8px']} py=\"16px\">\n          {t('Farm')}\n        </Text>\n        <Text\n          color=\"secondary\"\n          bold\n          fontSize=\"12px\"\n          textTransform=\"uppercase\"\n          textAlign=\"right\"\n          pr={[null, null, '24px']}\n          py=\"16px\"\n        >\n          {t('CAKE bid')}\n        </Text>\n        <Box />\n        {/* Rows */}\n        {bidders.slice(0, visibleBidders).map((bidder) => (\n          <LeaderboardRow key={bidder.account} bidder={bidder} cakePriceBusd={cakePriceBusd} isMobile={isXs || isSm} />\n        ))}\n      </LeaderboardContainer>\n      <Flex mt=\"16px\" px=\"24px\" flexDirection=\"column\" justifyContent=\"center\" alignItems=\"center\">\n        {visibleBidders <= 10 && totalBidders > 10 && (\n          <Text color=\"textSubtle\" textAlign=\"center\">\n            {t('Showing top 10 bids only.')}{' '}\n            <Button px=\"0\" variant=\"text\" onClick={onShowWhitelistedBidders}>\n              {t('See all whitelisted bidders')}\n            </Button>\n          </Text>\n        )}\n        {visibleBidders < totalBidders && (\n          <Button\n            mt=\"16px\"\n            variant=\"text\"\n            onClick={() =>\n              setVisibleBidders((prev) => {\n                if (totalBidders - prev > 10) {\n                  return prev + 10\n                }\n                return totalBidders\n              })\n            }\n          >\n            {t('Show More')}\n          </Button>\n        )}\n      </Flex>\n    </Box>\n  )\n}\n\nexport default AuctionLeaderboardTable\n"]},"metadata":{},"sourceType":"module"}