{"ast":null,"code":"import { TICKET_LIMIT_PER_REQUEST } from 'config/constants/lottery';\nimport { getLotteryV2Contract } from 'utils/contractHelpers';\nconst lotteryContract = getLotteryV2Contract();\nexport const processRawTicketsResponse = ticketsResponse => {\n  const [ticketIds, ticketNumbers, ticketStatuses] = ticketsResponse;\n\n  if ((ticketIds === null || ticketIds === void 0 ? void 0 : ticketIds.length) > 0) {\n    return ticketIds.map((ticketId, index) => {\n      return {\n        id: ticketId.toString(),\n        number: ticketNumbers[index].toString(),\n        status: ticketStatuses[index]\n      };\n    });\n  }\n\n  return [];\n};\nexport const viewUserInfoForLotteryId = async (account, lotteryId, cursor, perRequestLimit) => {\n  try {\n    const data = await lotteryContract.viewUserInfoForLotteryId(account, lotteryId, cursor, perRequestLimit);\n    return processRawTicketsResponse(data);\n  } catch (error) {\n    console.error('viewUserInfoForLotteryId', error);\n    return null;\n  }\n};\nexport const fetchUserTicketsForOneRound = async (account, lotteryId) => {\n  let cursor = 0;\n  let numReturned = TICKET_LIMIT_PER_REQUEST;\n  const ticketData = [];\n\n  while (numReturned === TICKET_LIMIT_PER_REQUEST) {\n    // eslint-disable-next-line no-await-in-loop\n    const response = await viewUserInfoForLotteryId(account, lotteryId, cursor, TICKET_LIMIT_PER_REQUEST);\n    cursor += TICKET_LIMIT_PER_REQUEST;\n    numReturned = response.length;\n    ticketData.push(...response);\n  }\n\n  return ticketData;\n};\nexport const fetchUserTicketsForMultipleRounds = async (idsToCheck, account) => {\n  const ticketsForMultipleRounds = [];\n\n  for (let i = 0; i < idsToCheck.length; i += 1) {\n    const roundId = idsToCheck[i]; // eslint-disable-next-line no-await-in-loop\n\n    const ticketsForRound = await fetchUserTicketsForOneRound(account, roundId);\n    ticketsForMultipleRounds.push({\n      roundId,\n      userTickets: ticketsForRound\n    });\n  }\n\n  return ticketsForMultipleRounds;\n};","map":{"version":3,"sources":["/Users/thomas/Documents/pancake-frontend/src/state/lottery/getUserTicketsData.ts"],"names":["TICKET_LIMIT_PER_REQUEST","getLotteryV2Contract","lotteryContract","processRawTicketsResponse","ticketsResponse","ticketIds","ticketNumbers","ticketStatuses","length","map","ticketId","index","id","toString","number","status","viewUserInfoForLotteryId","account","lotteryId","cursor","perRequestLimit","data","error","console","fetchUserTicketsForOneRound","numReturned","ticketData","response","push","fetchUserTicketsForMultipleRounds","idsToCheck","ticketsForMultipleRounds","i","roundId","ticketsForRound","userTickets"],"mappings":"AAAA,SAASA,wBAAT,QAAyC,0BAAzC;AAGA,SAASC,oBAAT,QAAqC,uBAArC;AAEA,MAAMC,eAAe,GAAGD,oBAAoB,EAA5C;AAEA,OAAO,MAAME,yBAAyB,GAAIC,eAAD,IAA2D;AAClG,QAAM,CAACC,SAAD,EAAYC,aAAZ,EAA2BC,cAA3B,IAA6CH,eAAnD;;AAEA,MAAI,CAAAC,SAAS,SAAT,IAAAA,SAAS,WAAT,YAAAA,SAAS,CAAEG,MAAX,IAAoB,CAAxB,EAA2B;AACzB,WAAOH,SAAS,CAACI,GAAV,CAAc,CAACC,QAAD,EAAWC,KAAX,KAAqB;AACxC,aAAO;AACLC,QAAAA,EAAE,EAAEF,QAAQ,CAACG,QAAT,EADC;AAELC,QAAAA,MAAM,EAAER,aAAa,CAACK,KAAD,CAAb,CAAqBE,QAArB,EAFH;AAGLE,QAAAA,MAAM,EAAER,cAAc,CAACI,KAAD;AAHjB,OAAP;AAKD,KANM,CAAP;AAOD;;AACD,SAAO,EAAP;AACD,CAbM;AAeP,OAAO,MAAMK,wBAAwB,GAAG,OACtCC,OADsC,EAEtCC,SAFsC,EAGtCC,MAHsC,EAItCC,eAJsC,KAKT;AAC7B,MAAI;AACF,UAAMC,IAAI,GAAG,MAAMnB,eAAe,CAACc,wBAAhB,CAAyCC,OAAzC,EAAkDC,SAAlD,EAA6DC,MAA7D,EAAqEC,eAArE,CAAnB;AACA,WAAOjB,yBAAyB,CAACkB,IAAD,CAAhC;AACD,GAHD,CAGE,OAAOC,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACD,KAAR,CAAc,0BAAd,EAA0CA,KAA1C;AACA,WAAO,IAAP;AACD;AACF,CAbM;AAeP,OAAO,MAAME,2BAA2B,GAAG,OAAOP,OAAP,EAAwBC,SAAxB,KAAwE;AACjH,MAAIC,MAAM,GAAG,CAAb;AACA,MAAIM,WAAW,GAAGzB,wBAAlB;AACA,QAAM0B,UAAU,GAAG,EAAnB;;AAEA,SAAOD,WAAW,KAAKzB,wBAAvB,EAAiD;AAC/C;AACA,UAAM2B,QAAQ,GAAG,MAAMX,wBAAwB,CAACC,OAAD,EAAUC,SAAV,EAAqBC,MAArB,EAA6BnB,wBAA7B,CAA/C;AACAmB,IAAAA,MAAM,IAAInB,wBAAV;AACAyB,IAAAA,WAAW,GAAGE,QAAQ,CAACnB,MAAvB;AACAkB,IAAAA,UAAU,CAACE,IAAX,CAAgB,GAAGD,QAAnB;AACD;;AAED,SAAOD,UAAP;AACD,CAdM;AAgBP,OAAO,MAAMG,iCAAiC,GAAG,OAC/CC,UAD+C,EAE/Cb,OAF+C,KAGkB;AACjE,QAAMc,wBAAwB,GAAG,EAAjC;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,UAAU,CAACtB,MAA/B,EAAuCwB,CAAC,IAAI,CAA5C,EAA+C;AAC7C,UAAMC,OAAO,GAAGH,UAAU,CAACE,CAAD,CAA1B,CAD6C,CAE7C;;AACA,UAAME,eAAe,GAAG,MAAMV,2BAA2B,CAACP,OAAD,EAAUgB,OAAV,CAAzD;AACAF,IAAAA,wBAAwB,CAACH,IAAzB,CAA8B;AAC5BK,MAAAA,OAD4B;AAE5BE,MAAAA,WAAW,EAAED;AAFe,KAA9B;AAID;;AACD,SAAOH,wBAAP;AACD,CAfM","sourcesContent":["import { TICKET_LIMIT_PER_REQUEST } from 'config/constants/lottery'\nimport { LotteryTicket } from 'config/constants/types'\nimport { UserTicketsResponse } from 'state/types'\nimport { getLotteryV2Contract } from 'utils/contractHelpers'\n\nconst lotteryContract = getLotteryV2Contract()\n\nexport const processRawTicketsResponse = (ticketsResponse: UserTicketsResponse): LotteryTicket[] => {\n  const [ticketIds, ticketNumbers, ticketStatuses] = ticketsResponse\n\n  if (ticketIds?.length > 0) {\n    return ticketIds.map((ticketId, index) => {\n      return {\n        id: ticketId.toString(),\n        number: ticketNumbers[index].toString(),\n        status: ticketStatuses[index],\n      }\n    })\n  }\n  return []\n}\n\nexport const viewUserInfoForLotteryId = async (\n  account: string,\n  lotteryId: string,\n  cursor: number,\n  perRequestLimit: number,\n): Promise<LotteryTicket[]> => {\n  try {\n    const data = await lotteryContract.viewUserInfoForLotteryId(account, lotteryId, cursor, perRequestLimit)\n    return processRawTicketsResponse(data)\n  } catch (error) {\n    console.error('viewUserInfoForLotteryId', error)\n    return null\n  }\n}\n\nexport const fetchUserTicketsForOneRound = async (account: string, lotteryId: string): Promise<LotteryTicket[]> => {\n  let cursor = 0\n  let numReturned = TICKET_LIMIT_PER_REQUEST\n  const ticketData = []\n\n  while (numReturned === TICKET_LIMIT_PER_REQUEST) {\n    // eslint-disable-next-line no-await-in-loop\n    const response = await viewUserInfoForLotteryId(account, lotteryId, cursor, TICKET_LIMIT_PER_REQUEST)\n    cursor += TICKET_LIMIT_PER_REQUEST\n    numReturned = response.length\n    ticketData.push(...response)\n  }\n\n  return ticketData\n}\n\nexport const fetchUserTicketsForMultipleRounds = async (\n  idsToCheck: string[],\n  account: string,\n): Promise<{ roundId: string; userTickets: LotteryTicket[] }[]> => {\n  const ticketsForMultipleRounds = []\n  for (let i = 0; i < idsToCheck.length; i += 1) {\n    const roundId = idsToCheck[i]\n    // eslint-disable-next-line no-await-in-loop\n    const ticketsForRound = await fetchUserTicketsForOneRound(account, roundId)\n    ticketsForMultipleRounds.push({\n      roundId,\n      userTickets: ticketsForRound,\n    })\n  }\n  return ticketsForMultipleRounds\n}\n"]},"metadata":{},"sourceType":"module"}