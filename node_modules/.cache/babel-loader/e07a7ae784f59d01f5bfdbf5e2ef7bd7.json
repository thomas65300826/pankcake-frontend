{"ast":null,"code":"import BigNumber from 'bignumber.js';\nimport { getAddress } from 'utils/addressHelpers';\nimport { BIG_ZERO } from 'utils/bigNumber';\nexport const transformUserData = userData => {\n  return {\n    allowance: userData ? new BigNumber(userData.allowance) : BIG_ZERO,\n    stakingTokenBalance: userData ? new BigNumber(userData.stakingTokenBalance) : BIG_ZERO,\n    stakedBalance: userData ? new BigNumber(userData.stakedBalance) : BIG_ZERO,\n    pendingReward: userData ? new BigNumber(userData.pendingReward) : BIG_ZERO\n  };\n};\nexport const transformPool = pool => {\n  const {\n    totalStaked,\n    stakingLimit,\n    userData,\n    ...rest\n  } = pool;\n  return { ...rest,\n    userData: transformUserData(userData),\n    totalStaked: new BigNumber(totalStaked),\n    stakingLimit: new BigNumber(stakingLimit)\n  };\n};\nexport const getTokenPricesFromFarm = farms => {\n  return farms.reduce((prices, farm) => {\n    const quoteTokenAddress = getAddress(farm.quoteToken.address).toLocaleLowerCase();\n    const tokenAddress = getAddress(farm.token.address).toLocaleLowerCase();\n    /* eslint-disable no-param-reassign */\n\n    if (!prices[quoteTokenAddress]) {\n      prices[quoteTokenAddress] = new BigNumber(farm.quoteToken.busdPrice).toNumber();\n    }\n\n    if (!prices[tokenAddress]) {\n      prices[tokenAddress] = new BigNumber(farm.token.busdPrice).toNumber();\n    }\n    /* eslint-enable no-param-reassign */\n\n\n    return prices;\n  }, {});\n};","map":{"version":3,"sources":["/Users/thomas/Documents/PycharmProjects/pancake-frontend/src/state/pools/helpers.ts"],"names":["BigNumber","getAddress","BIG_ZERO","transformUserData","userData","allowance","stakingTokenBalance","stakedBalance","pendingReward","transformPool","pool","totalStaked","stakingLimit","rest","getTokenPricesFromFarm","farms","reduce","prices","farm","quoteTokenAddress","quoteToken","address","toLocaleLowerCase","tokenAddress","token","busdPrice","toNumber"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,cAAtB;AAEA,SAASC,UAAT,QAA2B,sBAA3B;AACA,SAASC,QAAT,QAAyB,iBAAzB;AAWA,OAAO,MAAMC,iBAAiB,GAAIC,QAAD,IAAwB;AACvD,SAAO;AACLC,IAAAA,SAAS,EAAED,QAAQ,GAAG,IAAIJ,SAAJ,CAAcI,QAAQ,CAACC,SAAvB,CAAH,GAAuCH,QADrD;AAELI,IAAAA,mBAAmB,EAAEF,QAAQ,GAAG,IAAIJ,SAAJ,CAAcI,QAAQ,CAACE,mBAAvB,CAAH,GAAiDJ,QAFzE;AAGLK,IAAAA,aAAa,EAAEH,QAAQ,GAAG,IAAIJ,SAAJ,CAAcI,QAAQ,CAACG,aAAvB,CAAH,GAA2CL,QAH7D;AAILM,IAAAA,aAAa,EAAEJ,QAAQ,GAAG,IAAIJ,SAAJ,CAAcI,QAAQ,CAACI,aAAvB,CAAH,GAA2CN;AAJ7D,GAAP;AAMD,CAPM;AASP,OAAO,MAAMO,aAAa,GAAIC,IAAD,IAAsB;AACjD,QAAM;AAAEC,IAAAA,WAAF;AAAeC,IAAAA,YAAf;AAA6BR,IAAAA,QAA7B;AAAuC,OAAGS;AAA1C,MAAmDH,IAAzD;AAEA,SAAO,EACL,GAAGG,IADE;AAELT,IAAAA,QAAQ,EAAED,iBAAiB,CAACC,QAAD,CAFtB;AAGLO,IAAAA,WAAW,EAAE,IAAIX,SAAJ,CAAcW,WAAd,CAHR;AAILC,IAAAA,YAAY,EAAE,IAAIZ,SAAJ,CAAcY,YAAd;AAJT,GAAP;AAMD,CATM;AAWP,OAAO,MAAME,sBAAsB,GAAIC,KAAD,IAAmB;AACvD,SAAOA,KAAK,CAACC,MAAN,CAAa,CAACC,MAAD,EAASC,IAAT,KAAkB;AACpC,UAAMC,iBAAiB,GAAGlB,UAAU,CAACiB,IAAI,CAACE,UAAL,CAAgBC,OAAjB,CAAV,CAAoCC,iBAApC,EAA1B;AACA,UAAMC,YAAY,GAAGtB,UAAU,CAACiB,IAAI,CAACM,KAAL,CAAWH,OAAZ,CAAV,CAA+BC,iBAA/B,EAArB;AACA;;AACA,QAAI,CAACL,MAAM,CAACE,iBAAD,CAAX,EAAgC;AAC9BF,MAAAA,MAAM,CAACE,iBAAD,CAAN,GAA4B,IAAInB,SAAJ,CAAckB,IAAI,CAACE,UAAL,CAAgBK,SAA9B,EAAyCC,QAAzC,EAA5B;AACD;;AACD,QAAI,CAACT,MAAM,CAACM,YAAD,CAAX,EAA2B;AACzBN,MAAAA,MAAM,CAACM,YAAD,CAAN,GAAuB,IAAIvB,SAAJ,CAAckB,IAAI,CAACM,KAAL,CAAWC,SAAzB,EAAoCC,QAApC,EAAvB;AACD;AACD;;;AACA,WAAOT,MAAP;AACD,GAZM,EAYJ,EAZI,CAAP;AAaD,CAdM","sourcesContent":["import BigNumber from 'bignumber.js'\nimport { Farm, Pool } from 'state/types'\nimport { getAddress } from 'utils/addressHelpers'\nimport { BIG_ZERO } from 'utils/bigNumber'\n\ntype UserData =\n  | Pool['userData']\n  | {\n      allowance: number | string\n      stakingTokenBalance: number | string\n      stakedBalance: number | string\n      pendingReward: number | string\n    }\n\nexport const transformUserData = (userData: UserData) => {\n  return {\n    allowance: userData ? new BigNumber(userData.allowance) : BIG_ZERO,\n    stakingTokenBalance: userData ? new BigNumber(userData.stakingTokenBalance) : BIG_ZERO,\n    stakedBalance: userData ? new BigNumber(userData.stakedBalance) : BIG_ZERO,\n    pendingReward: userData ? new BigNumber(userData.pendingReward) : BIG_ZERO,\n  }\n}\n\nexport const transformPool = (pool: Pool): Pool => {\n  const { totalStaked, stakingLimit, userData, ...rest } = pool\n\n  return {\n    ...rest,\n    userData: transformUserData(userData),\n    totalStaked: new BigNumber(totalStaked),\n    stakingLimit: new BigNumber(stakingLimit),\n  } as Pool\n}\n\nexport const getTokenPricesFromFarm = (farms: Farm[]) => {\n  return farms.reduce((prices, farm) => {\n    const quoteTokenAddress = getAddress(farm.quoteToken.address).toLocaleLowerCase()\n    const tokenAddress = getAddress(farm.token.address).toLocaleLowerCase()\n    /* eslint-disable no-param-reassign */\n    if (!prices[quoteTokenAddress]) {\n      prices[quoteTokenAddress] = new BigNumber(farm.quoteToken.busdPrice).toNumber()\n    }\n    if (!prices[tokenAddress]) {\n      prices[tokenAddress] = new BigNumber(farm.token.busdPrice).toNumber()\n    }\n    /* eslint-enable no-param-reassign */\n    return prices\n  }, {})\n}\n"]},"metadata":{},"sourceType":"module"}