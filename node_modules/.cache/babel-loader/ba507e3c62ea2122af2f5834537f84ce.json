{"ast":null,"code":"import BigNumber from 'bignumber.js';\nimport { BLOCKS_PER_YEAR, CAKE_PER_YEAR } from 'config';\nimport lpAprs from 'config/constants/lpAprs.json';\n/**\n * Get the APR value in %\n * @param stakingTokenPrice Token price in the same quote currency\n * @param rewardTokenPrice Token price in the same quote currency\n * @param totalStaked Total amount of stakingToken in the pool\n * @param tokenPerBlock Amount of new cake allocated to the pool for each new block\n * @returns Null if the APR is NaN or infinite.\n */\n\nexport const getPoolApr = (stakingTokenPrice, rewardTokenPrice, totalStaked, tokenPerBlock) => {\n  const totalRewardPricePerYear = new BigNumber(rewardTokenPrice).times(tokenPerBlock).times(BLOCKS_PER_YEAR);\n  const totalStakingTokenInPool = new BigNumber(stakingTokenPrice).times(totalStaked);\n  const apr = totalRewardPricePerYear.div(totalStakingTokenInPool).times(100);\n  return apr.isNaN() || !apr.isFinite() ? null : apr.toNumber();\n};\n/**\n * Get farm APR value in %\n * @param poolWeight allocationPoint / totalAllocationPoint\n * @param cakePriceUsd Cake price in USD\n * @param poolLiquidityUsd Total pool liquidity in USD\n * @returns\n */\n\nexport const getFarmApr = (poolWeight, cakePriceUsd, poolLiquidityUsd, farmAddress) => {\n  var _lpAprs$farmAddress$t;\n\n  const yearlyCakeRewardAllocation = CAKE_PER_YEAR.times(poolWeight);\n  const cakeRewardsApr = yearlyCakeRewardAllocation.times(cakePriceUsd).div(poolLiquidityUsd).times(100);\n  let cakeRewardsAprAsNumber = null;\n\n  if (!cakeRewardsApr.isNaN() && cakeRewardsApr.isFinite()) {\n    cakeRewardsAprAsNumber = cakeRewardsApr.toNumber();\n  }\n\n  const lpRewardsApr = (_lpAprs$farmAddress$t = lpAprs[farmAddress === null || farmAddress === void 0 ? void 0 : farmAddress.toLocaleLowerCase()]) !== null && _lpAprs$farmAddress$t !== void 0 ? _lpAprs$farmAddress$t : 0;\n  return {\n    cakeRewardsApr: cakeRewardsAprAsNumber,\n    lpRewardsApr\n  };\n};\nexport default null;","map":{"version":3,"sources":["/Users/thomas/Documents/pancake-frontend/src/utils/apr.ts"],"names":["BigNumber","BLOCKS_PER_YEAR","CAKE_PER_YEAR","lpAprs","getPoolApr","stakingTokenPrice","rewardTokenPrice","totalStaked","tokenPerBlock","totalRewardPricePerYear","times","totalStakingTokenInPool","apr","div","isNaN","isFinite","toNumber","getFarmApr","poolWeight","cakePriceUsd","poolLiquidityUsd","farmAddress","yearlyCakeRewardAllocation","cakeRewardsApr","cakeRewardsAprAsNumber","lpRewardsApr","toLocaleLowerCase"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,cAAtB;AACA,SAASC,eAAT,EAA0BC,aAA1B,QAA+C,QAA/C;AACA,OAAOC,MAAP,MAAmB,8BAAnB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,UAAU,GAAG,CACxBC,iBADwB,EAExBC,gBAFwB,EAGxBC,WAHwB,EAIxBC,aAJwB,KAKb;AACX,QAAMC,uBAAuB,GAAG,IAAIT,SAAJ,CAAcM,gBAAd,EAAgCI,KAAhC,CAAsCF,aAAtC,EAAqDE,KAArD,CAA2DT,eAA3D,CAAhC;AACA,QAAMU,uBAAuB,GAAG,IAAIX,SAAJ,CAAcK,iBAAd,EAAiCK,KAAjC,CAAuCH,WAAvC,CAAhC;AACA,QAAMK,GAAG,GAAGH,uBAAuB,CAACI,GAAxB,CAA4BF,uBAA5B,EAAqDD,KAArD,CAA2D,GAA3D,CAAZ;AACA,SAAOE,GAAG,CAACE,KAAJ,MAAe,CAACF,GAAG,CAACG,QAAJ,EAAhB,GAAiC,IAAjC,GAAwCH,GAAG,CAACI,QAAJ,EAA/C;AACD,CAVM;AAYP;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,UAAU,GAAG,CACxBC,UADwB,EAExBC,YAFwB,EAGxBC,gBAHwB,EAIxBC,WAJwB,KAK6B;AAAA;;AACrD,QAAMC,0BAA0B,GAAGpB,aAAa,CAACQ,KAAd,CAAoBQ,UAApB,CAAnC;AACA,QAAMK,cAAc,GAAGD,0BAA0B,CAACZ,KAA3B,CAAiCS,YAAjC,EAA+CN,GAA/C,CAAmDO,gBAAnD,EAAqEV,KAArE,CAA2E,GAA3E,CAAvB;AACA,MAAIc,sBAAsB,GAAG,IAA7B;;AACA,MAAI,CAACD,cAAc,CAACT,KAAf,EAAD,IAA2BS,cAAc,CAACR,QAAf,EAA/B,EAA0D;AACxDS,IAAAA,sBAAsB,GAAGD,cAAc,CAACP,QAAf,EAAzB;AACD;;AACD,QAAMS,YAAY,4BAAGtB,MAAM,CAACkB,WAAD,aAACA,WAAD,uBAACA,WAAW,CAAEK,iBAAb,EAAD,CAAT,yEAA+C,CAAjE;AACA,SAAO;AAAEH,IAAAA,cAAc,EAAEC,sBAAlB;AAA0CC,IAAAA;AAA1C,GAAP;AACD,CAdM;AAgBP,eAAe,IAAf","sourcesContent":["import BigNumber from 'bignumber.js'\nimport { BLOCKS_PER_YEAR, CAKE_PER_YEAR } from 'config'\nimport lpAprs from 'config/constants/lpAprs.json'\n\n/**\n * Get the APR value in %\n * @param stakingTokenPrice Token price in the same quote currency\n * @param rewardTokenPrice Token price in the same quote currency\n * @param totalStaked Total amount of stakingToken in the pool\n * @param tokenPerBlock Amount of new cake allocated to the pool for each new block\n * @returns Null if the APR is NaN or infinite.\n */\nexport const getPoolApr = (\n  stakingTokenPrice: number,\n  rewardTokenPrice: number,\n  totalStaked: number,\n  tokenPerBlock: number,\n): number => {\n  const totalRewardPricePerYear = new BigNumber(rewardTokenPrice).times(tokenPerBlock).times(BLOCKS_PER_YEAR)\n  const totalStakingTokenInPool = new BigNumber(stakingTokenPrice).times(totalStaked)\n  const apr = totalRewardPricePerYear.div(totalStakingTokenInPool).times(100)\n  return apr.isNaN() || !apr.isFinite() ? null : apr.toNumber()\n}\n\n/**\n * Get farm APR value in %\n * @param poolWeight allocationPoint / totalAllocationPoint\n * @param cakePriceUsd Cake price in USD\n * @param poolLiquidityUsd Total pool liquidity in USD\n * @returns\n */\nexport const getFarmApr = (\n  poolWeight: BigNumber,\n  cakePriceUsd: BigNumber,\n  poolLiquidityUsd: BigNumber,\n  farmAddress: string,\n): { cakeRewardsApr: number; lpRewardsApr: number } => {\n  const yearlyCakeRewardAllocation = CAKE_PER_YEAR.times(poolWeight)\n  const cakeRewardsApr = yearlyCakeRewardAllocation.times(cakePriceUsd).div(poolLiquidityUsd).times(100)\n  let cakeRewardsAprAsNumber = null\n  if (!cakeRewardsApr.isNaN() && cakeRewardsApr.isFinite()) {\n    cakeRewardsAprAsNumber = cakeRewardsApr.toNumber()\n  }\n  const lpRewardsApr = lpAprs[farmAddress?.toLocaleLowerCase()] ?? 0\n  return { cakeRewardsApr: cakeRewardsAprAsNumber, lpRewardsApr }\n}\n\nexport default null\n"]},"metadata":{},"sourceType":"module"}