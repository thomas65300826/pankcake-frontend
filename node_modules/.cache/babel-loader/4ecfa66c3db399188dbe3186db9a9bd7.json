{"ast":null,"code":"var _jsxFileName = \"/Users/thomas/Documents/PycharmProjects/pancake-frontend/src/views/Profile/components/ClaimPointsCallout .tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { sumBy } from 'lodash';\nimport { useAppDispatch } from 'state';\nimport { useWeb3React } from '@web3-react/core';\nimport { Card, CardBody, CardHeader, Flex, Heading, PrizeIcon } from '@pancakeswap/uikit';\nimport { useProfile } from 'state/profile/hooks';\nimport { addPoints } from 'state/profile';\nimport { addAchievement } from 'state/achievements';\nimport { useTranslation } from 'contexts/Localization';\nimport { getClaimableIfoData } from 'utils/achievements';\nimport AchievementRow from './AchievementRow';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ClaimPointsCallout = () => {\n  _s();\n\n  const [claimableAchievements, setClaimableAchievement] = useState([]);\n  const {\n    t\n  } = useTranslation();\n  const dispatch = useAppDispatch();\n  const {\n    profile\n  } = useProfile();\n  const {\n    account\n  } = useWeb3React();\n  useEffect(() => {\n    const fetchIfoClaims = async () => {\n      const ifoData = await getClaimableIfoData(account);\n      setClaimableAchievement(ifoData);\n    };\n\n    if (account) {\n      fetchIfoClaims();\n    }\n  }, [account, dispatch, setClaimableAchievement]);\n\n  const handleCollectSuccess = achievement => {\n    dispatch(addAchievement(achievement));\n    dispatch(addPoints(achievement.points));\n    setClaimableAchievement(prevClaimableAchievements => prevClaimableAchievements.filter(prevClaimableAchievement => prevClaimableAchievement.id !== achievement.id));\n  };\n\n  if (!(profile === null || profile === void 0 ? void 0 : profile.isActive)) {\n    return null;\n  }\n\n  if (claimableAchievements.length === 0) {\n    return null;\n  }\n\n  const totalPointsToCollect = sumBy(claimableAchievements, 'points');\n  return /*#__PURE__*/_jsxDEV(Card, {\n    isActive: true,\n    mb: \"32px\",\n    children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n      children: /*#__PURE__*/_jsxDEV(Flex, {\n        flexDirection: ['column', null, 'row'],\n        justifyContent: ['start', null, 'space-between'],\n        children: /*#__PURE__*/_jsxDEV(Flex, {\n          alignItems: \"center\",\n          mb: ['16px', null, 0],\n          children: [/*#__PURE__*/_jsxDEV(PrizeIcon, {\n            width: \"32px\",\n            mr: \"8px\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Heading, {\n            scale: \"lg\",\n            children: t('%num% Points to Collect', {\n              num: totalPointsToCollect\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CardBody, {\n      children: claimableAchievements.map(achievement => /*#__PURE__*/_jsxDEV(AchievementRow, {\n        achievement: achievement,\n        onCollectSuccess: handleCollectSuccess\n      }, achievement.address, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ClaimPointsCallout, \"10pOiOE7eL3hmFYUD2efaa3922U=\", false, function () {\n  return [useTranslation, useAppDispatch, useProfile, useWeb3React];\n});\n\n_c = ClaimPointsCallout;\nexport default ClaimPointsCallout;\n\nvar _c;\n\n$RefreshReg$(_c, \"ClaimPointsCallout\");","map":{"version":3,"sources":["/Users/thomas/Documents/PycharmProjects/pancake-frontend/src/views/Profile/components/ClaimPointsCallout .tsx"],"names":["React","useEffect","useState","sumBy","useAppDispatch","useWeb3React","Card","CardBody","CardHeader","Flex","Heading","PrizeIcon","useProfile","addPoints","addAchievement","useTranslation","getClaimableIfoData","AchievementRow","ClaimPointsCallout","claimableAchievements","setClaimableAchievement","t","dispatch","profile","account","fetchIfoClaims","ifoData","handleCollectSuccess","achievement","points","prevClaimableAchievements","filter","prevClaimableAchievement","id","isActive","length","totalPointsToCollect","num","map","address"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { sumBy } from 'lodash'\nimport { useAppDispatch } from 'state'\nimport { useWeb3React } from '@web3-react/core'\nimport { Card, CardBody, CardHeader, Flex, Heading, PrizeIcon } from '@pancakeswap/uikit'\nimport { useProfile } from 'state/profile/hooks'\nimport { Achievement } from 'state/types'\nimport { addPoints } from 'state/profile'\nimport { addAchievement } from 'state/achievements'\nimport { useTranslation } from 'contexts/Localization'\nimport { getClaimableIfoData } from 'utils/achievements'\nimport AchievementRow from './AchievementRow'\n\nconst ClaimPointsCallout = () => {\n  const [claimableAchievements, setClaimableAchievement] = useState<Achievement[]>([])\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n  const { profile } = useProfile()\n  const { account } = useWeb3React()\n\n  useEffect(() => {\n    const fetchIfoClaims = async () => {\n      const ifoData = await getClaimableIfoData(account)\n      setClaimableAchievement(ifoData)\n    }\n\n    if (account) {\n      fetchIfoClaims()\n    }\n  }, [account, dispatch, setClaimableAchievement])\n\n  const handleCollectSuccess = (achievement: Achievement) => {\n    dispatch(addAchievement(achievement))\n    dispatch(addPoints(achievement.points))\n\n    setClaimableAchievement((prevClaimableAchievements) =>\n      prevClaimableAchievements.filter((prevClaimableAchievement) => prevClaimableAchievement.id !== achievement.id),\n    )\n  }\n\n  if (!profile?.isActive) {\n    return null\n  }\n\n  if (claimableAchievements.length === 0) {\n    return null\n  }\n\n  const totalPointsToCollect = sumBy(claimableAchievements, 'points')\n\n  return (\n    <Card isActive mb=\"32px\">\n      <CardHeader>\n        <Flex flexDirection={['column', null, 'row']} justifyContent={['start', null, 'space-between']}>\n          <Flex alignItems=\"center\" mb={['16px', null, 0]}>\n            <PrizeIcon width=\"32px\" mr=\"8px\" />\n            <Heading scale=\"lg\">{t('%num% Points to Collect', { num: totalPointsToCollect })}</Heading>\n          </Flex>\n        </Flex>\n      </CardHeader>\n      <CardBody>\n        {claimableAchievements.map((achievement) => (\n          <AchievementRow key={achievement.address} achievement={achievement} onCollectSuccess={handleCollectSuccess} />\n        ))}\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default ClaimPointsCallout\n"]},"metadata":{},"sourceType":"module"}