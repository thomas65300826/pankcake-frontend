{"ast":null,"code":"import Cookies from 'js-cookie';\nimport { getProfileContract } from 'utils/contractHelpers';\nimport { getNftByTokenId } from 'utils/collectibles';\nimport { getTeam } from 'state/teams/helpers';\nimport { transformProfileResponse } from './helpers';\nconst profileContract = getProfileContract();\nconst profileApi = process.env.REACT_APP_API_PROFILE;\n\nconst getUsername = async address => {\n  try {\n    const response = await fetch(`${profileApi}/api/users/${address}`);\n\n    if (!response.ok) {\n      return '';\n    }\n\n    const {\n      username = ''\n    } = await response.json();\n    return username;\n  } catch (error) {\n    return '';\n  }\n};\n\nconst getProfile = async address => {\n  try {\n    const hasRegistered = await profileContract.hasRegistered(address);\n\n    if (!hasRegistered) {\n      return {\n        hasRegistered,\n        profile: null\n      };\n    }\n\n    const profileResponse = await profileContract.getUserProfile(address);\n    const {\n      userId,\n      points,\n      teamId,\n      tokenId,\n      nftAddress,\n      isActive\n    } = transformProfileResponse(profileResponse);\n    const team = await getTeam(teamId);\n    const username = await getUsername(address); // If the profile is not active the tokenId returns 0, which is still a valid token id\n    // so only fetch the nft data if active\n\n    let nft;\n\n    if (isActive) {\n      var _nft;\n\n      nft = await getNftByTokenId(nftAddress, tokenId); // Save the preview image in a cookie so it can be used on the exchange\n\n      Cookies.set(`profile_${address}`, {\n        username,\n        avatar: `https://pancakeswap.finance/images/nfts/${(_nft = nft) === null || _nft === void 0 ? void 0 : _nft.images.sm}`\n      }, {\n        domain: 'pancakeswap.finance',\n        secure: true,\n        expires: 30\n      });\n    }\n\n    const profile = {\n      userId,\n      points,\n      teamId,\n      tokenId,\n      username,\n      nftAddress,\n      isActive,\n      nft,\n      team\n    };\n    return {\n      hasRegistered,\n      profile\n    };\n  } catch (error) {\n    return null;\n  }\n};\n\nexport default getProfile;","map":{"version":3,"sources":["/Users/thomas/Documents/pancake-frontend/src/state/profile/getProfile.ts"],"names":["Cookies","getProfileContract","getNftByTokenId","getTeam","transformProfileResponse","profileContract","profileApi","process","env","REACT_APP_API_PROFILE","getUsername","address","response","fetch","ok","username","json","error","getProfile","hasRegistered","profile","profileResponse","getUserProfile","userId","points","teamId","tokenId","nftAddress","isActive","team","nft","set","avatar","images","sm","domain","secure","expires"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,WAApB;AACA,SAASC,kBAAT,QAAmC,uBAAnC;AAEA,SAASC,eAAT,QAAgC,oBAAhC;AAEA,SAASC,OAAT,QAAwB,qBAAxB;AACA,SAASC,wBAAT,QAAyC,WAAzC;AAEA,MAAMC,eAAe,GAAGJ,kBAAkB,EAA1C;AACA,MAAMK,UAAU,GAAGC,OAAO,CAACC,GAAR,CAAYC,qBAA/B;;AAOA,MAAMC,WAAW,GAAG,MAAOC,OAAP,IAA4C;AAC9D,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEP,UAAW,cAAaK,OAAQ,EAApC,CAA5B;;AAEA,QAAI,CAACC,QAAQ,CAACE,EAAd,EAAkB;AAChB,aAAO,EAAP;AACD;;AAED,UAAM;AAAEC,MAAAA,QAAQ,GAAG;AAAb,QAAoB,MAAMH,QAAQ,CAACI,IAAT,EAAhC;AAEA,WAAOD,QAAP;AACD,GAVD,CAUE,OAAOE,KAAP,EAAc;AACd,WAAO,EAAP;AACD;AACF,CAdD;;AAgBA,MAAMC,UAAU,GAAG,MAAOP,OAAP,IAAwD;AACzE,MAAI;AACF,UAAMQ,aAAa,GAAI,MAAMd,eAAe,CAACc,aAAhB,CAA8BR,OAA9B,CAA7B;;AAEA,QAAI,CAACQ,aAAL,EAAoB;AAClB,aAAO;AAAEA,QAAAA,aAAF;AAAiBC,QAAAA,OAAO,EAAE;AAA1B,OAAP;AACD;;AAED,UAAMC,eAAe,GAAG,MAAMhB,eAAe,CAACiB,cAAhB,CAA+BX,OAA/B,CAA9B;AACA,UAAM;AAAEY,MAAAA,MAAF;AAAUC,MAAAA,MAAV;AAAkBC,MAAAA,MAAlB;AAA0BC,MAAAA,OAA1B;AAAmCC,MAAAA,UAAnC;AAA+CC,MAAAA;AAA/C,QAA4DxB,wBAAwB,CAACiB,eAAD,CAA1F;AACA,UAAMQ,IAAI,GAAG,MAAM1B,OAAO,CAACsB,MAAD,CAA1B;AACA,UAAMV,QAAQ,GAAG,MAAML,WAAW,CAACC,OAAD,CAAlC,CAVE,CAYF;AACA;;AACA,QAAImB,GAAJ;;AACA,QAAIF,QAAJ,EAAc;AAAA;;AACZE,MAAAA,GAAG,GAAG,MAAM5B,eAAe,CAACyB,UAAD,EAAaD,OAAb,CAA3B,CADY,CAGZ;;AACA1B,MAAAA,OAAO,CAAC+B,GAAR,CACG,WAAUpB,OAAQ,EADrB,EAEE;AACEI,QAAAA,QADF;AAEEiB,QAAAA,MAAM,EAAG,2CAAD,QAA2CF,GAA3C,yCAA2C,KAAKG,MAAL,CAAYC,EAAG;AAFpE,OAFF,EAME;AAAEC,QAAAA,MAAM,EAAE,qBAAV;AAAiCC,QAAAA,MAAM,EAAE,IAAzC;AAA+CC,QAAAA,OAAO,EAAE;AAAxD,OANF;AAQD;;AAED,UAAMjB,OAAO,GAAG;AACdG,MAAAA,MADc;AAEdC,MAAAA,MAFc;AAGdC,MAAAA,MAHc;AAIdC,MAAAA,OAJc;AAKdX,MAAAA,QALc;AAMdY,MAAAA,UANc;AAOdC,MAAAA,QAPc;AAQdE,MAAAA,GARc;AASdD,MAAAA;AATc,KAAhB;AAYA,WAAO;AAAEV,MAAAA,aAAF;AAAiBC,MAAAA;AAAjB,KAAP;AACD,GA1CD,CA0CE,OAAOH,KAAP,EAAc;AACd,WAAO,IAAP;AACD;AACF,CA9CD;;AAgDA,eAAeC,UAAf","sourcesContent":["import Cookies from 'js-cookie'\nimport { getProfileContract } from 'utils/contractHelpers'\nimport { Nft } from 'config/constants/types'\nimport { getNftByTokenId } from 'utils/collectibles'\nimport { Profile } from 'state/types'\nimport { getTeam } from 'state/teams/helpers'\nimport { transformProfileResponse } from './helpers'\n\nconst profileContract = getProfileContract()\nconst profileApi = process.env.REACT_APP_API_PROFILE\n\nexport interface GetProfileResponse {\n  hasRegistered: boolean\n  profile?: Profile\n}\n\nconst getUsername = async (address: string): Promise<string> => {\n  try {\n    const response = await fetch(`${profileApi}/api/users/${address}`)\n\n    if (!response.ok) {\n      return ''\n    }\n\n    const { username = '' } = await response.json()\n\n    return username\n  } catch (error) {\n    return ''\n  }\n}\n\nconst getProfile = async (address: string): Promise<GetProfileResponse> => {\n  try {\n    const hasRegistered = (await profileContract.hasRegistered(address)) as boolean\n\n    if (!hasRegistered) {\n      return { hasRegistered, profile: null }\n    }\n\n    const profileResponse = await profileContract.getUserProfile(address)\n    const { userId, points, teamId, tokenId, nftAddress, isActive } = transformProfileResponse(profileResponse)\n    const team = await getTeam(teamId)\n    const username = await getUsername(address)\n\n    // If the profile is not active the tokenId returns 0, which is still a valid token id\n    // so only fetch the nft data if active\n    let nft: Nft\n    if (isActive) {\n      nft = await getNftByTokenId(nftAddress, tokenId)\n\n      // Save the preview image in a cookie so it can be used on the exchange\n      Cookies.set(\n        `profile_${address}`,\n        {\n          username,\n          avatar: `https://pancakeswap.finance/images/nfts/${nft?.images.sm}`,\n        },\n        { domain: 'pancakeswap.finance', secure: true, expires: 30 },\n      )\n    }\n\n    const profile = {\n      userId,\n      points,\n      teamId,\n      tokenId,\n      username,\n      nftAddress,\n      isActive,\n      nft,\n      team,\n    } as Profile\n\n    return { hasRegistered, profile }\n  } catch (error) {\n    return null\n  }\n}\n\nexport default getProfile\n"]},"metadata":{},"sourceType":"module"}