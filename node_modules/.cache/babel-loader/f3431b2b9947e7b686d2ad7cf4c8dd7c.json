{"ast":null,"code":"var _jsxFileName = \"/Users/thomas/Documents/pancake-frontend/pankcake-frontend/src/views/Lottery/components/WinningNumbers.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { Flex } from '@pancakeswap/uikit';\nimport { random } from 'lodash';\nimport uniqueId from 'lodash/uniqueId';\nimport { parseRetreivedNumber } from '../helpers';\nimport { BallWithNumber } from '../svgs';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst WinningNumbers = ({\n  number,\n  size = '32px',\n  fontSize = '16px',\n  rotateText,\n  ...containerProps\n}) => {\n  _s();\n\n  const [rotationValues, setRotationValues] = useState([]);\n  const reversedNumber = parseRetreivedNumber(number);\n  const numAsArray = reversedNumber.split('');\n  const colors = ['pink', 'lilac', 'teal', 'aqua', 'green', 'yellow'];\n  useEffect(() => {\n    if (rotateText && numAsArray && rotationValues.length === 0) {\n      setRotationValues(numAsArray.map(() => random(-30, 30)));\n    }\n  }, [rotateText, numAsArray, rotationValues]);\n  return /*#__PURE__*/_jsxDEV(Flex, {\n    justifyContent: \"space-between\",\n    ...containerProps,\n    children: numAsArray.map((num, index) => {\n      return /*#__PURE__*/_jsxDEV(BallWithNumber, {\n        rotationTransform: rotateText && rotationValues[index],\n        size: size,\n        fontSize: fontSize,\n        color: colors[index],\n        number: num\n      }, uniqueId(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n\n_s(WinningNumbers, \"2StapSlzQpNMVHWmfHT3lxPCTUY=\");\n\n_c = WinningNumbers;\nexport default WinningNumbers;\n\nvar _c;\n\n$RefreshReg$(_c, \"WinningNumbers\");","map":{"version":3,"sources":["/Users/thomas/Documents/pancake-frontend/pankcake-frontend/src/views/Lottery/components/WinningNumbers.tsx"],"names":["React","useEffect","useState","Flex","random","uniqueId","parseRetreivedNumber","BallWithNumber","WinningNumbers","number","size","fontSize","rotateText","containerProps","rotationValues","setRotationValues","reversedNumber","numAsArray","split","colors","length","map","num","index"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,IAAT,QAAgC,oBAAhC;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,OAAOC,QAAP,MAAqB,iBAArB;AACA,SAASC,oBAAT,QAAqC,YAArC;AACA,SAASC,cAAT,QAA+B,SAA/B;;;AAUA,MAAMC,cAA6C,GAAG,CAAC;AACrDC,EAAAA,MADqD;AAErDC,EAAAA,IAAI,GAAG,MAF8C;AAGrDC,EAAAA,QAAQ,GAAG,MAH0C;AAIrDC,EAAAA,UAJqD;AAKrD,KAAGC;AALkD,CAAD,KAMhD;AAAA;;AACJ,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCb,QAAQ,CAAC,EAAD,CAApD;AACA,QAAMc,cAAc,GAAGV,oBAAoB,CAACG,MAAD,CAA3C;AACA,QAAMQ,UAAU,GAAGD,cAAc,CAACE,KAAf,CAAqB,EAArB,CAAnB;AACA,QAAMC,MAAmB,GAAG,CAAC,MAAD,EAAS,OAAT,EAAkB,MAAlB,EAA0B,MAA1B,EAAkC,OAAlC,EAA2C,QAA3C,CAA5B;AAEAlB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIW,UAAU,IAAIK,UAAd,IAA4BH,cAAc,CAACM,MAAf,KAA0B,CAA1D,EAA6D;AAC3DL,MAAAA,iBAAiB,CAACE,UAAU,CAACI,GAAX,CAAe,MAAMjB,MAAM,CAAC,CAAC,EAAF,EAAM,EAAN,CAA3B,CAAD,CAAjB;AACD;AACF,GAJQ,EAIN,CAACQ,UAAD,EAAaK,UAAb,EAAyBH,cAAzB,CAJM,CAAT;AAMA,sBACE,QAAC,IAAD;AAAM,IAAA,cAAc,EAAC,eAArB;AAAA,OAAyCD,cAAzC;AAAA,cACGI,UAAU,CAACI,GAAX,CAAe,CAACC,GAAD,EAAMC,KAAN,KAAgB;AAC9B,0BACE,QAAC,cAAD;AAEE,QAAA,iBAAiB,EAAEX,UAAU,IAAIE,cAAc,CAACS,KAAD,CAFjD;AAGE,QAAA,IAAI,EAAEb,IAHR;AAIE,QAAA,QAAQ,EAAEC,QAJZ;AAKE,QAAA,KAAK,EAAEQ,MAAM,CAACI,KAAD,CALf;AAME,QAAA,MAAM,EAAED;AANV,SACOjB,QAAQ,EADf;AAAA;AAAA;AAAA;AAAA,cADF;AAUD,KAXA;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAgBD,CAlCD;;GAAMG,c;;KAAAA,c;AAoCN,eAAeA,cAAf","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { Flex, FlexProps } from '@pancakeswap/uikit'\nimport { random } from 'lodash'\nimport uniqueId from 'lodash/uniqueId'\nimport { parseRetreivedNumber } from '../helpers'\nimport { BallWithNumber } from '../svgs'\nimport { BallColor } from '../svgs/Balls'\n\ninterface WinningNumbersProps extends FlexProps {\n  number: string\n  size?: string\n  fontSize?: string\n  rotateText?: boolean\n}\n\nconst WinningNumbers: React.FC<WinningNumbersProps> = ({\n  number,\n  size = '32px',\n  fontSize = '16px',\n  rotateText,\n  ...containerProps\n}) => {\n  const [rotationValues, setRotationValues] = useState([])\n  const reversedNumber = parseRetreivedNumber(number)\n  const numAsArray = reversedNumber.split('')\n  const colors: BallColor[] = ['pink', 'lilac', 'teal', 'aqua', 'green', 'yellow']\n\n  useEffect(() => {\n    if (rotateText && numAsArray && rotationValues.length === 0) {\n      setRotationValues(numAsArray.map(() => random(-30, 30)))\n    }\n  }, [rotateText, numAsArray, rotationValues])\n\n  return (\n    <Flex justifyContent=\"space-between\" {...containerProps}>\n      {numAsArray.map((num, index) => {\n        return (\n          <BallWithNumber\n            key={uniqueId()}\n            rotationTransform={rotateText && rotationValues[index]}\n            size={size}\n            fontSize={fontSize}\n            color={colors[index]}\n            number={num}\n          />\n        )\n      })}\n    </Flex>\n  )\n}\n\nexport default WinningNumbers\n"]},"metadata":{},"sourceType":"module"}