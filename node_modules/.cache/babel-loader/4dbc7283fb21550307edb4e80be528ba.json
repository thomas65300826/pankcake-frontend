{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport { getPredictionsContract } from 'utils/contractHelpers';\n\nconst useIsRefundable = epoch => {\n  _s();\n\n  const [isRefundable, setIsRefundable] = useState(false);\n  const {\n    account\n  } = useWeb3React();\n  useEffect(() => {\n    const fetchRefundableStatus = async () => {\n      const predictionsContract = getPredictionsContract();\n      const refundable = await predictionsContract.refundable(epoch, account);\n\n      if (refundable) {\n        // Double check they have not already claimed\n        const ledger = await predictionsContract.ledger(epoch, account);\n        setIsRefundable(ledger.claimed === false);\n      } else {\n        setIsRefundable(false);\n      }\n    };\n\n    if (account) {\n      fetchRefundableStatus();\n    }\n  }, [account, epoch, setIsRefundable]);\n  return {\n    isRefundable,\n    setIsRefundable\n  };\n};\n\n_s(useIsRefundable, \"bb238Rk90BpggObAKig+6Y0BDz8=\", false, function () {\n  return [useWeb3React];\n});\n\nexport default useIsRefundable;","map":{"version":3,"sources":["/Users/thomas/Documents/pancake-frontend/pankcake-frontend/src/views/Predictions/hooks/useIsRefundable.ts"],"names":["useEffect","useState","useWeb3React","getPredictionsContract","useIsRefundable","epoch","isRefundable","setIsRefundable","account","fetchRefundableStatus","predictionsContract","refundable","ledger","claimed"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,YAAT,QAA6B,kBAA7B;AACA,SAASC,sBAAT,QAAuC,uBAAvC;;AAEA,MAAMC,eAAe,GAAIC,KAAD,IAAmB;AAAA;;AACzC,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCN,QAAQ,CAAC,KAAD,CAAhD;AACA,QAAM;AAAEO,IAAAA;AAAF,MAAcN,YAAY,EAAhC;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMS,qBAAqB,GAAG,YAAY;AACxC,YAAMC,mBAAmB,GAAGP,sBAAsB,EAAlD;AACA,YAAMQ,UAAU,GAAG,MAAMD,mBAAmB,CAACC,UAApB,CAA+BN,KAA/B,EAAsCG,OAAtC,CAAzB;;AAEA,UAAIG,UAAJ,EAAgB;AACd;AACA,cAAMC,MAAM,GAAG,MAAMF,mBAAmB,CAACE,MAApB,CAA2BP,KAA3B,EAAkCG,OAAlC,CAArB;AACAD,QAAAA,eAAe,CAACK,MAAM,CAACC,OAAP,KAAmB,KAApB,CAAf;AACD,OAJD,MAIO;AACLN,QAAAA,eAAe,CAAC,KAAD,CAAf;AACD;AACF,KAXD;;AAaA,QAAIC,OAAJ,EAAa;AACXC,MAAAA,qBAAqB;AACtB;AACF,GAjBQ,EAiBN,CAACD,OAAD,EAAUH,KAAV,EAAiBE,eAAjB,CAjBM,CAAT;AAmBA,SAAO;AAAED,IAAAA,YAAF;AAAgBC,IAAAA;AAAhB,GAAP;AACD,CAxBD;;GAAMH,e;UAEgBF,Y;;;AAwBtB,eAAeE,eAAf","sourcesContent":["import { useEffect, useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { getPredictionsContract } from 'utils/contractHelpers'\n\nconst useIsRefundable = (epoch: number) => {\n  const [isRefundable, setIsRefundable] = useState(false)\n  const { account } = useWeb3React()\n\n  useEffect(() => {\n    const fetchRefundableStatus = async () => {\n      const predictionsContract = getPredictionsContract()\n      const refundable = await predictionsContract.refundable(epoch, account)\n\n      if (refundable) {\n        // Double check they have not already claimed\n        const ledger = await predictionsContract.ledger(epoch, account)\n        setIsRefundable(ledger.claimed === false)\n      } else {\n        setIsRefundable(false)\n      }\n    }\n\n    if (account) {\n      fetchRefundableStatus()\n    }\n  }, [account, epoch, setIsRefundable])\n\n  return { isRefundable, setIsRefundable }\n}\n\nexport default useIsRefundable\n"]},"metadata":{},"sourceType":"module"}