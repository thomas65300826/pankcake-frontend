{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport usePreviousValue from 'hooks/usePreviousValue';\nimport { useAppDispatch } from 'state';\nimport { useGetCurrentEpoch, useGetSortedRounds } from 'state/predictions/hooks';\nimport useSwiper from './useSwiper';\n/**\n * Hooks for actions to be performed when the round changes\n */\n\nconst useOnNextRound = () => {\n  _s();\n\n  const currentEpoch = useGetCurrentEpoch();\n  const rounds = useGetSortedRounds();\n  const {\n    account\n  } = useWeb3React();\n  const previousEpoch = usePreviousValue(currentEpoch);\n  const {\n    swiper\n  } = useSwiper();\n  const dispatch = useAppDispatch();\n  useEffect(() => {\n    if (swiper && currentEpoch !== undefined && previousEpoch !== undefined && currentEpoch !== previousEpoch) {\n      const currentEpochIndex = rounds.findIndex(round => round.epoch === currentEpoch); // Slide to the current LIVE round which is always the one before the current round\n\n      swiper.slideTo(currentEpochIndex - 1);\n      swiper.update();\n    }\n  }, [previousEpoch, currentEpoch, rounds, swiper, account, dispatch]);\n};\n\n_s(useOnNextRound, \"msTJ2uYFOP+3F+ULaB03y2ZBGjc=\", false, function () {\n  return [useGetCurrentEpoch, useGetSortedRounds, useWeb3React, usePreviousValue, useSwiper, useAppDispatch];\n});\n\nexport default useOnNextRound;","map":{"version":3,"sources":["/Users/thomas/Documents/pancake-frontend/src/views/Predictions/hooks/useOnNextRound.ts"],"names":["useEffect","useWeb3React","usePreviousValue","useAppDispatch","useGetCurrentEpoch","useGetSortedRounds","useSwiper","useOnNextRound","currentEpoch","rounds","account","previousEpoch","swiper","dispatch","undefined","currentEpochIndex","findIndex","round","epoch","slideTo","update"],"mappings":";;AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,YAAT,QAA6B,kBAA7B;AACA,OAAOC,gBAAP,MAA6B,wBAA7B;AACA,SAASC,cAAT,QAA+B,OAA/B;AACA,SAASC,kBAAT,EAA6BC,kBAA7B,QAAuD,yBAAvD;AACA,OAAOC,SAAP,MAAsB,aAAtB;AAEA;AACA;AACA;;AACA,MAAMC,cAAc,GAAG,MAAM;AAAA;;AAC3B,QAAMC,YAAY,GAAGJ,kBAAkB,EAAvC;AACA,QAAMK,MAAM,GAAGJ,kBAAkB,EAAjC;AACA,QAAM;AAAEK,IAAAA;AAAF,MAAcT,YAAY,EAAhC;AACA,QAAMU,aAAa,GAAGT,gBAAgB,CAACM,YAAD,CAAtC;AACA,QAAM;AAAEI,IAAAA;AAAF,MAAaN,SAAS,EAA5B;AACA,QAAMO,QAAQ,GAAGV,cAAc,EAA/B;AAEAH,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIY,MAAM,IAAIJ,YAAY,KAAKM,SAA3B,IAAwCH,aAAa,KAAKG,SAA1D,IAAuEN,YAAY,KAAKG,aAA5F,EAA2G;AACzG,YAAMI,iBAAiB,GAAGN,MAAM,CAACO,SAAP,CAAkBC,KAAD,IAAWA,KAAK,CAACC,KAAN,KAAgBV,YAA5C,CAA1B,CADyG,CAGzG;;AACAI,MAAAA,MAAM,CAACO,OAAP,CAAeJ,iBAAiB,GAAG,CAAnC;AACAH,MAAAA,MAAM,CAACQ,MAAP;AACD;AACF,GARQ,EAQN,CAACT,aAAD,EAAgBH,YAAhB,EAA8BC,MAA9B,EAAsCG,MAAtC,EAA8CF,OAA9C,EAAuDG,QAAvD,CARM,CAAT;AASD,CAjBD;;GAAMN,c;UACiBH,kB,EACNC,kB,EACKJ,Y,EACEC,gB,EACHI,S,EACFH,c;;;AAanB,eAAeI,cAAf","sourcesContent":["import { useEffect } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport usePreviousValue from 'hooks/usePreviousValue'\nimport { useAppDispatch } from 'state'\nimport { useGetCurrentEpoch, useGetSortedRounds } from 'state/predictions/hooks'\nimport useSwiper from './useSwiper'\n\n/**\n * Hooks for actions to be performed when the round changes\n */\nconst useOnNextRound = () => {\n  const currentEpoch = useGetCurrentEpoch()\n  const rounds = useGetSortedRounds()\n  const { account } = useWeb3React()\n  const previousEpoch = usePreviousValue(currentEpoch)\n  const { swiper } = useSwiper()\n  const dispatch = useAppDispatch()\n\n  useEffect(() => {\n    if (swiper && currentEpoch !== undefined && previousEpoch !== undefined && currentEpoch !== previousEpoch) {\n      const currentEpochIndex = rounds.findIndex((round) => round.epoch === currentEpoch)\n\n      // Slide to the current LIVE round which is always the one before the current round\n      swiper.slideTo(currentEpochIndex - 1)\n      swiper.update()\n    }\n  }, [previousEpoch, currentEpoch, rounds, swiper, account, dispatch])\n}\n\nexport default useOnNextRound\n"]},"metadata":{},"sourceType":"module"}