{"ast":null,"code":"import { InjectedConnector } from '@web3-react/injected-connector';\nimport { WalletConnectConnector } from '@web3-react/walletconnect-connector';\nimport { BscConnector } from '@binance-chain/bsc-connector';\nimport { ConnectorNames } from '@pancakeswap/uikit';\nimport { ethers } from 'ethers';\nimport getNodeUrl from './getRpcUrl';\nconst POLLING_INTERVAL = 12000;\nconst rpcUrl = getNodeUrl();\nconst chainId = parseInt(process.env.REACT_APP_CHAIN_ID, 10);\nconst injected = new InjectedConnector({\n  supportedChainIds: [chainId]\n});\nconst walletconnect = new WalletConnectConnector({\n  rpc: {\n    [chainId]: rpcUrl\n  },\n  bridge: 'https://pancakeswap.bridge.walletconnect.org/',\n  qrcode: true,\n  pollingInterval: POLLING_INTERVAL\n});\nconst bscConnector = new BscConnector({\n  supportedChainIds: [chainId]\n});\nexport const connectorsByName = {\n  [ConnectorNames.Injected]: injected,\n  [ConnectorNames.WalletConnect]: walletconnect,\n  [ConnectorNames.BSC]: bscConnector\n};\nexport const getLibrary = provider => {\n  const library = new ethers.providers.Web3Provider(provider);\n  library.pollingInterval = POLLING_INTERVAL;\n  return library;\n};\n/**\n * BSC Wallet requires a different sign method\n * @see https://docs.binance.org/smart-chain/wallet/wallet_api.html#binancechainbnbsignaddress-string-message-string-promisepublickey-string-signature-string\n */\n\nexport const signMessage = async (provider, account, message) => {\n  var _provider$provider;\n\n  if (window.BinanceChain) {\n    const {\n      signature\n    } = await window.BinanceChain.bnbSign(account, message);\n    return signature;\n  }\n  /**\n   * Wallet Connect does not sign the message correctly unless you use their method\n   * @see https://github.com/WalletConnect/walletconnect-monorepo/issues/462\n   */\n\n\n  if ((_provider$provider = provider.provider) === null || _provider$provider === void 0 ? void 0 : _provider$provider.wc) {\n    var _provider$provider2;\n\n    const wcMessage = ethers.utils.hexlify(ethers.utils.toUtf8Bytes(message));\n    const signature = await ((_provider$provider2 = provider.provider) === null || _provider$provider2 === void 0 ? void 0 : _provider$provider2.wc.signPersonalMessage([wcMessage, account]));\n    return signature;\n  }\n\n  return provider.getSigner(account).signMessage(message);\n};","map":{"version":3,"sources":["/Users/thomas/Documents/pancake-frontend/src/utils/web3React.ts"],"names":["InjectedConnector","WalletConnectConnector","BscConnector","ConnectorNames","ethers","getNodeUrl","POLLING_INTERVAL","rpcUrl","chainId","parseInt","process","env","REACT_APP_CHAIN_ID","injected","supportedChainIds","walletconnect","rpc","bridge","qrcode","pollingInterval","bscConnector","connectorsByName","Injected","WalletConnect","BSC","getLibrary","provider","library","providers","Web3Provider","signMessage","account","message","window","BinanceChain","signature","bnbSign","wc","wcMessage","utils","hexlify","toUtf8Bytes","signPersonalMessage","getSigner"],"mappings":"AAAA,SAASA,iBAAT,QAAkC,gCAAlC;AACA,SAASC,sBAAT,QAAuC,qCAAvC;AACA,SAASC,YAAT,QAA6B,8BAA7B;AACA,SAASC,cAAT,QAA+B,oBAA/B;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,OAAOC,UAAP,MAAuB,aAAvB;AAEA,MAAMC,gBAAgB,GAAG,KAAzB;AACA,MAAMC,MAAM,GAAGF,UAAU,EAAzB;AACA,MAAMG,OAAO,GAAGC,QAAQ,CAACC,OAAO,CAACC,GAAR,CAAYC,kBAAb,EAAiC,EAAjC,CAAxB;AAEA,MAAMC,QAAQ,GAAG,IAAIb,iBAAJ,CAAsB;AAAEc,EAAAA,iBAAiB,EAAE,CAACN,OAAD;AAArB,CAAtB,CAAjB;AAEA,MAAMO,aAAa,GAAG,IAAId,sBAAJ,CAA2B;AAC/Ce,EAAAA,GAAG,EAAE;AAAE,KAACR,OAAD,GAAWD;AAAb,GAD0C;AAE/CU,EAAAA,MAAM,EAAE,+CAFuC;AAG/CC,EAAAA,MAAM,EAAE,IAHuC;AAI/CC,EAAAA,eAAe,EAAEb;AAJ8B,CAA3B,CAAtB;AAOA,MAAMc,YAAY,GAAG,IAAIlB,YAAJ,CAAiB;AAAEY,EAAAA,iBAAiB,EAAE,CAACN,OAAD;AAArB,CAAjB,CAArB;AAEA,OAAO,MAAMa,gBAA4D,GAAG;AAC1E,GAAClB,cAAc,CAACmB,QAAhB,GAA2BT,QAD+C;AAE1E,GAACV,cAAc,CAACoB,aAAhB,GAAgCR,aAF0C;AAG1E,GAACZ,cAAc,CAACqB,GAAhB,GAAsBJ;AAHoD,CAArE;AAMP,OAAO,MAAMK,UAAU,GAAIC,QAAD,IAA6C;AACrE,QAAMC,OAAO,GAAG,IAAIvB,MAAM,CAACwB,SAAP,CAAiBC,YAArB,CAAkCH,QAAlC,CAAhB;AACAC,EAAAA,OAAO,CAACR,eAAR,GAA0Bb,gBAA1B;AACA,SAAOqB,OAAP;AACD,CAJM;AAMP;AACA;AACA;AACA;;AACA,OAAO,MAAMG,WAAW,GAAG,OAAOJ,QAAP,EAAsBK,OAAtB,EAAuCC,OAAvC,KAA4E;AAAA;;AACrG,MAAIC,MAAM,CAACC,YAAX,EAAyB;AACvB,UAAM;AAAEC,MAAAA;AAAF,QAAgB,MAAMF,MAAM,CAACC,YAAP,CAAoBE,OAApB,CAA4BL,OAA5B,EAAqCC,OAArC,CAA5B;AACA,WAAOG,SAAP;AACD;AAED;AACF;AACA;AACA;;;AACE,4BAAIT,QAAQ,CAACA,QAAb,uDAAI,mBAAmBW,EAAvB,EAA2B;AAAA;;AACzB,UAAMC,SAAS,GAAGlC,MAAM,CAACmC,KAAP,CAAaC,OAAb,CAAqBpC,MAAM,CAACmC,KAAP,CAAaE,WAAb,CAAyBT,OAAzB,CAArB,CAAlB;AACA,UAAMG,SAAS,GAAG,8BAAMT,QAAQ,CAACA,QAAf,wDAAM,oBAAmBW,EAAnB,CAAsBK,mBAAtB,CAA0C,CAACJ,SAAD,EAAYP,OAAZ,CAA1C,CAAN,CAAlB;AACA,WAAOI,SAAP;AACD;;AAED,SAAOT,QAAQ,CAACiB,SAAT,CAAmBZ,OAAnB,EAA4BD,WAA5B,CAAwCE,OAAxC,CAAP;AACD,CAjBM","sourcesContent":["import { InjectedConnector } from '@web3-react/injected-connector'\nimport { WalletConnectConnector } from '@web3-react/walletconnect-connector'\nimport { BscConnector } from '@binance-chain/bsc-connector'\nimport { ConnectorNames } from '@pancakeswap/uikit'\nimport { ethers } from 'ethers'\nimport getNodeUrl from './getRpcUrl'\n\nconst POLLING_INTERVAL = 12000\nconst rpcUrl = getNodeUrl()\nconst chainId = parseInt(process.env.REACT_APP_CHAIN_ID, 10)\n\nconst injected = new InjectedConnector({ supportedChainIds: [chainId] })\n\nconst walletconnect = new WalletConnectConnector({\n  rpc: { [chainId]: rpcUrl },\n  bridge: 'https://pancakeswap.bridge.walletconnect.org/',\n  qrcode: true,\n  pollingInterval: POLLING_INTERVAL,\n})\n\nconst bscConnector = new BscConnector({ supportedChainIds: [chainId] })\n\nexport const connectorsByName: { [connectorName in ConnectorNames]: any } = {\n  [ConnectorNames.Injected]: injected,\n  [ConnectorNames.WalletConnect]: walletconnect,\n  [ConnectorNames.BSC]: bscConnector,\n}\n\nexport const getLibrary = (provider): ethers.providers.Web3Provider => {\n  const library = new ethers.providers.Web3Provider(provider)\n  library.pollingInterval = POLLING_INTERVAL\n  return library\n}\n\n/**\n * BSC Wallet requires a different sign method\n * @see https://docs.binance.org/smart-chain/wallet/wallet_api.html#binancechainbnbsignaddress-string-message-string-promisepublickey-string-signature-string\n */\nexport const signMessage = async (provider: any, account: string, message: string): Promise<string> => {\n  if (window.BinanceChain) {\n    const { signature } = await window.BinanceChain.bnbSign(account, message)\n    return signature\n  }\n\n  /**\n   * Wallet Connect does not sign the message correctly unless you use their method\n   * @see https://github.com/WalletConnect/walletconnect-monorepo/issues/462\n   */\n  if (provider.provider?.wc) {\n    const wcMessage = ethers.utils.hexlify(ethers.utils.toUtf8Bytes(message))\n    const signature = await provider.provider?.wc.signPersonalMessage([wcMessage, account])\n    return signature\n  }\n\n  return provider.getSigner(account).signMessage(message)\n}\n"]},"metadata":{},"sourceType":"module"}