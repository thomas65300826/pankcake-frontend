{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$(),\n    _s5 = $RefreshSig$(),\n    _s6 = $RefreshSig$(),\n    _s7 = $RefreshSig$();\n\nimport { useEffect, useMemo } from 'react';\nimport BigNumber from 'bignumber.js';\nimport { useWeb3React } from '@web3-react/core';\nimport { useSelector } from 'react-redux';\nimport { useAppDispatch } from 'state';\nimport useRefresh from 'hooks/useRefresh';\nimport { fetchCurrentLotteryId, fetchCurrentLottery, fetchUserTicketsAndLotteries, fetchPublicLotteries } from '.';\nimport { useProcessLotteryResponse } from './helpers'; // Lottery\n\nexport const useGetCurrentLotteryId = () => {\n  _s();\n\n  return useSelector(state => state.lottery.currentLotteryId);\n};\n\n_s(useGetCurrentLotteryId, \"nKHvd/QB6hocKEk0fSJoSYcCyR8=\", false, function () {\n  return [useSelector];\n});\n\nexport const useGetUserLotteriesGraphData = () => {\n  _s2();\n\n  return useSelector(state => state.lottery.userLotteryData);\n};\n\n_s2(useGetUserLotteriesGraphData, \"nKHvd/QB6hocKEk0fSJoSYcCyR8=\", false, function () {\n  return [useSelector];\n});\n\nexport const useGetUserLotteryGraphRoundById = lotteryId => {\n  _s3();\n\n  const userLotteriesData = useGetUserLotteriesGraphData();\n  return userLotteriesData.rounds.find(userRound => userRound.lotteryId === lotteryId);\n};\n\n_s3(useGetUserLotteryGraphRoundById, \"z8N4awSf+GNb6r9G/MrGRF+GqRY=\", false, function () {\n  return [useGetUserLotteriesGraphData];\n});\n\nexport const useGetLotteriesGraphData = () => {\n  _s4();\n\n  return useSelector(state => state.lottery.lotteriesData);\n};\n\n_s4(useGetLotteriesGraphData, \"nKHvd/QB6hocKEk0fSJoSYcCyR8=\", false, function () {\n  return [useSelector];\n});\n\nexport const useGetLotteryGraphDataById = lotteryId => {\n  _s5();\n\n  const lotteriesData = useGetLotteriesGraphData();\n  return lotteriesData.find(lottery => lottery.id === lotteryId);\n};\n\n_s5(useGetLotteryGraphDataById, \"jI7TCRvqCYJcawyD+w3dAwafvtM=\", false, function () {\n  return [useGetLotteriesGraphData];\n});\n\nexport const useFetchLottery = () => {\n  _s6();\n\n  const {\n    account\n  } = useWeb3React();\n  const {\n    fastRefresh\n  } = useRefresh();\n  const dispatch = useAppDispatch();\n  const currentLotteryId = useGetCurrentLotteryId();\n  useEffect(() => {\n    // get current lottery ID & max ticket buy\n    dispatch(fetchCurrentLotteryId());\n  }, [dispatch]);\n  useEffect(() => {\n    if (currentLotteryId) {\n      // Get historical lottery data from nodes + subgraph\n      dispatch(fetchPublicLotteries({\n        currentLotteryId\n      })); // get public data for current lottery\n\n      dispatch(fetchCurrentLottery({\n        currentLotteryId\n      }));\n    }\n  }, [dispatch, currentLotteryId, fastRefresh]);\n  useEffect(() => {\n    // get user tickets for current lottery, and user lottery subgraph data\n    if (account && currentLotteryId) {\n      dispatch(fetchUserTicketsAndLotteries({\n        account,\n        currentLotteryId\n      }));\n    }\n  }, [dispatch, currentLotteryId, account]);\n};\n\n_s6(useFetchLottery, \"J3IdVYsSzHSNha/vHhWZX5SgbmQ=\", false, function () {\n  return [useWeb3React, useRefresh, useAppDispatch, useGetCurrentLotteryId];\n});\n\nexport const useLottery = () => {\n  _s7();\n\n  const currentRound = useSelector(state => state.lottery.currentRound);\n  const processedCurrentRound = useProcessLotteryResponse(currentRound);\n  const isTransitioning = useSelector(state => state.lottery.isTransitioning);\n  const currentLotteryId = useGetCurrentLotteryId();\n  const userLotteryData = useGetUserLotteriesGraphData();\n  const lotteriesData = useGetLotteriesGraphData();\n  const maxNumberTicketsPerBuyOrClaimAsString = useSelector(state => state.lottery.maxNumberTicketsPerBuyOrClaim);\n  const maxNumberTicketsPerBuyOrClaim = useMemo(() => {\n    return new BigNumber(maxNumberTicketsPerBuyOrClaimAsString);\n  }, [maxNumberTicketsPerBuyOrClaimAsString]);\n  return {\n    currentLotteryId,\n    maxNumberTicketsPerBuyOrClaim,\n    isTransitioning,\n    userLotteryData,\n    lotteriesData,\n    currentRound: processedCurrentRound\n  };\n};\n\n_s7(useLottery, \"oKkMY3Lc45r20/N2JqtZ+jgRftc=\", false, function () {\n  return [useSelector, useProcessLotteryResponse, useSelector, useGetCurrentLotteryId, useGetUserLotteriesGraphData, useGetLotteriesGraphData, useSelector];\n});","map":{"version":3,"sources":["/Users/thomas/Documents/pancake-frontend/pankcake-frontend/src/state/lottery/hooks.ts"],"names":["useEffect","useMemo","BigNumber","useWeb3React","useSelector","useAppDispatch","useRefresh","fetchCurrentLotteryId","fetchCurrentLottery","fetchUserTicketsAndLotteries","fetchPublicLotteries","useProcessLotteryResponse","useGetCurrentLotteryId","state","lottery","currentLotteryId","useGetUserLotteriesGraphData","userLotteryData","useGetUserLotteryGraphRoundById","lotteryId","userLotteriesData","rounds","find","userRound","useGetLotteriesGraphData","lotteriesData","useGetLotteryGraphDataById","id","useFetchLottery","account","fastRefresh","dispatch","useLottery","currentRound","processedCurrentRound","isTransitioning","maxNumberTicketsPerBuyOrClaimAsString","maxNumberTicketsPerBuyOrClaim"],"mappings":"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","sourcesContent":["import { useEffect, useMemo } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { useSelector } from 'react-redux'\nimport { useAppDispatch } from 'state'\nimport useRefresh from 'hooks/useRefresh'\nimport { State } from '../types'\nimport { fetchCurrentLotteryId, fetchCurrentLottery, fetchUserTicketsAndLotteries, fetchPublicLotteries } from '.'\nimport { useProcessLotteryResponse } from './helpers'\n\n// Lottery\nexport const useGetCurrentLotteryId = () => {\n  return useSelector((state: State) => state.lottery.currentLotteryId)\n}\n\nexport const useGetUserLotteriesGraphData = () => {\n  return useSelector((state: State) => state.lottery.userLotteryData)\n}\n\nexport const useGetUserLotteryGraphRoundById = (lotteryId: string) => {\n  const userLotteriesData = useGetUserLotteriesGraphData()\n  return userLotteriesData.rounds.find((userRound) => userRound.lotteryId === lotteryId)\n}\n\nexport const useGetLotteriesGraphData = () => {\n  return useSelector((state: State) => state.lottery.lotteriesData)\n}\n\nexport const useGetLotteryGraphDataById = (lotteryId: string) => {\n  const lotteriesData = useGetLotteriesGraphData()\n  return lotteriesData.find((lottery) => lottery.id === lotteryId)\n}\n\nexport const useFetchLottery = () => {\n  const { account } = useWeb3React()\n  const { fastRefresh } = useRefresh()\n  const dispatch = useAppDispatch()\n  const currentLotteryId = useGetCurrentLotteryId()\n\n  useEffect(() => {\n    // get current lottery ID & max ticket buy\n    dispatch(fetchCurrentLotteryId())\n  }, [dispatch])\n\n  useEffect(() => {\n    if (currentLotteryId) {\n      // Get historical lottery data from nodes + subgraph\n      dispatch(fetchPublicLotteries({ currentLotteryId }))\n      // get public data for current lottery\n      dispatch(fetchCurrentLottery({ currentLotteryId }))\n    }\n  }, [dispatch, currentLotteryId, fastRefresh])\n\n  useEffect(() => {\n    // get user tickets for current lottery, and user lottery subgraph data\n    if (account && currentLotteryId) {\n      dispatch(fetchUserTicketsAndLotteries({ account, currentLotteryId }))\n    }\n  }, [dispatch, currentLotteryId, account])\n}\n\nexport const useLottery = () => {\n  const currentRound = useSelector((state: State) => state.lottery.currentRound)\n  const processedCurrentRound = useProcessLotteryResponse(currentRound)\n\n  const isTransitioning = useSelector((state: State) => state.lottery.isTransitioning)\n\n  const currentLotteryId = useGetCurrentLotteryId()\n  const userLotteryData = useGetUserLotteriesGraphData()\n  const lotteriesData = useGetLotteriesGraphData()\n\n  const maxNumberTicketsPerBuyOrClaimAsString = useSelector(\n    (state: State) => state.lottery.maxNumberTicketsPerBuyOrClaim,\n  )\n  const maxNumberTicketsPerBuyOrClaim = useMemo(() => {\n    return new BigNumber(maxNumberTicketsPerBuyOrClaimAsString)\n  }, [maxNumberTicketsPerBuyOrClaimAsString])\n\n  return {\n    currentLotteryId,\n    maxNumberTicketsPerBuyOrClaim,\n    isTransitioning,\n    userLotteryData,\n    lotteriesData,\n    currentRound: processedCurrentRound,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}