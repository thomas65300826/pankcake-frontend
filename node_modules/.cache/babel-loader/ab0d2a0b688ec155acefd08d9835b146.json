{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useReducer, useRef } from 'react';\nimport { noop } from 'lodash';\nimport { useWeb3React } from '@web3-react/core';\nimport useToast from 'hooks/useToast';\nimport { useTranslation } from 'contexts/Localization';\nconst initialState = {\n  approvalState: 'idle',\n  confirmState: 'idle'\n};\n\nconst reducer = (state, actions) => {\n  switch (actions.type) {\n    case 'requires_approval':\n      return { ...state,\n        approvalState: 'success'\n      };\n\n    case 'approve_sending':\n      return { ...state,\n        approvalState: 'loading'\n      };\n\n    case 'approve_receipt':\n      return { ...state,\n        approvalState: 'success'\n      };\n\n    case 'approve_error':\n      return { ...state,\n        approvalState: 'fail'\n      };\n\n    case 'confirm_sending':\n      return { ...state,\n        confirmState: 'loading'\n      };\n\n    case 'confirm_receipt':\n      return { ...state,\n        confirmState: 'success'\n      };\n\n    case 'confirm_error':\n      return { ...state,\n        confirmState: 'fail'\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst useApproveConfirmTransaction = ({\n  onApprove,\n  onConfirm,\n  onRequiresApproval,\n  onSuccess = noop,\n  onApproveSuccess = noop\n}) => {\n  _s();\n\n  const {\n    t\n  } = useTranslation();\n  const {\n    account\n  } = useWeb3React();\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const handlePreApprove = useRef(onRequiresApproval);\n  const {\n    toastError\n  } = useToast(); // Check if approval is necessary, re-check if account changes\n\n  useEffect(() => {\n    if (account && handlePreApprove.current) {\n      handlePreApprove.current().then(result => {\n        if (result) {\n          dispatch({\n            type: 'requires_approval'\n          });\n        }\n      });\n    }\n  }, [account, handlePreApprove, dispatch]);\n  return {\n    isApproving: state.approvalState === 'loading',\n    isApproved: state.approvalState === 'success',\n    isConfirming: state.confirmState === 'loading',\n    isConfirmed: state.confirmState === 'success',\n    handleApprove: async () => {\n      try {\n        const tx = await onApprove();\n        dispatch({\n          type: 'approve_sending'\n        });\n        const receipt = await tx.wait();\n\n        if (receipt.status) {\n          dispatch({\n            type: 'approve_receipt'\n          });\n          onApproveSuccess(state);\n        }\n      } catch (error) {\n        dispatch({\n          type: 'approve_error'\n        });\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'));\n      }\n    },\n    handleConfirm: async () => {\n      dispatch({\n        type: 'confirm_sending'\n      });\n\n      try {\n        const tx = await onConfirm();\n        const receipt = await tx.wait();\n\n        if (receipt.status) {\n          dispatch({\n            type: 'confirm_receipt'\n          });\n          onSuccess(state);\n        }\n      } catch (error) {\n        dispatch({\n          type: 'confirm_error'\n        });\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'));\n      }\n    }\n  };\n};\n\n_s(useApproveConfirmTransaction, \"Sj6L3+0OG2xsaq8xWJyi9nNrGBI=\", false, function () {\n  return [useTranslation, useWeb3React, useToast];\n});\n\nexport default useApproveConfirmTransaction;","map":{"version":3,"sources":["/Users/thomas/Documents/PycharmProjects/pancake-frontend/src/hooks/useApproveConfirmTransaction.ts"],"names":["useEffect","useReducer","useRef","noop","useWeb3React","useToast","useTranslation","initialState","approvalState","confirmState","reducer","state","actions","type","useApproveConfirmTransaction","onApprove","onConfirm","onRequiresApproval","onSuccess","onApproveSuccess","t","account","dispatch","handlePreApprove","toastError","current","then","result","isApproving","isApproved","isConfirming","isConfirmed","handleApprove","tx","receipt","wait","status","error","handleConfirm"],"mappings":"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","sourcesContent":["import { useEffect, useReducer, useRef } from 'react'\nimport { noop } from 'lodash'\nimport { useWeb3React } from '@web3-react/core'\nimport { ethers } from 'ethers'\nimport useToast from 'hooks/useToast'\nimport { useTranslation } from 'contexts/Localization'\n\ntype LoadingState = 'idle' | 'loading' | 'success' | 'fail'\n\ntype Action =\n  | { type: 'requires_approval' }\n  | { type: 'approve_sending' }\n  | { type: 'approve_receipt' }\n  | { type: 'approve_error' }\n  | { type: 'confirm_sending' }\n  | { type: 'confirm_receipt' }\n  | { type: 'confirm_error' }\n\ninterface State {\n  approvalState: LoadingState\n  confirmState: LoadingState\n}\n\nconst initialState: State = {\n  approvalState: 'idle',\n  confirmState: 'idle',\n}\n\nconst reducer = (state: State, actions: Action): State => {\n  switch (actions.type) {\n    case 'requires_approval':\n      return {\n        ...state,\n        approvalState: 'success',\n      }\n    case 'approve_sending':\n      return {\n        ...state,\n        approvalState: 'loading',\n      }\n    case 'approve_receipt':\n      return {\n        ...state,\n        approvalState: 'success',\n      }\n    case 'approve_error':\n      return {\n        ...state,\n        approvalState: 'fail',\n      }\n    case 'confirm_sending':\n      return {\n        ...state,\n        confirmState: 'loading',\n      }\n    case 'confirm_receipt':\n      return {\n        ...state,\n        confirmState: 'success',\n      }\n    case 'confirm_error':\n      return {\n        ...state,\n        confirmState: 'fail',\n      }\n    default:\n      return state\n  }\n}\n\ninterface ApproveConfirmTransaction {\n  onApprove: () => ethers.providers.TransactionResponse\n  onConfirm: () => ethers.providers.TransactionResponse\n  onRequiresApproval?: () => Promise<boolean>\n  onSuccess: (state: State) => void\n  onApproveSuccess?: (state: State) => void\n}\n\nconst useApproveConfirmTransaction = ({\n  onApprove,\n  onConfirm,\n  onRequiresApproval,\n  onSuccess = noop,\n  onApproveSuccess = noop,\n}: ApproveConfirmTransaction) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const [state, dispatch] = useReducer(reducer, initialState)\n  const handlePreApprove = useRef(onRequiresApproval)\n  const { toastError } = useToast()\n\n  // Check if approval is necessary, re-check if account changes\n  useEffect(() => {\n    if (account && handlePreApprove.current) {\n      handlePreApprove.current().then((result) => {\n        if (result) {\n          dispatch({ type: 'requires_approval' })\n        }\n      })\n    }\n  }, [account, handlePreApprove, dispatch])\n\n  return {\n    isApproving: state.approvalState === 'loading',\n    isApproved: state.approvalState === 'success',\n    isConfirming: state.confirmState === 'loading',\n    isConfirmed: state.confirmState === 'success',\n    handleApprove: async () => {\n      try {\n        const tx = await onApprove()\n        dispatch({ type: 'approve_sending' })\n        const receipt = await tx.wait()\n        if (receipt.status) {\n          dispatch({ type: 'approve_receipt' })\n          onApproveSuccess(state)\n        }\n      } catch (error) {\n        dispatch({ type: 'approve_error' })\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n      }\n    },\n    handleConfirm: async () => {\n      dispatch({ type: 'confirm_sending' })\n      try {\n        const tx = await onConfirm()\n        const receipt = await tx.wait()\n        if (receipt.status) {\n          dispatch({ type: 'confirm_receipt' })\n          onSuccess(state)\n        }\n      } catch (error) {\n        dispatch({ type: 'confirm_error' })\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n      }\n    },\n  }\n}\n\nexport default useApproveConfirmTransaction\n"]},"metadata":{},"sourceType":"module"}