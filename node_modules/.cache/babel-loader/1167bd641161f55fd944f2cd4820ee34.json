{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect } from 'react';\nimport { connectorLocalStorageKey, ConnectorNames } from '@pancakeswap/uikit';\nimport useAuth from 'hooks/useAuth';\n\nconst _binanceChainListener = async () => new Promise(resolve => Object.defineProperty(window, 'BinanceChain', {\n  get() {\n    return this.bsc;\n  },\n\n  set(bsc) {\n    this.bsc = bsc;\n    resolve();\n  }\n\n}));\n\nconst useEagerConnect = () => {\n  _s();\n\n  const {\n    login\n  } = useAuth();\n  useEffect(() => {\n    const connectorId = window.localStorage.getItem(connectorLocalStorageKey);\n\n    if (connectorId) {\n      const isConnectorBinanceChain = connectorId === ConnectorNames.BSC;\n      const isBinanceChainDefined = Reflect.has(window, 'BinanceChain'); // Currently BSC extension doesn't always inject in time.\n      // We must check to see if it exists, and if not, wait for it before proceeding.\n\n      if (isConnectorBinanceChain && !isBinanceChainDefined) {\n        _binanceChainListener().then(() => login(connectorId));\n\n        return;\n      }\n\n      login(connectorId);\n    }\n  }, [login]);\n};\n\n_s(useEagerConnect, \"Wgz/Ryr6BWZJCDTHbflgjoyTd1g=\", false, function () {\n  return [useAuth];\n});\n\nexport default useEagerConnect;","map":{"version":3,"sources":["/Users/thomas/Documents/pancake-frontend/pankcake-frontend/src/hooks/useEagerConnect.ts"],"names":["useEffect","connectorLocalStorageKey","ConnectorNames","useAuth","_binanceChainListener","Promise","resolve","Object","defineProperty","window","get","bsc","set","useEagerConnect","login","connectorId","localStorage","getItem","isConnectorBinanceChain","BSC","isBinanceChainDefined","Reflect","has","then"],"mappings":";;AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,wBAAT,EAAmCC,cAAnC,QAAyD,oBAAzD;AACA,OAAOC,OAAP,MAAoB,eAApB;;AAEA,MAAMC,qBAAqB,GAAG,YAC5B,IAAIC,OAAJ,CAAmBC,OAAD,IAChBC,MAAM,CAACC,cAAP,CAAsBC,MAAtB,EAA8B,cAA9B,EAA8C;AAC5CC,EAAAA,GAAG,GAAG;AACJ,WAAO,KAAKC,GAAZ;AACD,GAH2C;;AAI5CC,EAAAA,GAAG,CAACD,GAAD,EAAM;AACP,SAAKA,GAAL,GAAWA,GAAX;AAEAL,IAAAA,OAAO;AACR;;AAR2C,CAA9C,CADF,CADF;;AAcA,MAAMO,eAAe,GAAG,MAAM;AAAA;;AAC5B,QAAM;AAAEC,IAAAA;AAAF,MAAYX,OAAO,EAAzB;AAEAH,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMe,WAAW,GAAGN,MAAM,CAACO,YAAP,CAAoBC,OAApB,CAA4BhB,wBAA5B,CAApB;;AAEA,QAAIc,WAAJ,EAAiB;AACf,YAAMG,uBAAuB,GAAGH,WAAW,KAAKb,cAAc,CAACiB,GAA/D;AACA,YAAMC,qBAAqB,GAAGC,OAAO,CAACC,GAAR,CAAYb,MAAZ,EAAoB,cAApB,CAA9B,CAFe,CAIf;AACA;;AACA,UAAIS,uBAAuB,IAAI,CAACE,qBAAhC,EAAuD;AACrDhB,QAAAA,qBAAqB,GAAGmB,IAAxB,CAA6B,MAAMT,KAAK,CAACC,WAAD,CAAxC;;AAEA;AACD;;AAEDD,MAAAA,KAAK,CAACC,WAAD,CAAL;AACD;AACF,GAjBQ,EAiBN,CAACD,KAAD,CAjBM,CAAT;AAkBD,CArBD;;GAAMD,e;UACcV,O;;;AAsBpB,eAAeU,eAAf","sourcesContent":["import { useEffect } from 'react'\nimport { connectorLocalStorageKey, ConnectorNames } from '@pancakeswap/uikit'\nimport useAuth from 'hooks/useAuth'\n\nconst _binanceChainListener = async () =>\n  new Promise<void>((resolve) =>\n    Object.defineProperty(window, 'BinanceChain', {\n      get() {\n        return this.bsc\n      },\n      set(bsc) {\n        this.bsc = bsc\n\n        resolve()\n      },\n    }),\n  )\n\nconst useEagerConnect = () => {\n  const { login } = useAuth()\n\n  useEffect(() => {\n    const connectorId = window.localStorage.getItem(connectorLocalStorageKey) as ConnectorNames\n\n    if (connectorId) {\n      const isConnectorBinanceChain = connectorId === ConnectorNames.BSC\n      const isBinanceChainDefined = Reflect.has(window, 'BinanceChain')\n\n      // Currently BSC extension doesn't always inject in time.\n      // We must check to see if it exists, and if not, wait for it before proceeding.\n      if (isConnectorBinanceChain && !isBinanceChainDefined) {\n        _binanceChainListener().then(() => login(connectorId))\n\n        return\n      }\n\n      login(connectorId)\n    }\n  }, [login])\n}\n\nexport default useEagerConnect\n"]},"metadata":{},"sourceType":"module"}