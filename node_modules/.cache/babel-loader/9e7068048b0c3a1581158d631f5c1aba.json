{"ast":null,"code":"var _jsxFileName = \"/Users/thomas/Documents/pancake-frontend/src/views/FarmAuction/components/AuctionLeaderboard/AuctionProgress.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Progress } from '@pancakeswap/uikit';\nimport { differenceInSeconds } from 'date-fns';\nimport { AuctionStatus } from 'config/constants/types';\nimport useRefresh from 'hooks/useRefresh';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AuctionProgress = ({\n  auction\n}) => {\n  _s();\n\n  const [progress, setProgress] = useState(0);\n  const {\n    slowRefresh\n  } = useRefresh(); // Note: opted to base it on date rather than block number to reduce the amount of calls and async handling\n\n  useEffect(() => {\n    if (auction.status === AuctionStatus.ToBeAnnounced || auction.status === AuctionStatus.Pending) {\n      setProgress(0);\n    } else {\n      const now = new Date();\n      const auctionDuration = differenceInSeconds(auction.endDate, auction.startDate);\n      const secondsPassed = differenceInSeconds(now, auction.startDate);\n      const percentagePassed = secondsPassed * 100 / auctionDuration;\n      setProgress(percentagePassed < 100 ? percentagePassed : 100);\n    }\n  }, [slowRefresh, auction]);\n  return /*#__PURE__*/_jsxDEV(Progress, {\n    variant: \"flat\",\n    primaryStep: progress\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 10\n  }, this);\n};\n\n_s(AuctionProgress, \"Z75MA0/Bi2f62lG0BmfPFy5VVV0=\", false, function () {\n  return [useRefresh];\n});\n\n_c = AuctionProgress;\nexport default AuctionProgress;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuctionProgress\");","map":{"version":3,"sources":["/Users/thomas/Documents/pancake-frontend/src/views/FarmAuction/components/AuctionLeaderboard/AuctionProgress.tsx"],"names":["React","useState","useEffect","Progress","differenceInSeconds","AuctionStatus","useRefresh","AuctionProgress","auction","progress","setProgress","slowRefresh","status","ToBeAnnounced","Pending","now","Date","auctionDuration","endDate","startDate","secondsPassed","percentagePassed"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,QAAT,QAAyB,oBAAzB;AACA,SAASC,mBAAT,QAAoC,UAApC;AACA,SAAkBC,aAAlB,QAAuC,wBAAvC;AACA,OAAOC,UAAP,MAAuB,kBAAvB;;;AAEA,MAAMC,eAA+C,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAiB;AAAA;;AACvE,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BT,QAAQ,CAAS,CAAT,CAAxC;AACA,QAAM;AAAEU,IAAAA;AAAF,MAAkBL,UAAU,EAAlC,CAFuE,CAIvE;;AACAJ,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIM,OAAO,CAACI,MAAR,KAAmBP,aAAa,CAACQ,aAAjC,IAAkDL,OAAO,CAACI,MAAR,KAAmBP,aAAa,CAACS,OAAvF,EAAgG;AAC9FJ,MAAAA,WAAW,CAAC,CAAD,CAAX;AACD,KAFD,MAEO;AACL,YAAMK,GAAG,GAAG,IAAIC,IAAJ,EAAZ;AACA,YAAMC,eAAe,GAAGb,mBAAmB,CAACI,OAAO,CAACU,OAAT,EAAkBV,OAAO,CAACW,SAA1B,CAA3C;AACA,YAAMC,aAAa,GAAGhB,mBAAmB,CAACW,GAAD,EAAMP,OAAO,CAACW,SAAd,CAAzC;AACA,YAAME,gBAAgB,GAAID,aAAa,GAAG,GAAjB,GAAwBH,eAAjD;AACAP,MAAAA,WAAW,CAACW,gBAAgB,GAAG,GAAnB,GAAyBA,gBAAzB,GAA4C,GAA7C,CAAX;AACD;AACF,GAVQ,EAUN,CAACV,WAAD,EAAcH,OAAd,CAVM,CAAT;AAYA,sBAAO,QAAC,QAAD;AAAU,IAAA,OAAO,EAAC,MAAlB;AAAyB,IAAA,WAAW,EAAEC;AAAtC;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAlBD;;GAAMF,e;UAEoBD,U;;;KAFpBC,e;AAoBN,eAAeA,eAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { Progress } from '@pancakeswap/uikit'\nimport { differenceInSeconds } from 'date-fns'\nimport { Auction, AuctionStatus } from 'config/constants/types'\nimport useRefresh from 'hooks/useRefresh'\n\nconst AuctionProgress: React.FC<{ auction: Auction }> = ({ auction }) => {\n  const [progress, setProgress] = useState<number>(0)\n  const { slowRefresh } = useRefresh()\n\n  // Note: opted to base it on date rather than block number to reduce the amount of calls and async handling\n  useEffect(() => {\n    if (auction.status === AuctionStatus.ToBeAnnounced || auction.status === AuctionStatus.Pending) {\n      setProgress(0)\n    } else {\n      const now = new Date()\n      const auctionDuration = differenceInSeconds(auction.endDate, auction.startDate)\n      const secondsPassed = differenceInSeconds(now, auction.startDate)\n      const percentagePassed = (secondsPassed * 100) / auctionDuration\n      setProgress(percentagePassed < 100 ? percentagePassed : 100)\n    }\n  }, [slowRefresh, auction])\n\n  return <Progress variant=\"flat\" primaryStep={progress} />\n}\n\nexport default AuctionProgress\n"]},"metadata":{},"sourceType":"module"}