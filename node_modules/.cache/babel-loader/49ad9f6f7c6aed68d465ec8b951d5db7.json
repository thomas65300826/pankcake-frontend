{"ast":null,"code":"var _jsxFileName = \"/Users/thomas/Documents/PycharmProjects/pancake-frontend/src/views/Pools/components/CakeVaultCard/VaultCardActions/index.tsx\",\n    _s = $RefreshSig$();\n\nimport BigNumber from 'bignumber.js';\nimport React from 'react';\nimport styled from 'styled-components';\nimport { Flex, Text, Box } from '@pancakeswap/uikit';\nimport { useTranslation } from 'contexts/Localization';\nimport { BIG_ZERO } from 'utils/bigNumber';\nimport VaultApprovalAction from './VaultApprovalAction';\nimport VaultStakeActions from './VaultStakeActions';\nimport { useCheckVaultApprovalStatus } from '../../../hooks/useApprove';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst InlineText = styled(Text)`\n  display: inline;\n`;\n_c = InlineText;\n\nconst CakeVaultCardActions = ({\n  pool,\n  accountHasSharesStaked,\n  isLoading\n}) => {\n  _s();\n\n  const {\n    stakingToken,\n    userData\n  } = pool;\n  const {\n    t\n  } = useTranslation();\n  const stakingTokenBalance = (userData === null || userData === void 0 ? void 0 : userData.stakingTokenBalance) ? new BigNumber(userData.stakingTokenBalance) : BIG_ZERO;\n  const {\n    isVaultApproved,\n    setLastUpdated\n  } = useCheckVaultApprovalStatus();\n  return /*#__PURE__*/_jsxDEV(Flex, {\n    flexDirection: \"column\",\n    children: /*#__PURE__*/_jsxDEV(Flex, {\n      flexDirection: \"column\",\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        display: \"inline\",\n        children: [/*#__PURE__*/_jsxDEV(InlineText, {\n          color: accountHasSharesStaked ? 'secondary' : 'textSubtle',\n          textTransform: \"uppercase\",\n          bold: true,\n          fontSize: \"12px\",\n          children: [accountHasSharesStaked ? stakingToken.symbol : t('Stake'), ' ']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(InlineText, {\n          color: accountHasSharesStaked ? 'textSubtle' : 'secondary',\n          textTransform: \"uppercase\",\n          bold: true,\n          fontSize: \"12px\",\n          children: accountHasSharesStaked ? t('Staked (compounding)') : `${stakingToken.symbol}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this), isVaultApproved ? /*#__PURE__*/_jsxDEV(VaultStakeActions, {\n        isLoading: isLoading,\n        pool: pool,\n        stakingTokenBalance: stakingTokenBalance,\n        accountHasSharesStaked: accountHasSharesStaked\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(VaultApprovalAction, {\n        isLoading: isLoading,\n        setLastUpdated: setLastUpdated\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CakeVaultCardActions, \"+UkkMNlbFkTywN2y7GAQ152VPHw=\", false, function () {\n  return [useTranslation, useCheckVaultApprovalStatus];\n});\n\n_c2 = CakeVaultCardActions;\nexport default CakeVaultCardActions;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"InlineText\");\n$RefreshReg$(_c2, \"CakeVaultCardActions\");","map":{"version":3,"sources":["/Users/thomas/Documents/PycharmProjects/pancake-frontend/src/views/Pools/components/CakeVaultCard/VaultCardActions/index.tsx"],"names":["BigNumber","React","styled","Flex","Text","Box","useTranslation","BIG_ZERO","VaultApprovalAction","VaultStakeActions","useCheckVaultApprovalStatus","InlineText","CakeVaultCardActions","pool","accountHasSharesStaked","isLoading","stakingToken","userData","t","stakingTokenBalance","isVaultApproved","setLastUpdated","symbol"],"mappings":";;;AAAA,OAAOA,SAAP,MAAsB,cAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,IAAT,EAAeC,IAAf,EAAqBC,GAArB,QAAgC,oBAAhC;AACA,SAASC,cAAT,QAA+B,uBAA/B;AAEA,SAASC,QAAT,QAAyB,iBAAzB;AACA,OAAOC,mBAAP,MAAgC,uBAAhC;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;AACA,SAASC,2BAAT,QAA4C,2BAA5C;;AAEA,MAAMC,UAAU,GAAGT,MAAM,CAACE,IAAD,CAAO;AAChC;AACA,CAFA;KAAMO,U;;AAIN,MAAMC,oBAIJ,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,sBAAR;AAAgCC,EAAAA;AAAhC,CAAD,KAAiD;AAAA;;AACpD,QAAM;AAAEC,IAAAA,YAAF;AAAgBC,IAAAA;AAAhB,MAA6BJ,IAAnC;AACA,QAAM;AAAEK,IAAAA;AAAF,MAAQZ,cAAc,EAA5B;AACA,QAAMa,mBAAmB,GAAG,CAAAF,QAAQ,SAAR,IAAAA,QAAQ,WAAR,YAAAA,QAAQ,CAAEE,mBAAV,IAAgC,IAAInB,SAAJ,CAAciB,QAAQ,CAACE,mBAAvB,CAAhC,GAA8EZ,QAA1G;AAEA,QAAM;AAAEa,IAAAA,eAAF;AAAmBC,IAAAA;AAAnB,MAAsCX,2BAA2B,EAAvE;AAEA,sBACE,QAAC,IAAD;AAAM,IAAA,aAAa,EAAC,QAApB;AAAA,2BACE,QAAC,IAAD;AAAM,MAAA,aAAa,EAAC,QAApB;AAAA,8BACE,QAAC,GAAD;AAAK,QAAA,OAAO,EAAC,QAAb;AAAA,gCACE,QAAC,UAAD;AACE,UAAA,KAAK,EAAEI,sBAAsB,GAAG,WAAH,GAAiB,YADhD;AAEE,UAAA,aAAa,EAAC,WAFhB;AAGE,UAAA,IAAI,MAHN;AAIE,UAAA,QAAQ,EAAC,MAJX;AAAA,qBAMGA,sBAAsB,GAAGE,YAAY,CAACM,MAAhB,GAAyBJ,CAAC,CAAC,OAAD,CANnD,EAM8D,GAN9D;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eASE,QAAC,UAAD;AACE,UAAA,KAAK,EAAEJ,sBAAsB,GAAG,YAAH,GAAkB,WADjD;AAEE,UAAA,aAAa,EAAC,WAFhB;AAGE,UAAA,IAAI,MAHN;AAIE,UAAA,QAAQ,EAAC,MAJX;AAAA,oBAMGA,sBAAsB,GAAGI,CAAC,CAAC,sBAAD,CAAJ,GAAgC,GAAEF,YAAY,CAACM,MAAO;AAN/E;AAAA;AAAA;AAAA;AAAA,gBATF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,EAmBGF,eAAe,gBACd,QAAC,iBAAD;AACE,QAAA,SAAS,EAAEL,SADb;AAEE,QAAA,IAAI,EAAEF,IAFR;AAGE,QAAA,mBAAmB,EAAEM,mBAHvB;AAIE,QAAA,sBAAsB,EAAEL;AAJ1B;AAAA;AAAA;AAAA;AAAA,cADc,gBAQd,QAAC,mBAAD;AAAqB,QAAA,SAAS,EAAEC,SAAhC;AAA2C,QAAA,cAAc,EAAEM;AAA3D;AAAA;AAAA;AAAA;AAAA,cA3BJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAkCD,CA7CD;;GAAMT,oB;UAMUN,c,EAG8BI,2B;;;MATxCE,oB;AA+CN,eAAeA,oBAAf","sourcesContent":["import BigNumber from 'bignumber.js'\nimport React from 'react'\nimport styled from 'styled-components'\nimport { Flex, Text, Box } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { Pool } from 'state/types'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport VaultApprovalAction from './VaultApprovalAction'\nimport VaultStakeActions from './VaultStakeActions'\nimport { useCheckVaultApprovalStatus } from '../../../hooks/useApprove'\n\nconst InlineText = styled(Text)`\n  display: inline;\n`\n\nconst CakeVaultCardActions: React.FC<{\n  pool: Pool\n  accountHasSharesStaked: boolean\n  isLoading: boolean\n}> = ({ pool, accountHasSharesStaked, isLoading }) => {\n  const { stakingToken, userData } = pool\n  const { t } = useTranslation()\n  const stakingTokenBalance = userData?.stakingTokenBalance ? new BigNumber(userData.stakingTokenBalance) : BIG_ZERO\n\n  const { isVaultApproved, setLastUpdated } = useCheckVaultApprovalStatus()\n\n  return (\n    <Flex flexDirection=\"column\">\n      <Flex flexDirection=\"column\">\n        <Box display=\"inline\">\n          <InlineText\n            color={accountHasSharesStaked ? 'secondary' : 'textSubtle'}\n            textTransform=\"uppercase\"\n            bold\n            fontSize=\"12px\"\n          >\n            {accountHasSharesStaked ? stakingToken.symbol : t('Stake')}{' '}\n          </InlineText>\n          <InlineText\n            color={accountHasSharesStaked ? 'textSubtle' : 'secondary'}\n            textTransform=\"uppercase\"\n            bold\n            fontSize=\"12px\"\n          >\n            {accountHasSharesStaked ? t('Staked (compounding)') : `${stakingToken.symbol}`}\n          </InlineText>\n        </Box>\n        {isVaultApproved ? (\n          <VaultStakeActions\n            isLoading={isLoading}\n            pool={pool}\n            stakingTokenBalance={stakingTokenBalance}\n            accountHasSharesStaked={accountHasSharesStaked}\n          />\n        ) : (\n          <VaultApprovalAction isLoading={isLoading} setLastUpdated={setLastUpdated} />\n        )}\n      </Flex>\n    </Flex>\n  )\n}\n\nexport default CakeVaultCardActions\n"]},"metadata":{},"sourceType":"module"}