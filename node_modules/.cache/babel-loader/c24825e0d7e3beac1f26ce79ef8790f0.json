{"ast":null,"code":"var _jsxFileName = \"/Users/thomas/Documents/pancake-frontend/pankcake-frontend/src/views/Profile/components/AchievementRow/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { AutoRenewIcon, Button, Flex } from '@pancakeswap/uikit';\nimport useToast from 'hooks/useToast';\nimport { useTranslation } from 'contexts/Localization';\nimport { usePointCenterIfoContract } from 'hooks/useContract';\nimport ActionColumn from '../ActionColumn';\nimport PointsLabel from './PointsLabel';\nimport AchievementTitle from '../AchievementTitle';\nimport AchievementAvatar from '../AchievementAvatar';\nimport AchievementDescription from '../AchievementDescription';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StyledAchievementRow = styled(Flex)`\n  border-bottom: 1px solid ${({\n  theme\n}) => theme.colors.cardBorder};\n  padding-bottom: 16px;\n  padding-top: 16px;\n`;\n_c = StyledAchievementRow;\nconst Details = styled.div`\n  flex: 1;\n`;\n_c2 = Details;\nconst Body = styled(Flex)`\n  flex-direction: column;\n  flex: 1;\n  margin-left: 8px;\n\n  ${({\n  theme\n}) => theme.mediaQueries.md} {\n    align-items: center;\n    flex-direction: row;\n  }\n`;\n_c3 = Body;\n\nconst AchievementRow = ({\n  achievement,\n  onCollectSuccess\n}) => {\n  _s();\n\n  const [isCollecting, setIsCollecting] = useState(false);\n  const {\n    t\n  } = useTranslation();\n  const pointCenterContract = usePointCenterIfoContract();\n  const {\n    toastError,\n    toastSuccess\n  } = useToast();\n\n  const handleCollectPoints = async () => {\n    const tx = await pointCenterContract.getPoints(achievement.address);\n    setIsCollecting(true);\n    const receipt = await tx.wait();\n\n    if (receipt.status) {\n      setIsCollecting(false);\n      onCollectSuccess(achievement);\n      toastSuccess(t('Points Collected!'));\n    } else {\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'));\n      setIsCollecting(false);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(StyledAchievementRow, {\n    children: [/*#__PURE__*/_jsxDEV(AchievementAvatar, {\n      badge: achievement.badge\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Body, {\n      children: [/*#__PURE__*/_jsxDEV(Details, {\n        children: [/*#__PURE__*/_jsxDEV(AchievementTitle, {\n          title: achievement.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(AchievementDescription, {\n          description: achievement.description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(PointsLabel, {\n        points: achievement.points,\n        px: [0, null, null, '32px'],\n        mb: ['16px', null, null, 0]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ActionColumn, {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleCollectPoints,\n          isLoading: isCollecting,\n          endIcon: isCollecting ? /*#__PURE__*/_jsxDEV(AutoRenewIcon, {\n            spin: true,\n            color: \"currentColor\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 37\n          }, this) : null,\n          disabled: isCollecting,\n          variant: \"secondary\",\n          children: t('Collect')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AchievementRow, \"iOpxoYkkyZ9rvq1ax3+pW20gWB8=\", false, function () {\n  return [useTranslation, usePointCenterIfoContract, useToast];\n});\n\n_c4 = AchievementRow;\nexport default AchievementRow;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"StyledAchievementRow\");\n$RefreshReg$(_c2, \"Details\");\n$RefreshReg$(_c3, \"Body\");\n$RefreshReg$(_c4, \"AchievementRow\");","map":{"version":3,"sources":["/Users/thomas/Documents/pancake-frontend/pankcake-frontend/src/views/Profile/components/AchievementRow/index.tsx"],"names":["React","useState","styled","AutoRenewIcon","Button","Flex","useToast","useTranslation","usePointCenterIfoContract","ActionColumn","PointsLabel","AchievementTitle","AchievementAvatar","AchievementDescription","StyledAchievementRow","theme","colors","cardBorder","Details","div","Body","mediaQueries","md","AchievementRow","achievement","onCollectSuccess","isCollecting","setIsCollecting","t","pointCenterContract","toastError","toastSuccess","handleCollectPoints","tx","getPoints","address","receipt","wait","status","badge","title","description","points"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { AutoRenewIcon, Button, Flex } from '@pancakeswap/uikit'\nimport { Achievement } from 'state/types'\nimport useToast from 'hooks/useToast'\nimport { useTranslation } from 'contexts/Localization'\nimport { usePointCenterIfoContract } from 'hooks/useContract'\nimport ActionColumn from '../ActionColumn'\nimport PointsLabel from './PointsLabel'\nimport AchievementTitle from '../AchievementTitle'\nimport AchievementAvatar from '../AchievementAvatar'\nimport AchievementDescription from '../AchievementDescription'\n\ninterface AchievementRowProps {\n  achievement: Achievement\n  onCollectSuccess?: (achievement: Achievement) => void\n}\n\nconst StyledAchievementRow = styled(Flex)`\n  border-bottom: 1px solid ${({ theme }) => theme.colors.cardBorder};\n  padding-bottom: 16px;\n  padding-top: 16px;\n`\n\nconst Details = styled.div`\n  flex: 1;\n`\n\nconst Body = styled(Flex)`\n  flex-direction: column;\n  flex: 1;\n  margin-left: 8px;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    align-items: center;\n    flex-direction: row;\n  }\n`\n\nconst AchievementRow: React.FC<AchievementRowProps> = ({ achievement, onCollectSuccess }) => {\n  const [isCollecting, setIsCollecting] = useState(false)\n  const { t } = useTranslation()\n  const pointCenterContract = usePointCenterIfoContract()\n  const { toastError, toastSuccess } = useToast()\n\n  const handleCollectPoints = async () => {\n    const tx = await pointCenterContract.getPoints(achievement.address)\n    setIsCollecting(true)\n    const receipt = await tx.wait()\n    if (receipt.status) {\n      setIsCollecting(false)\n      onCollectSuccess(achievement)\n      toastSuccess(t('Points Collected!'))\n    } else {\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n      setIsCollecting(false)\n    }\n  }\n\n  return (\n    <StyledAchievementRow>\n      <AchievementAvatar badge={achievement.badge} />\n      <Body>\n        <Details>\n          <AchievementTitle title={achievement.title} />\n          <AchievementDescription description={achievement.description} />\n        </Details>\n        <PointsLabel points={achievement.points} px={[0, null, null, '32px']} mb={['16px', null, null, 0]} />\n        <ActionColumn>\n          <Button\n            onClick={handleCollectPoints}\n            isLoading={isCollecting}\n            endIcon={isCollecting ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n            disabled={isCollecting}\n            variant=\"secondary\"\n          >\n            {t('Collect')}\n          </Button>\n        </ActionColumn>\n      </Body>\n    </StyledAchievementRow>\n  )\n}\n\nexport default AchievementRow\n"]},"metadata":{},"sourceType":"module"}