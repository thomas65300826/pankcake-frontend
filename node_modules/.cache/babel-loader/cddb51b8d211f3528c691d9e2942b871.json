{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { nanoid } from '@reduxjs/toolkit';\nimport { ChainId } from '@pancakeswap/sdk';\nimport { useCallback } from 'react';\nimport { useDispatch } from 'react-redux';\nimport useActiveWeb3React from 'hooks/useActiveWeb3React';\nimport { fetchTokenList } from '../state/lists/actions';\nimport getTokenList from '../utils/getTokenList';\nimport resolveENSContentHash from '../utils/ENS/resolveENSContentHash';\nimport useWeb3Provider from './useActiveWeb3React';\n\nfunction useFetchListCallback() {\n  _s();\n\n  const {\n    library\n  } = useWeb3Provider();\n  const {\n    chainId\n  } = useActiveWeb3React();\n  const dispatch = useDispatch();\n  const ensResolver = useCallback(ensName => {\n    if (chainId !== ChainId.MAINNET) {\n      throw new Error('Could not construct mainnet ENS resolver');\n    }\n\n    return resolveENSContentHash(ensName, library);\n  }, [chainId, library]); // note: prevent dispatch if using for list search or unsupported list\n\n  return useCallback(async (listUrl, sendDispatch = true) => {\n    const requestId = nanoid();\n\n    if (sendDispatch) {\n      dispatch(fetchTokenList.pending({\n        requestId,\n        url: listUrl\n      }));\n    }\n\n    return getTokenList(listUrl, ensResolver).then(tokenList => {\n      if (sendDispatch) {\n        dispatch(fetchTokenList.fulfilled({\n          url: listUrl,\n          tokenList,\n          requestId\n        }));\n      }\n\n      return tokenList;\n    }).catch(error => {\n      console.error(`Failed to get list at url ${listUrl}`, error);\n\n      if (sendDispatch) {\n        dispatch(fetchTokenList.rejected({\n          url: listUrl,\n          requestId,\n          errorMessage: error.message\n        }));\n      }\n\n      throw error;\n    });\n  }, [dispatch, ensResolver]);\n}\n\n_s(useFetchListCallback, \"MrmpIBWI+pMz5zTCa2hLIawnO5g=\", false, function () {\n  return [useWeb3Provider, useActiveWeb3React, useDispatch];\n});\n\nexport default useFetchListCallback;","map":{"version":3,"sources":["/Users/thomas/Documents/pancake-frontend/src/hooks/useFetchListCallback.ts"],"names":["nanoid","ChainId","useCallback","useDispatch","useActiveWeb3React","fetchTokenList","getTokenList","resolveENSContentHash","useWeb3Provider","useFetchListCallback","library","chainId","dispatch","ensResolver","ensName","MAINNET","Error","listUrl","sendDispatch","requestId","pending","url","then","tokenList","fulfilled","catch","error","console","rejected","errorMessage","message"],"mappings":";;AAAA,SAASA,MAAT,QAAuB,kBAAvB;AACA,SAASC,OAAT,QAAwB,kBAAxB;AAEA,SAASC,WAAT,QAA4B,OAA5B;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,OAAOC,kBAAP,MAA+B,0BAA/B;AAEA,SAASC,cAAT,QAA+B,wBAA/B;AACA,OAAOC,YAAP,MAAyB,uBAAzB;AACA,OAAOC,qBAAP,MAAkC,oCAAlC;AACA,OAAOC,eAAP,MAA4B,sBAA5B;;AAEA,SAASC,oBAAT,GAAiG;AAAA;;AAC/F,QAAM;AAAEC,IAAAA;AAAF,MAAcF,eAAe,EAAnC;AACA,QAAM;AAAEG,IAAAA;AAAF,MAAcP,kBAAkB,EAAtC;AACA,QAAMQ,QAAQ,GAAGT,WAAW,EAA5B;AAEA,QAAMU,WAAW,GAAGX,WAAW,CAC5BY,OAAD,IAAqB;AACnB,QAAIH,OAAO,KAAKV,OAAO,CAACc,OAAxB,EAAiC;AAC/B,YAAM,IAAIC,KAAJ,CAAU,0CAAV,CAAN;AACD;;AACD,WAAOT,qBAAqB,CAACO,OAAD,EAAUJ,OAAV,CAA5B;AACD,GAN4B,EAO7B,CAACC,OAAD,EAAUD,OAAV,CAP6B,CAA/B,CAL+F,CAe/F;;AACA,SAAOR,WAAW,CAChB,OAAOe,OAAP,EAAwBC,YAAY,GAAG,IAAvC,KAAgD;AAC9C,UAAMC,SAAS,GAAGnB,MAAM,EAAxB;;AACA,QAAIkB,YAAJ,EAAkB;AAChBN,MAAAA,QAAQ,CAACP,cAAc,CAACe,OAAf,CAAuB;AAAED,QAAAA,SAAF;AAAaE,QAAAA,GAAG,EAAEJ;AAAlB,OAAvB,CAAD,CAAR;AACD;;AACD,WAAOX,YAAY,CAACW,OAAD,EAAUJ,WAAV,CAAZ,CACJS,IADI,CACEC,SAAD,IAAe;AACnB,UAAIL,YAAJ,EAAkB;AAChBN,QAAAA,QAAQ,CAACP,cAAc,CAACmB,SAAf,CAAyB;AAAEH,UAAAA,GAAG,EAAEJ,OAAP;AAAgBM,UAAAA,SAAhB;AAA2BJ,UAAAA;AAA3B,SAAzB,CAAD,CAAR;AACD;;AACD,aAAOI,SAAP;AACD,KANI,EAOJE,KAPI,CAOGC,KAAD,IAAW;AAChBC,MAAAA,OAAO,CAACD,KAAR,CAAe,6BAA4BT,OAAQ,EAAnD,EAAsDS,KAAtD;;AACA,UAAIR,YAAJ,EAAkB;AAChBN,QAAAA,QAAQ,CAACP,cAAc,CAACuB,QAAf,CAAwB;AAAEP,UAAAA,GAAG,EAAEJ,OAAP;AAAgBE,UAAAA,SAAhB;AAA2BU,UAAAA,YAAY,EAAEH,KAAK,CAACI;AAA/C,SAAxB,CAAD,CAAR;AACD;;AACD,YAAMJ,KAAN;AACD,KAbI,CAAP;AAcD,GApBe,EAqBhB,CAACd,QAAD,EAAWC,WAAX,CArBgB,CAAlB;AAuBD;;GAvCQJ,oB;UACaD,e,EACAJ,kB,EACHD,W;;;AAsCnB,eAAeM,oBAAf","sourcesContent":["import { nanoid } from '@reduxjs/toolkit'\nimport { ChainId } from '@pancakeswap/sdk'\nimport { TokenList } from '@uniswap/token-lists'\nimport { useCallback } from 'react'\nimport { useDispatch } from 'react-redux'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { AppDispatch } from '../state'\nimport { fetchTokenList } from '../state/lists/actions'\nimport getTokenList from '../utils/getTokenList'\nimport resolveENSContentHash from '../utils/ENS/resolveENSContentHash'\nimport useWeb3Provider from './useActiveWeb3React'\n\nfunction useFetchListCallback(): (listUrl: string, sendDispatch?: boolean) => Promise<TokenList> {\n  const { library } = useWeb3Provider()\n  const { chainId } = useActiveWeb3React()\n  const dispatch = useDispatch<AppDispatch>()\n\n  const ensResolver = useCallback(\n    (ensName: string) => {\n      if (chainId !== ChainId.MAINNET) {\n        throw new Error('Could not construct mainnet ENS resolver')\n      }\n      return resolveENSContentHash(ensName, library)\n    },\n    [chainId, library],\n  )\n\n  // note: prevent dispatch if using for list search or unsupported list\n  return useCallback(\n    async (listUrl: string, sendDispatch = true) => {\n      const requestId = nanoid()\n      if (sendDispatch) {\n        dispatch(fetchTokenList.pending({ requestId, url: listUrl }))\n      }\n      return getTokenList(listUrl, ensResolver)\n        .then((tokenList) => {\n          if (sendDispatch) {\n            dispatch(fetchTokenList.fulfilled({ url: listUrl, tokenList, requestId }))\n          }\n          return tokenList\n        })\n        .catch((error) => {\n          console.error(`Failed to get list at url ${listUrl}`, error)\n          if (sendDispatch) {\n            dispatch(fetchTokenList.rejected({ url: listUrl, requestId, errorMessage: error.message }))\n          }\n          throw error\n        })\n    },\n    [dispatch, ensResolver],\n  )\n}\n\nexport default useFetchListCallback\n"]},"metadata":{},"sourceType":"module"}