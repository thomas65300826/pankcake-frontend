{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport isEqual from 'lodash/isEqual';\nimport { useFarmAuctionContract } from 'hooks/useContract';\nimport { getBidderInfo } from 'config/constants/farmAuctions';\nimport useLastUpdated from 'hooks/useLastUpdated';\nimport useRefresh from 'hooks/useRefresh';\nimport { AUCTION_BIDDERS_TO_FETCH } from 'config';\nimport { BIG_ZERO } from 'utils/bigNumber';\nimport { sortAuctionBidders, processAuctionData } from '../helpers';\nexport const useCurrentFarmAuction = account => {\n  _s();\n\n  const [currentAuction, setCurrentAuction] = useState(null);\n  const [bidders, setBidders] = useState(null);\n  const [conncetedBidder, setConncetedBidder] = useState(null); // Used to force-refresh bidders after successful bid\n\n  const {\n    lastUpdated,\n    setLastUpdated\n  } = useLastUpdated();\n  const {\n    fastRefresh\n  } = useRefresh();\n  const farmAuctionContract = useFarmAuctionContract(); // Get latest auction id and its data\n\n  useEffect(() => {\n    const fetchCurrentAuction = async () => {\n      try {\n        const auctionId = await farmAuctionContract.currentAuctionId();\n        const auctionData = await farmAuctionContract.auctions(auctionId);\n        const processedAuctionData = await processAuctionData(auctionId.toNumber(), auctionData);\n        setCurrentAuction(processedAuctionData);\n      } catch (error) {\n        console.error('Failed to fetch current auction', error);\n      }\n    };\n\n    fetchCurrentAuction();\n  }, [farmAuctionContract, fastRefresh]); // Fetch bidders for current auction\n\n  useEffect(() => {\n    const fetchBidders = async () => {\n      try {\n        const [currentAuctionBidders] = await farmAuctionContract.viewBidsPerAuction(currentAuction.id, 0, AUCTION_BIDDERS_TO_FETCH);\n        const sortedBidders = sortAuctionBidders(currentAuctionBidders, currentAuction);\n        setBidders(sortedBidders);\n      } catch (error) {\n        console.error('Failed to fetch bidders', error);\n      }\n    };\n\n    if (currentAuction) {\n      fetchBidders();\n    }\n  }, [currentAuction, farmAuctionContract, lastUpdated, fastRefresh]); // Check if connected wallet is whitelisted\n\n  useEffect(() => {\n    const checkAccount = async () => {\n      try {\n        const whitelistedStatus = await farmAuctionContract.whitelisted(account);\n        setConncetedBidder({\n          account,\n          isWhitelisted: whitelistedStatus\n        });\n      } catch (error) {\n        console.error('Failed to check if account is whitelisted', error);\n      }\n    };\n\n    if (account && (!conncetedBidder || conncetedBidder.account !== account)) {\n      checkAccount();\n    } // Refresh UI if user logs out\n\n\n    if (!account) {\n      setConncetedBidder(null);\n    }\n  }, [account, conncetedBidder, farmAuctionContract]); // Attach bidder data to conncetedBidder object\n\n  useEffect(() => {\n    const getBidderData = () => {\n      if (bidders && bidders.length > 0) {\n        const bidderData = bidders.find(bidder => bidder.account === account);\n\n        if (bidderData) {\n          return bidderData;\n        }\n      }\n\n      const bidderInfo = getBidderInfo(account);\n      const defaultBidderData = {\n        position: null,\n        samePositionAsAbove: false,\n        isTopPosition: false,\n        amount: BIG_ZERO,\n        ...bidderInfo\n      };\n      return defaultBidderData;\n    };\n\n    if (conncetedBidder && conncetedBidder.isWhitelisted) {\n      const bidderData = getBidderData();\n\n      if (!isEqual(bidderData, conncetedBidder.bidderData)) {\n        setConncetedBidder({\n          account,\n          isWhitelisted: true,\n          bidderData\n        });\n      }\n    }\n  }, [account, conncetedBidder, bidders]);\n  return {\n    currentAuction,\n    bidders,\n    conncetedBidder,\n    refreshBidders: setLastUpdated\n  };\n};\n\n_s(useCurrentFarmAuction, \"KEv6Ne+YnL+JrgNbDrTGP1vzndM=\", false, function () {\n  return [useLastUpdated, useRefresh, useFarmAuctionContract];\n});","map":{"version":3,"sources":["/Users/thomas/Documents/PycharmProjects/pancake-frontend/src/views/FarmAuction/hooks/useCurrentFarmAuction.ts"],"names":["useState","useEffect","isEqual","useFarmAuctionContract","getBidderInfo","useLastUpdated","useRefresh","AUCTION_BIDDERS_TO_FETCH","BIG_ZERO","sortAuctionBidders","processAuctionData","useCurrentFarmAuction","account","currentAuction","setCurrentAuction","bidders","setBidders","conncetedBidder","setConncetedBidder","lastUpdated","setLastUpdated","fastRefresh","farmAuctionContract","fetchCurrentAuction","auctionId","currentAuctionId","auctionData","auctions","processedAuctionData","toNumber","error","console","fetchBidders","currentAuctionBidders","viewBidsPerAuction","id","sortedBidders","checkAccount","whitelistedStatus","whitelisted","isWhitelisted","getBidderData","length","bidderData","find","bidder","bidderInfo","defaultBidderData","position","samePositionAsAbove","isTopPosition","amount","refreshBidders"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react'\nimport isEqual from 'lodash/isEqual'\nimport { useFarmAuctionContract } from 'hooks/useContract'\nimport { Auction, ConnectedBidder, Bidder } from 'config/constants/types'\nimport { getBidderInfo } from 'config/constants/farmAuctions'\nimport useLastUpdated from 'hooks/useLastUpdated'\nimport useRefresh from 'hooks/useRefresh'\nimport { AUCTION_BIDDERS_TO_FETCH } from 'config'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { sortAuctionBidders, processAuctionData } from '../helpers'\n\nexport const useCurrentFarmAuction = (account: string) => {\n  const [currentAuction, setCurrentAuction] = useState<Auction | null>(null)\n  const [bidders, setBidders] = useState<Bidder[] | null>(null)\n  const [conncetedBidder, setConncetedBidder] = useState<ConnectedBidder | null>(null)\n  // Used to force-refresh bidders after successful bid\n  const { lastUpdated, setLastUpdated } = useLastUpdated()\n\n  const { fastRefresh } = useRefresh()\n\n  const farmAuctionContract = useFarmAuctionContract()\n\n  // Get latest auction id and its data\n  useEffect(() => {\n    const fetchCurrentAuction = async () => {\n      try {\n        const auctionId = await farmAuctionContract.currentAuctionId()\n        const auctionData = await farmAuctionContract.auctions(auctionId)\n        const processedAuctionData = await processAuctionData(auctionId.toNumber(), auctionData)\n        setCurrentAuction(processedAuctionData)\n      } catch (error) {\n        console.error('Failed to fetch current auction', error)\n      }\n    }\n    fetchCurrentAuction()\n  }, [farmAuctionContract, fastRefresh])\n\n  // Fetch bidders for current auction\n  useEffect(() => {\n    const fetchBidders = async () => {\n      try {\n        const [currentAuctionBidders] = await farmAuctionContract.viewBidsPerAuction(\n          currentAuction.id,\n          0,\n          AUCTION_BIDDERS_TO_FETCH,\n        )\n        const sortedBidders = sortAuctionBidders(currentAuctionBidders, currentAuction)\n        setBidders(sortedBidders)\n      } catch (error) {\n        console.error('Failed to fetch bidders', error)\n      }\n    }\n    if (currentAuction) {\n      fetchBidders()\n    }\n  }, [currentAuction, farmAuctionContract, lastUpdated, fastRefresh])\n\n  // Check if connected wallet is whitelisted\n  useEffect(() => {\n    const checkAccount = async () => {\n      try {\n        const whitelistedStatus = await farmAuctionContract.whitelisted(account)\n        setConncetedBidder({\n          account,\n          isWhitelisted: whitelistedStatus,\n        })\n      } catch (error) {\n        console.error('Failed to check if account is whitelisted', error)\n      }\n    }\n    if (account && (!conncetedBidder || conncetedBidder.account !== account)) {\n      checkAccount()\n    }\n    // Refresh UI if user logs out\n    if (!account) {\n      setConncetedBidder(null)\n    }\n  }, [account, conncetedBidder, farmAuctionContract])\n\n  // Attach bidder data to conncetedBidder object\n  useEffect(() => {\n    const getBidderData = () => {\n      if (bidders && bidders.length > 0) {\n        const bidderData = bidders.find((bidder) => bidder.account === account)\n        if (bidderData) {\n          return bidderData\n        }\n      }\n      const bidderInfo = getBidderInfo(account)\n      const defaultBidderData = {\n        position: null,\n        samePositionAsAbove: false,\n        isTopPosition: false,\n        amount: BIG_ZERO,\n        ...bidderInfo,\n      }\n      return defaultBidderData\n    }\n    if (conncetedBidder && conncetedBidder.isWhitelisted) {\n      const bidderData = getBidderData()\n      if (!isEqual(bidderData, conncetedBidder.bidderData)) {\n        setConncetedBidder({\n          account,\n          isWhitelisted: true,\n          bidderData,\n        })\n      }\n    }\n  }, [account, conncetedBidder, bidders])\n\n  return {\n    currentAuction,\n    bidders,\n    conncetedBidder,\n    refreshBidders: setLastUpdated,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}