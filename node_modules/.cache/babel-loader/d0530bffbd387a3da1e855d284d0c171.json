{"ast":null,"code":"var _jsxFileName = \"/Users/thomas/Documents/PycharmProjects/pancake-frontend/src/views/Predictions/components/History/HistoricalBet.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Box, ChevronDownIcon, ChevronUpIcon, Flex, IconButton, PlayCircleOutlineIcon, Text, WaitIcon } from '@pancakeswap/uikit';\nimport { useWeb3React } from '@web3-react/core';\nimport styled from 'styled-components';\nimport { useAppDispatch } from 'state';\nimport { PredictionStatus } from 'state/types';\nimport { useGetCurrentEpoch, useGetPredictionsStatus, useGetRewardRate } from 'state/predictions/hooks';\nimport { fetchLedgerData, markBetHistoryAsCollected } from 'state/predictions';\nimport { getRoundResult, Result } from 'state/predictions/helpers';\nimport { useTranslation } from 'contexts/Localization';\nimport { formatBnb, getNetPayout } from './helpers';\nimport CollectWinningsButton from '../CollectWinningsButton';\nimport ReclaimPositionButton from '../ReclaimPositionButton';\nimport BetDetails from './BetDetails';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst StyledBet = styled(Flex).attrs({\n  alignItems: 'center',\n  p: '16px'\n})`\n  background-color: ${({\n  theme\n}) => theme.card.background};\n  border-bottom: 2px solid ${({\n  theme\n}) => theme.colors.cardBorder};\n  cursor: pointer;\n`;\n_c = StyledBet;\nconst YourResult = styled(Box)`\n  flex: 1;\n`;\n_c2 = YourResult;\n\nconst HistoricalBet = ({\n  bet\n}) => {\n  _s();\n\n  const [isOpen, setIsOpen] = useState(false);\n  const {\n    amount,\n    round\n  } = bet;\n  const {\n    t\n  } = useTranslation();\n  const currentEpoch = useGetCurrentEpoch();\n  const status = useGetPredictionsStatus();\n  const rewardRate = useGetRewardRate();\n  const dispatch = useAppDispatch();\n  const {\n    account\n  } = useWeb3React();\n\n  const toggleOpen = () => setIsOpen(!isOpen);\n\n  const getRoundColor = result => {\n    switch (result) {\n      case Result.WIN:\n        return 'success';\n\n      case Result.LOSE:\n        return 'failure';\n\n      case Result.CANCELED:\n        return 'textDisabled';\n\n      default:\n        return 'text';\n    }\n  };\n\n  const getRoundPrefix = result => {\n    if (result === Result.LOSE) {\n      return '-';\n    }\n\n    if (result === Result.WIN) {\n      return '+';\n    }\n\n    return '';\n  };\n\n  const roundResult = getRoundResult(bet, currentEpoch);\n  const resultTextColor = getRoundColor(roundResult);\n  const resultTextPrefix = getRoundPrefix(roundResult);\n  const isOpenRound = round.epoch === currentEpoch;\n  const isLiveRound = status === PredictionStatus.LIVE && round.epoch === currentEpoch - 1;\n  const canClaim = !bet.claimed && bet.position === bet.round.position; // Winners get the payout, otherwise the claim what they put it if it was canceled\n\n  const payout = roundResult === Result.WIN ? getNetPayout(bet, rewardRate) : amount;\n\n  const renderBetLabel = () => {\n    if (isOpenRound) {\n      return /*#__PURE__*/_jsxDEV(Flex, {\n        alignItems: \"center\",\n        children: [/*#__PURE__*/_jsxDEV(WaitIcon, {\n          color: \"primary\",\n          mr: \"6px\",\n          width: \"24px\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Text, {\n          color: \"primary\",\n          bold: true,\n          children: t('Starting Soon')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this);\n    }\n\n    if (isLiveRound) {\n      return /*#__PURE__*/_jsxDEV(Flex, {\n        alignItems: \"center\",\n        children: [/*#__PURE__*/_jsxDEV(PlayCircleOutlineIcon, {\n          color: \"secondary\",\n          mr: \"6px\",\n          width: \"24px\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Text, {\n          color: \"secondary\",\n          bold: true,\n          children: t('Live Now')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        fontSize: \"12px\",\n        color: \"textSubtle\",\n        children: t('Your Result')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Text, {\n        bold: true,\n        color: resultTextColor,\n        lineHeight: 1,\n        children: roundResult === Result.CANCELED ? t('Canceled') : `${resultTextPrefix}${formatBnb(payout)}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  };\n\n  const handleSuccess = async () => {\n    // We have to mark the bet as claimed immediately because it does not update fast enough\n    dispatch(markBetHistoryAsCollected({\n      account,\n      betId: bet.id\n    }));\n    dispatch(fetchLedgerData({\n      account,\n      epochs: [bet.round.epoch]\n    }));\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(StyledBet, {\n      onClick: toggleOpen,\n      role: \"button\",\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        width: \"48px\",\n        children: /*#__PURE__*/_jsxDEV(Text, {\n          textAlign: \"center\",\n          children: [/*#__PURE__*/_jsxDEV(Text, {\n            fontSize: \"12px\",\n            color: \"textSubtle\",\n            children: t('Round')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Text, {\n            bold: true,\n            lineHeight: 1,\n            children: round.epoch.toLocaleString()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(YourResult, {\n        px: \"24px\",\n        children: renderBetLabel()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this), roundResult === Result.WIN && canClaim && /*#__PURE__*/_jsxDEV(CollectWinningsButton, {\n        hasClaimed: !canClaim,\n        epoch: bet.round.epoch,\n        payout: formatBnb(payout),\n        onSuccess: handleSuccess,\n        betAmount: bet.amount.toString(),\n        scale: \"sm\",\n        mr: \"8px\",\n        children: t('Collect')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 11\n      }, this), roundResult === Result.CANCELED && canClaim && /*#__PURE__*/_jsxDEV(ReclaimPositionButton, {\n        epoch: bet.round.epoch,\n        scale: \"sm\",\n        mr: \"8px\",\n        children: t('Reclaim')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 11\n      }, this), !isOpenRound && !isLiveRound && /*#__PURE__*/_jsxDEV(IconButton, {\n        variant: \"text\",\n        scale: \"sm\",\n        children: isOpen ? /*#__PURE__*/_jsxDEV(ChevronUpIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 23\n        }, this) : /*#__PURE__*/_jsxDEV(ChevronDownIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 43\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this), isOpen && /*#__PURE__*/_jsxDEV(BetDetails, {\n      bet: bet,\n      result: getRoundResult(bet, currentEpoch)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 18\n    }, this)]\n  }, void 0, true);\n};\n\n_s(HistoricalBet, \"Jbr88UxhwKqcKDNT7g3FPdXbPvQ=\", false, function () {\n  return [useTranslation, useGetCurrentEpoch, useGetPredictionsStatus, useGetRewardRate, useAppDispatch, useWeb3React];\n});\n\n_c3 = HistoricalBet;\nexport default HistoricalBet;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"StyledBet\");\n$RefreshReg$(_c2, \"YourResult\");\n$RefreshReg$(_c3, \"HistoricalBet\");","map":{"version":3,"sources":["/Users/thomas/Documents/PycharmProjects/pancake-frontend/src/views/Predictions/components/History/HistoricalBet.tsx"],"names":["React","useState","Box","ChevronDownIcon","ChevronUpIcon","Flex","IconButton","PlayCircleOutlineIcon","Text","WaitIcon","useWeb3React","styled","useAppDispatch","PredictionStatus","useGetCurrentEpoch","useGetPredictionsStatus","useGetRewardRate","fetchLedgerData","markBetHistoryAsCollected","getRoundResult","Result","useTranslation","formatBnb","getNetPayout","CollectWinningsButton","ReclaimPositionButton","BetDetails","StyledBet","attrs","alignItems","p","theme","card","background","colors","cardBorder","YourResult","HistoricalBet","bet","isOpen","setIsOpen","amount","round","t","currentEpoch","status","rewardRate","dispatch","account","toggleOpen","getRoundColor","result","WIN","LOSE","CANCELED","getRoundPrefix","roundResult","resultTextColor","resultTextPrefix","isOpenRound","epoch","isLiveRound","LIVE","canClaim","claimed","position","payout","renderBetLabel","handleSuccess","betId","id","epochs","toLocaleString","toString"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport {\n  Box,\n  ChevronDownIcon,\n  ChevronUpIcon,\n  Flex,\n  IconButton,\n  PlayCircleOutlineIcon,\n  Text,\n  WaitIcon,\n} from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport styled from 'styled-components'\nimport { useAppDispatch } from 'state'\nimport { Bet, PredictionStatus } from 'state/types'\nimport { useGetCurrentEpoch, useGetPredictionsStatus, useGetRewardRate } from 'state/predictions/hooks'\nimport { fetchLedgerData, markBetHistoryAsCollected } from 'state/predictions'\nimport { getRoundResult, Result } from 'state/predictions/helpers'\nimport { useTranslation } from 'contexts/Localization'\nimport { formatBnb, getNetPayout } from './helpers'\nimport CollectWinningsButton from '../CollectWinningsButton'\nimport ReclaimPositionButton from '../ReclaimPositionButton'\nimport BetDetails from './BetDetails'\n\ninterface BetProps {\n  bet: Bet\n}\n\nconst StyledBet = styled(Flex).attrs({ alignItems: 'center', p: '16px' })`\n  background-color: ${({ theme }) => theme.card.background};\n  border-bottom: 2px solid ${({ theme }) => theme.colors.cardBorder};\n  cursor: pointer;\n`\n\nconst YourResult = styled(Box)`\n  flex: 1;\n`\n\nconst HistoricalBet: React.FC<BetProps> = ({ bet }) => {\n  const [isOpen, setIsOpen] = useState(false)\n  const { amount, round } = bet\n\n  const { t } = useTranslation()\n  const currentEpoch = useGetCurrentEpoch()\n  const status = useGetPredictionsStatus()\n  const rewardRate = useGetRewardRate()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n\n  const toggleOpen = () => setIsOpen(!isOpen)\n\n  const getRoundColor = (result) => {\n    switch (result) {\n      case Result.WIN:\n        return 'success'\n      case Result.LOSE:\n        return 'failure'\n      case Result.CANCELED:\n        return 'textDisabled'\n      default:\n        return 'text'\n    }\n  }\n\n  const getRoundPrefix = (result) => {\n    if (result === Result.LOSE) {\n      return '-'\n    }\n\n    if (result === Result.WIN) {\n      return '+'\n    }\n\n    return ''\n  }\n\n  const roundResult = getRoundResult(bet, currentEpoch)\n  const resultTextColor = getRoundColor(roundResult)\n  const resultTextPrefix = getRoundPrefix(roundResult)\n  const isOpenRound = round.epoch === currentEpoch\n  const isLiveRound = status === PredictionStatus.LIVE && round.epoch === currentEpoch - 1\n  const canClaim = !bet.claimed && bet.position === bet.round.position\n\n  // Winners get the payout, otherwise the claim what they put it if it was canceled\n  const payout = roundResult === Result.WIN ? getNetPayout(bet, rewardRate) : amount\n\n  const renderBetLabel = () => {\n    if (isOpenRound) {\n      return (\n        <Flex alignItems=\"center\">\n          <WaitIcon color=\"primary\" mr=\"6px\" width=\"24px\" />\n          <Text color=\"primary\" bold>\n            {t('Starting Soon')}\n          </Text>\n        </Flex>\n      )\n    }\n\n    if (isLiveRound) {\n      return (\n        <Flex alignItems=\"center\">\n          <PlayCircleOutlineIcon color=\"secondary\" mr=\"6px\" width=\"24px\" />\n          <Text color=\"secondary\" bold>\n            {t('Live Now')}\n          </Text>\n        </Flex>\n      )\n    }\n\n    return (\n      <>\n        <Text fontSize=\"12px\" color=\"textSubtle\">\n          {t('Your Result')}\n        </Text>\n        <Text bold color={resultTextColor} lineHeight={1}>\n          {roundResult === Result.CANCELED ? t('Canceled') : `${resultTextPrefix}${formatBnb(payout)}`}\n        </Text>\n      </>\n    )\n  }\n\n  const handleSuccess = async () => {\n    // We have to mark the bet as claimed immediately because it does not update fast enough\n    dispatch(markBetHistoryAsCollected({ account, betId: bet.id }))\n    dispatch(fetchLedgerData({ account, epochs: [bet.round.epoch] }))\n  }\n\n  return (\n    <>\n      <StyledBet onClick={toggleOpen} role=\"button\">\n        <Box width=\"48px\">\n          <Text textAlign=\"center\">\n            <Text fontSize=\"12px\" color=\"textSubtle\">\n              {t('Round')}\n            </Text>\n            <Text bold lineHeight={1}>\n              {round.epoch.toLocaleString()}\n            </Text>\n          </Text>\n        </Box>\n        <YourResult px=\"24px\">{renderBetLabel()}</YourResult>\n        {roundResult === Result.WIN && canClaim && (\n          <CollectWinningsButton\n            hasClaimed={!canClaim}\n            epoch={bet.round.epoch}\n            payout={formatBnb(payout)}\n            onSuccess={handleSuccess}\n            betAmount={bet.amount.toString()}\n            scale=\"sm\"\n            mr=\"8px\"\n          >\n            {t('Collect')}\n          </CollectWinningsButton>\n        )}\n        {roundResult === Result.CANCELED && canClaim && (\n          <ReclaimPositionButton epoch={bet.round.epoch} scale=\"sm\" mr=\"8px\">\n            {t('Reclaim')}\n          </ReclaimPositionButton>\n        )}\n        {!isOpenRound && !isLiveRound && (\n          <IconButton variant=\"text\" scale=\"sm\">\n            {isOpen ? <ChevronUpIcon /> : <ChevronDownIcon />}\n          </IconButton>\n        )}\n      </StyledBet>\n      {isOpen && <BetDetails bet={bet} result={getRoundResult(bet, currentEpoch)} />}\n    </>\n  )\n}\n\nexport default HistoricalBet\n"]},"metadata":{},"sourceType":"module"}