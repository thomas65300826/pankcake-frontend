{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { getAchievements } from './helpers';\nconst initialState = {\n  data: []\n};\nexport const achievementSlice = createSlice({\n  name: 'achievements',\n  initialState,\n  reducers: {\n    addAchievement: (state, action) => {\n      state.data.push(action.payload);\n    },\n    addAchievements: (state, action) => {\n      state.data = [...state.data, ...action.payload];\n    },\n    setAchievements: (state, action) => {\n      state.data = action.payload;\n    },\n    clearAchievements: state => {\n      state.data = [];\n    }\n  }\n}); // Actions\n\nexport const {\n  addAchievement,\n  addAchievements,\n  setAchievements,\n  clearAchievements\n} = achievementSlice.actions; // Thunks\n\nexport const fetchAchievements = account => async dispatch => {\n  try {\n    const achievements = await getAchievements(account);\n    dispatch(setAchievements(achievements));\n  } catch (error) {\n    console.error(error);\n  }\n};\nexport default achievementSlice.reducer;","map":{"version":3,"sources":["/Users/thomas/Documents/PycharmProjects/pancake-frontend/src/state/achievements/index.ts"],"names":["createSlice","getAchievements","initialState","data","achievementSlice","name","reducers","addAchievement","state","action","push","payload","addAchievements","setAchievements","clearAchievements","actions","fetchAchievements","account","dispatch","achievements","error","console","reducer"],"mappings":"AAAA,SAASA,WAAT,QAAqD,kBAArD;AAEA,SAASC,eAAT,QAAgC,WAAhC;AAEA,MAAMC,YAA8B,GAAG;AACrCC,EAAAA,IAAI,EAAE;AAD+B,CAAvC;AAIA,OAAO,MAAMC,gBAAgB,GAAGJ,WAAW,CAAC;AAC1CK,EAAAA,IAAI,EAAE,cADoC;AAE1CH,EAAAA,YAF0C;AAG1CI,EAAAA,QAAQ,EAAE;AACRC,IAAAA,cAAc,EAAE,CAACC,KAAD,EAAQC,MAAR,KAA+C;AAC7DD,MAAAA,KAAK,CAACL,IAAN,CAAWO,IAAX,CAAgBD,MAAM,CAACE,OAAvB;AACD,KAHO;AAIRC,IAAAA,eAAe,EAAE,CAACJ,KAAD,EAAQC,MAAR,KAAiD;AAChED,MAAAA,KAAK,CAACL,IAAN,GAAa,CAAC,GAAGK,KAAK,CAACL,IAAV,EAAgB,GAAGM,MAAM,CAACE,OAA1B,CAAb;AACD,KANO;AAORE,IAAAA,eAAe,EAAE,CAACL,KAAD,EAAQC,MAAR,KAAiD;AAChED,MAAAA,KAAK,CAACL,IAAN,GAAaM,MAAM,CAACE,OAApB;AACD,KATO;AAURG,IAAAA,iBAAiB,EAAGN,KAAD,IAAW;AAC5BA,MAAAA,KAAK,CAACL,IAAN,GAAa,EAAb;AACD;AAZO;AAHgC,CAAD,CAApC,C,CAmBP;;AACA,OAAO,MAAM;AAAEI,EAAAA,cAAF;AAAkBK,EAAAA,eAAlB;AAAmCC,EAAAA,eAAnC;AAAoDC,EAAAA;AAApD,IAA0EV,gBAAgB,CAACW,OAAjG,C,CAEP;;AACA,OAAO,MAAMC,iBAAiB,GAAIC,OAAD,IAAqB,MAAOC,QAAP,IAA8B;AAClF,MAAI;AACF,UAAMC,YAAY,GAAG,MAAMlB,eAAe,CAACgB,OAAD,CAA1C;AACAC,IAAAA,QAAQ,CAACL,eAAe,CAACM,YAAD,CAAhB,CAAR;AACD,GAHD,CAGE,OAAOC,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACD;AACF,CAPM;AASP,eAAehB,gBAAgB,CAACkB,OAAhC","sourcesContent":["import { createSlice, Dispatch, PayloadAction } from '@reduxjs/toolkit'\nimport { AchievementState, Achievement } from '../types'\nimport { getAchievements } from './helpers'\n\nconst initialState: AchievementState = {\n  data: [],\n}\n\nexport const achievementSlice = createSlice({\n  name: 'achievements',\n  initialState,\n  reducers: {\n    addAchievement: (state, action: PayloadAction<Achievement>) => {\n      state.data.push(action.payload)\n    },\n    addAchievements: (state, action: PayloadAction<Achievement[]>) => {\n      state.data = [...state.data, ...action.payload]\n    },\n    setAchievements: (state, action: PayloadAction<Achievement[]>) => {\n      state.data = action.payload\n    },\n    clearAchievements: (state) => {\n      state.data = []\n    },\n  },\n})\n\n// Actions\nexport const { addAchievement, addAchievements, setAchievements, clearAchievements } = achievementSlice.actions\n\n// Thunks\nexport const fetchAchievements = (account: string) => async (dispatch: Dispatch) => {\n  try {\n    const achievements = await getAchievements(account)\n    dispatch(setAchievements(achievements))\n  } catch (error) {\n    console.error(error)\n  }\n}\n\nexport default achievementSlice.reducer\n"]},"metadata":{},"sourceType":"module"}