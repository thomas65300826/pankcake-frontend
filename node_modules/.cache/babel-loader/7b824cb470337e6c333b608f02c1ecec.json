{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState, useCallback } from 'react';\nimport BigNumber from 'bignumber.js';\nimport { BSC_BLOCK_TIME } from 'config';\nimport { useBlock } from 'state/block/hooks';\nimport { useLpTokenPrice } from 'state/farms/hooks';\nimport useRefresh from 'hooks/useRefresh';\nimport { multicallv2 } from 'utils/multicall';\nimport ifoV2Abi from 'config/abi/ifoV2.json';\nimport { BIG_ZERO } from 'utils/bigNumber';\nimport { getStatus } from '../helpers'; // https://github.com/pancakeswap/pancake-contracts/blob/master/projects/ifo/contracts/IFOV2.sol#L431\n// 1,000,000,000 / 100\n\nconst TAX_PRECISION = 10000000000;\n\nconst formatPool = pool => ({\n  raisingAmountPool: pool ? new BigNumber(pool[0].toString()) : BIG_ZERO,\n  offeringAmountPool: pool ? new BigNumber(pool[1].toString()) : BIG_ZERO,\n  limitPerUserInLP: pool ? new BigNumber(pool[2].toString()) : BIG_ZERO,\n  hasTax: pool ? pool[3] : false,\n  totalAmountPool: pool ? new BigNumber(pool[4].toString()) : BIG_ZERO,\n  sumTaxesOverflow: pool ? new BigNumber(pool[5].toString()) : BIG_ZERO\n});\n/**\n * Gets all public data of an IFO\n */\n\n\nconst useGetPublicIfoData = ifo => {\n  _s();\n\n  const {\n    address,\n    releaseBlockNumber\n  } = ifo;\n  const lpTokenPriceInUsd = useLpTokenPrice(ifo.currency.symbol);\n  const {\n    fastRefresh\n  } = useRefresh();\n  const [state, setState] = useState({\n    status: 'idle',\n    blocksRemaining: 0,\n    secondsUntilStart: 0,\n    progress: 5,\n    secondsUntilEnd: 0,\n    poolBasic: {\n      raisingAmountPool: BIG_ZERO,\n      offeringAmountPool: BIG_ZERO,\n      limitPerUserInLP: BIG_ZERO,\n      taxRate: 0,\n      totalAmountPool: BIG_ZERO,\n      sumTaxesOverflow: BIG_ZERO\n    },\n    poolUnlimited: {\n      raisingAmountPool: BIG_ZERO,\n      offeringAmountPool: BIG_ZERO,\n      limitPerUserInLP: BIG_ZERO,\n      taxRate: 0,\n      totalAmountPool: BIG_ZERO,\n      sumTaxesOverflow: BIG_ZERO\n    },\n    startBlockNum: 0,\n    endBlockNum: 0,\n    numberPoints: 0\n  });\n  const {\n    currentBlock\n  } = useBlock();\n  const fetchIfoData = useCallback(async () => {\n    const ifoCalls = [{\n      address,\n      name: 'startBlock'\n    }, {\n      address,\n      name: 'endBlock'\n    }, {\n      address,\n      name: 'viewPoolInformation',\n      params: [0]\n    }, {\n      address,\n      name: 'viewPoolInformation',\n      params: [1]\n    }, {\n      address,\n      name: 'viewPoolTaxRateOverflow',\n      params: [1]\n    }, {\n      address,\n      name: 'numberPoints'\n    }];\n    const [startBlock, endBlock, poolBasic, poolUnlimited, taxRate, numberPoints] = await multicallv2(ifoV2Abi, ifoCalls);\n    const poolBasicFormatted = formatPool(poolBasic);\n    const poolUnlimitedFormatted = formatPool(poolUnlimited);\n    const startBlockNum = startBlock ? startBlock[0].toNumber() : 0;\n    const endBlockNum = endBlock ? endBlock[0].toNumber() : 0;\n    const taxRateNum = taxRate ? taxRate[0].div(TAX_PRECISION).toNumber() : 0;\n    const status = getStatus(currentBlock, startBlockNum, endBlockNum);\n    const totalBlocks = endBlockNum - startBlockNum;\n    const blocksRemaining = endBlockNum - currentBlock; // Calculate the total progress until finished or until start\n\n    const progress = currentBlock > startBlockNum ? (currentBlock - startBlockNum) / totalBlocks * 100 : (currentBlock - releaseBlockNumber) / (startBlockNum - releaseBlockNumber) * 100;\n    setState(prev => ({ ...prev,\n      secondsUntilEnd: blocksRemaining * BSC_BLOCK_TIME,\n      secondsUntilStart: (startBlockNum - currentBlock) * BSC_BLOCK_TIME,\n      poolBasic: { ...poolBasicFormatted,\n        taxRate: 0\n      },\n      poolUnlimited: { ...poolUnlimitedFormatted,\n        taxRate: taxRateNum\n      },\n      status,\n      progress,\n      blocksRemaining,\n      startBlockNum,\n      endBlockNum,\n      numberPoints: numberPoints ? numberPoints[0].toNumber() : 0\n    }));\n  }, [address, currentBlock, releaseBlockNumber]);\n  useEffect(() => {\n    fetchIfoData();\n  }, [fetchIfoData, fastRefresh]);\n  return { ...state,\n    currencyPriceInUSD: lpTokenPriceInUsd,\n    fetchIfoData\n  };\n};\n\n_s(useGetPublicIfoData, \"PvbNtdMNbK9oX1+/QtpsVl9fWxs=\", false, function () {\n  return [useLpTokenPrice, useRefresh, useBlock];\n});\n\nexport default useGetPublicIfoData;","map":{"version":3,"sources":["/Users/thomas/Documents/pancake-frontend/pankcake-frontend/src/views/Ifos/hooks/v2/useGetPublicIfoData.ts"],"names":["useEffect","useState","useCallback","BigNumber","BSC_BLOCK_TIME","useBlock","useLpTokenPrice","useRefresh","multicallv2","ifoV2Abi","BIG_ZERO","getStatus","TAX_PRECISION","formatPool","pool","raisingAmountPool","toString","offeringAmountPool","limitPerUserInLP","hasTax","totalAmountPool","sumTaxesOverflow","useGetPublicIfoData","ifo","address","releaseBlockNumber","lpTokenPriceInUsd","currency","symbol","fastRefresh","state","setState","status","blocksRemaining","secondsUntilStart","progress","secondsUntilEnd","poolBasic","taxRate","poolUnlimited","startBlockNum","endBlockNum","numberPoints","currentBlock","fetchIfoData","ifoCalls","name","params","startBlock","endBlock","poolBasicFormatted","poolUnlimitedFormatted","toNumber","taxRateNum","div","totalBlocks","prev","currencyPriceInUSD"],"mappings":"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","sourcesContent":["import { useEffect, useState, useCallback } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { BSC_BLOCK_TIME } from 'config'\nimport { Ifo, IfoStatus } from 'config/constants/types'\nimport { useBlock } from 'state/block/hooks'\nimport { useLpTokenPrice } from 'state/farms/hooks'\nimport useRefresh from 'hooks/useRefresh'\nimport { multicallv2 } from 'utils/multicall'\nimport ifoV2Abi from 'config/abi/ifoV2.json'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { PublicIfoData } from '../../types'\nimport { getStatus } from '../helpers'\n\n// https://github.com/pancakeswap/pancake-contracts/blob/master/projects/ifo/contracts/IFOV2.sol#L431\n// 1,000,000,000 / 100\nconst TAX_PRECISION = 10000000000\n\nconst formatPool = (pool) => ({\n  raisingAmountPool: pool ? new BigNumber(pool[0].toString()) : BIG_ZERO,\n  offeringAmountPool: pool ? new BigNumber(pool[1].toString()) : BIG_ZERO,\n  limitPerUserInLP: pool ? new BigNumber(pool[2].toString()) : BIG_ZERO,\n  hasTax: pool ? pool[3] : false,\n  totalAmountPool: pool ? new BigNumber(pool[4].toString()) : BIG_ZERO,\n  sumTaxesOverflow: pool ? new BigNumber(pool[5].toString()) : BIG_ZERO,\n})\n\n/**\n * Gets all public data of an IFO\n */\nconst useGetPublicIfoData = (ifo: Ifo): PublicIfoData => {\n  const { address, releaseBlockNumber } = ifo\n  const lpTokenPriceInUsd = useLpTokenPrice(ifo.currency.symbol)\n  const { fastRefresh } = useRefresh()\n\n  const [state, setState] = useState({\n    status: 'idle' as IfoStatus,\n    blocksRemaining: 0,\n    secondsUntilStart: 0,\n    progress: 5,\n    secondsUntilEnd: 0,\n    poolBasic: {\n      raisingAmountPool: BIG_ZERO,\n      offeringAmountPool: BIG_ZERO,\n      limitPerUserInLP: BIG_ZERO,\n      taxRate: 0,\n      totalAmountPool: BIG_ZERO,\n      sumTaxesOverflow: BIG_ZERO,\n    },\n    poolUnlimited: {\n      raisingAmountPool: BIG_ZERO,\n      offeringAmountPool: BIG_ZERO,\n      limitPerUserInLP: BIG_ZERO,\n      taxRate: 0,\n      totalAmountPool: BIG_ZERO,\n      sumTaxesOverflow: BIG_ZERO,\n    },\n    startBlockNum: 0,\n    endBlockNum: 0,\n    numberPoints: 0,\n  })\n  const { currentBlock } = useBlock()\n\n  const fetchIfoData = useCallback(async () => {\n    const ifoCalls = [\n      {\n        address,\n        name: 'startBlock',\n      },\n      {\n        address,\n        name: 'endBlock',\n      },\n      {\n        address,\n        name: 'viewPoolInformation',\n        params: [0],\n      },\n      {\n        address,\n        name: 'viewPoolInformation',\n        params: [1],\n      },\n      {\n        address,\n        name: 'viewPoolTaxRateOverflow',\n        params: [1],\n      },\n      {\n        address,\n        name: 'numberPoints',\n      },\n    ]\n\n    const [startBlock, endBlock, poolBasic, poolUnlimited, taxRate, numberPoints] = await multicallv2(\n      ifoV2Abi,\n      ifoCalls,\n    )\n\n    const poolBasicFormatted = formatPool(poolBasic)\n    const poolUnlimitedFormatted = formatPool(poolUnlimited)\n\n    const startBlockNum = startBlock ? startBlock[0].toNumber() : 0\n    const endBlockNum = endBlock ? endBlock[0].toNumber() : 0\n    const taxRateNum = taxRate ? taxRate[0].div(TAX_PRECISION).toNumber() : 0\n\n    const status = getStatus(currentBlock, startBlockNum, endBlockNum)\n    const totalBlocks = endBlockNum - startBlockNum\n    const blocksRemaining = endBlockNum - currentBlock\n\n    // Calculate the total progress until finished or until start\n    const progress =\n      currentBlock > startBlockNum\n        ? ((currentBlock - startBlockNum) / totalBlocks) * 100\n        : ((currentBlock - releaseBlockNumber) / (startBlockNum - releaseBlockNumber)) * 100\n\n    setState((prev) => ({\n      ...prev,\n      secondsUntilEnd: blocksRemaining * BSC_BLOCK_TIME,\n      secondsUntilStart: (startBlockNum - currentBlock) * BSC_BLOCK_TIME,\n      poolBasic: { ...poolBasicFormatted, taxRate: 0 },\n      poolUnlimited: { ...poolUnlimitedFormatted, taxRate: taxRateNum },\n      status,\n      progress,\n      blocksRemaining,\n      startBlockNum,\n      endBlockNum,\n      numberPoints: numberPoints ? numberPoints[0].toNumber() : 0,\n    }))\n  }, [address, currentBlock, releaseBlockNumber])\n\n  useEffect(() => {\n    fetchIfoData()\n  }, [fetchIfoData, fastRefresh])\n\n  return { ...state, currencyPriceInUSD: lpTokenPriceInUsd, fetchIfoData }\n}\n\nexport default useGetPublicIfoData\n"]},"metadata":{},"sourceType":"module"}