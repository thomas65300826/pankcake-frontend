{"ast":null,"code":"var _jsxFileName = \"/Users/thomas/Documents/PycharmProjects/pancake-frontend/src/views/Predictions/components/ReclaimPositionButton.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { AutoRenewIcon, Button } from '@pancakeswap/uikit';\nimport { useTranslation } from 'contexts/Localization';\nimport { usePredictionsContract } from 'hooks/useContract';\nimport useToast from 'hooks/useToast';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ReclaimPositionButton = ({\n  epoch,\n  onSuccess,\n  children,\n  ...props\n}) => {\n  _s();\n\n  const [isPendingTx, setIsPendingTx] = useState(false);\n  const {\n    t\n  } = useTranslation();\n  const predictionsContract = usePredictionsContract();\n  const {\n    toastSuccess,\n    toastError\n  } = useToast();\n\n  const handleReclaim = async () => {\n    const tx = await predictionsContract.claim(epoch);\n    setIsPendingTx(true);\n    const receipt = await tx.wait();\n\n    if (receipt.status) {\n      if (onSuccess) {\n        await onSuccess();\n      }\n\n      setIsPendingTx(false);\n      toastSuccess(t('Position reclaimed!'));\n    } else {\n      setIsPendingTx(false);\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Button, {\n    onClick: handleReclaim,\n    isLoading: isPendingTx,\n    endIcon: isPendingTx ? /*#__PURE__*/_jsxDEV(AutoRenewIcon, {\n      spin: true,\n      color: \"white\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 30\n    }, this) : null,\n    ...props,\n    children: children || t('Reclaim Position')\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ReclaimPositionButton, \"OKqmlAkkemWDycLyrw8q12USEMs=\", false, function () {\n  return [useTranslation, usePredictionsContract, useToast];\n});\n\n_c = ReclaimPositionButton;\nexport default ReclaimPositionButton;\n\nvar _c;\n\n$RefreshReg$(_c, \"ReclaimPositionButton\");","map":{"version":3,"sources":["/Users/thomas/Documents/PycharmProjects/pancake-frontend/src/views/Predictions/components/ReclaimPositionButton.tsx"],"names":["React","useState","AutoRenewIcon","Button","useTranslation","usePredictionsContract","useToast","ReclaimPositionButton","epoch","onSuccess","children","props","isPendingTx","setIsPendingTx","t","predictionsContract","toastSuccess","toastError","handleReclaim","tx","claim","receipt","wait","status"],"mappings":";;;AAAA,OAAOA,KAAP,IAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,aAAT,EAAwBC,MAAxB,QAAmD,oBAAnD;AACA,SAASC,cAAT,QAA+B,uBAA/B;AACA,SAASC,sBAAT,QAAuC,mBAAvC;AACA,OAAOC,QAAP,MAAqB,gBAArB;;;AAQA,MAAMC,qBAA2D,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA,SAAT;AAAoBC,EAAAA,QAApB;AAA8B,KAAGC;AAAjC,CAAD,KAA8C;AAAA;;AAChH,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCZ,QAAQ,CAAC,KAAD,CAA9C;AACA,QAAM;AAAEa,IAAAA;AAAF,MAAQV,cAAc,EAA5B;AACA,QAAMW,mBAAmB,GAAGV,sBAAsB,EAAlD;AACA,QAAM;AAAEW,IAAAA,YAAF;AAAgBC,IAAAA;AAAhB,MAA+BX,QAAQ,EAA7C;;AAEA,QAAMY,aAAa,GAAG,YAAY;AAChC,UAAMC,EAAE,GAAG,MAAMJ,mBAAmB,CAACK,KAApB,CAA0BZ,KAA1B,CAAjB;AACAK,IAAAA,cAAc,CAAC,IAAD,CAAd;AAEA,UAAMQ,OAAO,GAAG,MAAMF,EAAE,CAACG,IAAH,EAAtB;;AACA,QAAID,OAAO,CAACE,MAAZ,EAAoB;AAClB,UAAId,SAAJ,EAAe;AACb,cAAMA,SAAS,EAAf;AACD;;AACDI,MAAAA,cAAc,CAAC,KAAD,CAAd;AACAG,MAAAA,YAAY,CAACF,CAAC,CAAC,qBAAD,CAAF,CAAZ;AACD,KAND,MAMO;AACLD,MAAAA,cAAc,CAAC,KAAD,CAAd;AACAI,MAAAA,UAAU,CAACH,CAAC,CAAC,OAAD,CAAF,EAAaA,CAAC,CAAC,oFAAD,CAAd,CAAV;AACD;AACF,GAfD;;AAiBA,sBACE,QAAC,MAAD;AACE,IAAA,OAAO,EAAEI,aADX;AAEE,IAAA,SAAS,EAAEN,WAFb;AAGE,IAAA,OAAO,EAAEA,WAAW,gBAAG,QAAC,aAAD;AAAe,MAAA,IAAI,MAAnB;AAAoB,MAAA,KAAK,EAAC;AAA1B;AAAA;AAAA;AAAA;AAAA,YAAH,GAA0C,IAHhE;AAAA,OAIMD,KAJN;AAAA,cAMGD,QAAQ,IAAII,CAAC,CAAC,kBAAD;AANhB;AAAA;AAAA;AAAA;AAAA,UADF;AAUD,CAjCD;;GAAMP,qB;UAEUH,c,EACcC,sB,EACSC,Q;;;KAJjCC,qB;AAmCN,eAAeA,qBAAf","sourcesContent":["import React, { ReactNode, useState } from 'react'\nimport { AutoRenewIcon, Button, ButtonProps } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { usePredictionsContract } from 'hooks/useContract'\nimport useToast from 'hooks/useToast'\n\ninterface ReclaimPositionButtonProps extends ButtonProps {\n  epoch: number\n  onSuccess?: () => Promise<void>\n  children?: ReactNode\n}\n\nconst ReclaimPositionButton: React.FC<ReclaimPositionButtonProps> = ({ epoch, onSuccess, children, ...props }) => {\n  const [isPendingTx, setIsPendingTx] = useState(false)\n  const { t } = useTranslation()\n  const predictionsContract = usePredictionsContract()\n  const { toastSuccess, toastError } = useToast()\n\n  const handleReclaim = async () => {\n    const tx = await predictionsContract.claim(epoch)\n    setIsPendingTx(true)\n\n    const receipt = await tx.wait()\n    if (receipt.status) {\n      if (onSuccess) {\n        await onSuccess()\n      }\n      setIsPendingTx(false)\n      toastSuccess(t('Position reclaimed!'))\n    } else {\n      setIsPendingTx(false)\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n    }\n  }\n\n  return (\n    <Button\n      onClick={handleReclaim}\n      isLoading={isPendingTx}\n      endIcon={isPendingTx ? <AutoRenewIcon spin color=\"white\" /> : null}\n      {...props}\n    >\n      {children || t('Reclaim Position')}\n    </Button>\n  )\n}\n\nexport default ReclaimPositionButton\n"]},"metadata":{},"sourceType":"module"}