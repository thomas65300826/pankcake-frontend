{"ast":null,"code":"var _jsxFileName = \"/Users/thomas/Documents/PycharmProjects/pancake-frontend/src/views/Home/components/UserBanner/HarvestCard.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useCallback } from 'react';\nimport styled from 'styled-components';\nimport { AutoRenewIcon, Button, Card, CardBody, Flex, Skeleton, Text, Link, ArrowForwardIcon } from '@pancakeswap/uikit';\nimport BigNumber from 'bignumber.js';\nimport { useTranslation } from 'contexts/Localization';\nimport { usePriceCakeBusd } from 'state/farms/hooks';\nimport useToast from 'hooks/useToast';\nimport { useMasterchef } from 'hooks/useContract';\nimport { harvestFarm } from 'utils/calls';\nimport Balance from 'components/Balance';\nimport useFarmsWithBalance from 'views/Home/hooks/useFarmsWithBalance';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StyledCard = styled(Card)`\n  width: 100%;\n  height: fit-content;\n`;\n_c = StyledCard;\n\nconst HarvestCard = () => {\n  _s();\n\n  const [pendingTx, setPendingTx] = useState(false);\n  const {\n    t\n  } = useTranslation();\n  const {\n    toastSuccess,\n    toastError\n  } = useToast();\n  const {\n    farmsWithStakedBalance,\n    earningsSum\n  } = useFarmsWithBalance();\n  const masterChefContract = useMasterchef();\n  const cakePriceBusd = usePriceCakeBusd();\n  const earningsBusd = new BigNumber(earningsSum).multipliedBy(cakePriceBusd);\n  const numFarmsToCollect = farmsWithStakedBalance.length;\n  const earningsText = t('%earningsBusd% to collect from %count% %farms%', {\n    earningsBusd: earningsBusd.toString(),\n    count: numFarmsToCollect > 0 ? numFarmsToCollect : '',\n    farms: numFarmsToCollect === 0 || numFarmsToCollect > 1 ? 'farms' : 'farm'\n  });\n  const [preText, toCollectText] = earningsText.split(earningsBusd.toString());\n  const harvestAllFarms = useCallback(async () => {\n    setPendingTx(true); // eslint-disable-next-line no-restricted-syntax\n\n    for (const farmWithBalance of farmsWithStakedBalance) {\n      try {\n        // eslint-disable-next-line no-await-in-loop\n        await harvestFarm(masterChefContract, farmWithBalance.pid);\n        toastSuccess(`${t('Harvested')}!`, t('Your %symbol% earnings have been sent to your wallet!', {\n          symbol: 'CAKE'\n        }));\n      } catch (error) {\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'));\n      }\n    }\n\n    setPendingTx(false);\n  }, [farmsWithStakedBalance, masterChefContract, toastSuccess, toastError, t]);\n  return /*#__PURE__*/_jsxDEV(StyledCard, {\n    children: /*#__PURE__*/_jsxDEV(CardBody, {\n      children: /*#__PURE__*/_jsxDEV(Flex, {\n        flexDirection: ['column', null, null, 'row'],\n        justifyContent: \"space-between\",\n        alignItems: \"center\",\n        children: [/*#__PURE__*/_jsxDEV(Flex, {\n          flexDirection: \"column\",\n          alignItems: ['center', null, null, 'flex-start'],\n          children: [preText && /*#__PURE__*/_jsxDEV(Text, {\n            mb: \"4px\",\n            color: \"textSubtle\",\n            children: preText\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 15\n          }, this), earningsBusd && !earningsBusd.isNaN() ? /*#__PURE__*/_jsxDEV(Balance, {\n            decimals: earningsBusd.gt(0) ? 2 : 0,\n            fontSize: \"24px\",\n            bold: true,\n            prefix: earningsBusd.gt(0) ? '~$' : '$',\n            lineHeight: \"1.1\",\n            value: earningsBusd.toNumber()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(Skeleton, {\n            width: 96,\n            height: 24,\n            my: \"2px\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Text, {\n            mb: ['16px', null, null, '0'],\n            color: \"textSubtle\",\n            children: toCollectText\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }, this), numFarmsToCollect <= 0 ? /*#__PURE__*/_jsxDEV(Link, {\n          href: \"farms\",\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            width: ['100%', null, null, 'auto'],\n            variant: \"secondary\",\n            children: [/*#__PURE__*/_jsxDEV(Text, {\n              color: \"primary\",\n              bold: true,\n              children: t('Farms')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(ArrowForwardIcon, {\n              ml: \"4px\",\n              color: \"primary\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(Button, {\n          width: ['100%', null, null, 'auto'],\n          id: \"harvest-all\",\n          isLoading: pendingTx,\n          endIcon: pendingTx ? /*#__PURE__*/_jsxDEV(AutoRenewIcon, {\n            spin: true,\n            color: \"currentColor\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 36\n          }, this) : null,\n          disabled: pendingTx,\n          onClick: harvestAllFarms,\n          children: /*#__PURE__*/_jsxDEV(Text, {\n            color: \"invertedContrast\",\n            bold: true,\n            children: pendingTx ? t('Harvesting') : t('Harvest all')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n\n_s(HarvestCard, \"h2v5s/yp1eTMacPvu408m6XPreI=\", false, function () {\n  return [useTranslation, useToast, useFarmsWithBalance, useMasterchef, usePriceCakeBusd];\n});\n\n_c2 = HarvestCard;\nexport default HarvestCard;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"StyledCard\");\n$RefreshReg$(_c2, \"HarvestCard\");","map":{"version":3,"sources":["/Users/thomas/Documents/PycharmProjects/pancake-frontend/src/views/Home/components/UserBanner/HarvestCard.tsx"],"names":["React","useState","useCallback","styled","AutoRenewIcon","Button","Card","CardBody","Flex","Skeleton","Text","Link","ArrowForwardIcon","BigNumber","useTranslation","usePriceCakeBusd","useToast","useMasterchef","harvestFarm","Balance","useFarmsWithBalance","StyledCard","HarvestCard","pendingTx","setPendingTx","t","toastSuccess","toastError","farmsWithStakedBalance","earningsSum","masterChefContract","cakePriceBusd","earningsBusd","multipliedBy","numFarmsToCollect","length","earningsText","toString","count","farms","preText","toCollectText","split","harvestAllFarms","farmWithBalance","pid","symbol","error","isNaN","gt","toNumber"],"mappings":"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","sourcesContent":["import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { AutoRenewIcon, Button, Card, CardBody, Flex, Skeleton, Text, Link, ArrowForwardIcon } from '@pancakeswap/uikit'\nimport BigNumber from 'bignumber.js'\nimport { useTranslation } from 'contexts/Localization'\nimport { usePriceCakeBusd } from 'state/farms/hooks'\nimport useToast from 'hooks/useToast'\nimport { useMasterchef } from 'hooks/useContract'\nimport { harvestFarm } from 'utils/calls'\nimport Balance from 'components/Balance'\nimport useFarmsWithBalance from 'views/Home/hooks/useFarmsWithBalance'\n\nconst StyledCard = styled(Card)`\n  width: 100%;\n  height: fit-content;\n`\n\nconst HarvestCard = () => {\n  const [pendingTx, setPendingTx] = useState(false)\n  const { t } = useTranslation()\n  const { toastSuccess, toastError } = useToast()\n  const { farmsWithStakedBalance, earningsSum } = useFarmsWithBalance()\n  const masterChefContract = useMasterchef()\n  const cakePriceBusd = usePriceCakeBusd()\n  const earningsBusd = new BigNumber(earningsSum).multipliedBy(cakePriceBusd)\n  const numFarmsToCollect = farmsWithStakedBalance.length\n\n  const earningsText = t('%earningsBusd% to collect from %count% %farms%', {\n    earningsBusd: earningsBusd.toString(),\n    count: numFarmsToCollect > 0 ? numFarmsToCollect : '',\n    farms: numFarmsToCollect === 0 || numFarmsToCollect > 1 ? 'farms' : 'farm',\n  })\n  const [preText, toCollectText] = earningsText.split(earningsBusd.toString())\n\n  const harvestAllFarms = useCallback(async () => {\n    setPendingTx(true)\n    // eslint-disable-next-line no-restricted-syntax\n    for (const farmWithBalance of farmsWithStakedBalance) {\n      try {\n        // eslint-disable-next-line no-await-in-loop\n        await harvestFarm(masterChefContract, farmWithBalance.pid)\n        toastSuccess(\n          `${t('Harvested')}!`,\n          t('Your %symbol% earnings have been sent to your wallet!', { symbol: 'CAKE' }),\n        )\n      } catch (error) {\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n      }\n    }\n    setPendingTx(false)\n  }, [farmsWithStakedBalance, masterChefContract, toastSuccess, toastError, t])\n\n  return (\n    <StyledCard>\n      <CardBody>\n        <Flex flexDirection={['column', null, null, 'row']} justifyContent=\"space-between\" alignItems=\"center\">\n          <Flex flexDirection=\"column\" alignItems={['center', null, null, 'flex-start']}>\n            {preText && (\n              <Text mb=\"4px\" color=\"textSubtle\">\n                {preText}\n              </Text>\n            )}\n            {earningsBusd && !earningsBusd.isNaN() ? (\n              <Balance\n                decimals={earningsBusd.gt(0) ? 2 : 0}\n                fontSize=\"24px\"\n                bold\n                prefix={earningsBusd.gt(0) ? '~$' : '$'}\n                lineHeight=\"1.1\"\n                value={earningsBusd.toNumber()}\n              />\n            ) : (\n              <Skeleton width={96} height={24} my=\"2px\" />\n            )}\n            <Text mb={['16px', null, null, '0']} color=\"textSubtle\">\n              {toCollectText}\n            </Text>\n          </Flex>\n          {numFarmsToCollect <= 0 ? (\n            <Link href=\"farms\">\n              <Button width={['100%', null, null, 'auto']} variant=\"secondary\">\n                <Text color=\"primary\" bold>\n                  {t('Farms')}\n                </Text>\n                <ArrowForwardIcon ml=\"4px\" color=\"primary\" />\n              </Button>\n            </Link>\n          ) : (\n            <Button\n              width={['100%', null, null, 'auto']}\n              id=\"harvest-all\"\n              isLoading={pendingTx}\n              endIcon={pendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n              disabled={pendingTx}\n              onClick={harvestAllFarms}\n            >\n              <Text color=\"invertedContrast\" bold>\n                {pendingTx ? t('Harvesting') : t('Harvest all')}\n              </Text>\n            </Button>\n          )}\n        </Flex>\n      </CardBody>\n    </StyledCard>\n  )\n}\n\nexport default HarvestCard\n"]},"metadata":{},"sourceType":"module"}