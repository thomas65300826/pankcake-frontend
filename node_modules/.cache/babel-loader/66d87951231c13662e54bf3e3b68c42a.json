{"ast":null,"code":"var _jsxFileName = \"/Users/thomas/Documents/pancake-frontend/src/views/Collectibles/components/NftCard/EasterNftCard.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport { useProfile } from 'state/profile/hooks';\nimport { useEasterNftContract } from 'hooks/useContract';\nimport NftCard from './index';\n/**\n * A map of NFT bunny Ids to Team ids\n * [identifier]: teamId\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const teamNftMap = {\n  'easter-storm': 1,\n  'easter-flipper': 2,\n  'easter-caker': 3\n};\n\nconst EasterNftCard = ({\n  nft,\n  ...props\n}) => {\n  _s();\n\n  const [isClaimable, setIsClaimable] = useState(false);\n  const {\n    account\n  } = useWeb3React();\n  const {\n    profile\n  } = useProfile();\n  const {\n    identifier\n  } = nft;\n  const {\n    team\n  } = profile !== null && profile !== void 0 ? profile : {};\n  const easterNftContract = useEasterNftContract();\n\n  const handleClaim = async () => {\n    const response = await easterNftContract.mintNFT();\n    await response.wait();\n    return response;\n  };\n\n  useEffect(() => {\n    const fetchClaimStatus = async () => {\n      const canClaim = await easterNftContract.canClaim(account); // Wallet can claim if it is claimable and the nft being displayed is mapped to the wallet's team\n\n      setIsClaimable(canClaim ? team.id === teamNftMap[identifier] : false);\n    };\n\n    if (account && team) {\n      fetchClaimStatus();\n    }\n  }, [account, identifier, team, easterNftContract, setIsClaimable]);\n  return /*#__PURE__*/_jsxDEV(NftCard, {\n    nft: nft,\n    ...props,\n    canClaim: isClaimable,\n    onClaim: handleClaim\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 10\n  }, this);\n};\n\n_s(EasterNftCard, \"i8uAVQc/OYUTh0HOYmQr+Q/8iyg=\", false, function () {\n  return [useWeb3React, useProfile, useEasterNftContract];\n});\n\n_c = EasterNftCard;\nexport default EasterNftCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"EasterNftCard\");","map":{"version":3,"sources":["/Users/thomas/Documents/pancake-frontend/src/views/Collectibles/components/NftCard/EasterNftCard.tsx"],"names":["React","useEffect","useState","useWeb3React","useProfile","useEasterNftContract","NftCard","teamNftMap","EasterNftCard","nft","props","isClaimable","setIsClaimable","account","profile","identifier","team","easterNftContract","handleClaim","response","mintNFT","wait","fetchClaimStatus","canClaim","id"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,YAAT,QAA6B,kBAA7B;AAEA,SAASC,UAAT,QAA2B,qBAA3B;AACA,SAASC,oBAAT,QAAqC,mBAArC;AACA,OAAOC,OAAP,MAAsC,SAAtC;AAEA;AACA;AACA;AACA;;;AACA,OAAO,MAAMC,UAAU,GAAG;AACxB,kBAAgB,CADQ;AAExB,oBAAkB,CAFM;AAGxB,kBAAgB;AAHQ,CAAnB;;AAMP,MAAMC,aAAqC,GAAG,CAAC;AAAEC,EAAAA,GAAF;AAAO,KAAGC;AAAV,CAAD,KAAuB;AAAA;;AACnE,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCV,QAAQ,CAAC,KAAD,CAA9C;AACA,QAAM;AAAEW,IAAAA;AAAF,MAAcV,YAAY,EAAhC;AACA,QAAM;AAAEW,IAAAA;AAAF,MAAcV,UAAU,EAA9B;AACA,QAAM;AAAEW,IAAAA;AAAF,MAAiBN,GAAvB;AACA,QAAM;AAAEO,IAAAA;AAAF,MAAWF,OAAX,aAAWA,OAAX,cAAWA,OAAX,GAAsB,EAA5B;AACA,QAAMG,iBAAiB,GAAGZ,oBAAoB,EAA9C;;AAEA,QAAMa,WAAW,GAAG,YAAY;AAC9B,UAAMC,QAA8C,GAAG,MAAMF,iBAAiB,CAACG,OAAlB,EAA7D;AACA,UAAMD,QAAQ,CAACE,IAAT,EAAN;AACA,WAAOF,QAAP;AACD,GAJD;;AAMAlB,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMqB,gBAAgB,GAAG,YAAY;AACnC,YAAMC,QAAQ,GAAG,MAAMN,iBAAiB,CAACM,QAAlB,CAA2BV,OAA3B,CAAvB,CADmC,CAGnC;;AACAD,MAAAA,cAAc,CAACW,QAAQ,GAAGP,IAAI,CAACQ,EAAL,KAAYjB,UAAU,CAACQ,UAAD,CAAzB,GAAwC,KAAjD,CAAd;AACD,KALD;;AAOA,QAAIF,OAAO,IAAIG,IAAf,EAAqB;AACnBM,MAAAA,gBAAgB;AACjB;AACF,GAXQ,EAWN,CAACT,OAAD,EAAUE,UAAV,EAAsBC,IAAtB,EAA4BC,iBAA5B,EAA+CL,cAA/C,CAXM,CAAT;AAaA,sBAAO,QAAC,OAAD;AAAS,IAAA,GAAG,EAAEH,GAAd;AAAA,OAAuBC,KAAvB;AAA8B,IAAA,QAAQ,EAAEC,WAAxC;AAAqD,IAAA,OAAO,EAAEO;AAA9D;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CA5BD;;GAAMV,a;UAEgBL,Y,EACAC,U,EAGMC,oB;;;KANtBG,a;AA8BN,eAAeA,aAAf","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { ethers } from 'ethers'\nimport { useProfile } from 'state/profile/hooks'\nimport { useEasterNftContract } from 'hooks/useContract'\nimport NftCard, { NftCardProps } from './index'\n\n/**\n * A map of NFT bunny Ids to Team ids\n * [identifier]: teamId\n */\nexport const teamNftMap = {\n  'easter-storm': 1,\n  'easter-flipper': 2,\n  'easter-caker': 3,\n}\n\nconst EasterNftCard: React.FC<NftCardProps> = ({ nft, ...props }) => {\n  const [isClaimable, setIsClaimable] = useState(false)\n  const { account } = useWeb3React()\n  const { profile } = useProfile()\n  const { identifier } = nft\n  const { team } = profile ?? {}\n  const easterNftContract = useEasterNftContract()\n\n  const handleClaim = async () => {\n    const response: ethers.providers.TransactionResponse = await easterNftContract.mintNFT()\n    await response.wait()\n    return response\n  }\n\n  useEffect(() => {\n    const fetchClaimStatus = async () => {\n      const canClaim = await easterNftContract.canClaim(account)\n\n      // Wallet can claim if it is claimable and the nft being displayed is mapped to the wallet's team\n      setIsClaimable(canClaim ? team.id === teamNftMap[identifier] : false)\n    }\n\n    if (account && team) {\n      fetchClaimStatus()\n    }\n  }, [account, identifier, team, easterNftContract, setIsClaimable])\n\n  return <NftCard nft={nft} {...props} canClaim={isClaimable} onClaim={handleClaim} />\n}\n\nexport default EasterNftCard\n"]},"metadata":{},"sourceType":"module"}