{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { useFarmAuctionContract } from 'hooks/useContract';\nimport { getBidderInfo } from 'config/constants/farmAuctions';\nimport { AUCTION_WHITELISTED_BIDDERS_TO_FETCH } from 'config';\n\nconst useWhitelistedAddresses = () => {\n  _s();\n\n  const [whitelistedAddresses, setWhitelistedAddresses] = useState(null);\n  const farmAuctionContract = useFarmAuctionContract();\n  useEffect(() => {\n    const fetchWhielistedAddresses = async () => {\n      try {\n        const [bidderAddresses] = await farmAuctionContract.viewBidders(0, AUCTION_WHITELISTED_BIDDERS_TO_FETCH);\n        const bidders = bidderAddresses.map(address => getBidderInfo(address));\n        setWhitelistedAddresses(bidders);\n      } catch (error) {\n        console.error('Failed to fetch list of whitelisted addresses', error);\n      }\n    };\n\n    if (!whitelistedAddresses) {\n      fetchWhielistedAddresses();\n    }\n  }, [farmAuctionContract, whitelistedAddresses]);\n  return whitelistedAddresses;\n};\n\n_s(useWhitelistedAddresses, \"w24DO/mxaL6XbZWymkrDEUstoc0=\", false, function () {\n  return [useFarmAuctionContract];\n});\n\nexport default useWhitelistedAddresses;","map":{"version":3,"sources":["/Users/thomas/Documents/pancake-frontend/src/views/FarmAuction/hooks/useWhitelistedAddresses.ts"],"names":["useState","useEffect","useFarmAuctionContract","getBidderInfo","AUCTION_WHITELISTED_BIDDERS_TO_FETCH","useWhitelistedAddresses","whitelistedAddresses","setWhitelistedAddresses","farmAuctionContract","fetchWhielistedAddresses","bidderAddresses","viewBidders","bidders","map","address","error","console"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,sBAAT,QAAuC,mBAAvC;AACA,SAASC,aAAT,QAA8B,+BAA9B;AAEA,SAASC,oCAAT,QAAqD,QAArD;;AAEA,MAAMC,uBAAuB,GAAG,MAAM;AAAA;;AACpC,QAAM,CAACC,oBAAD,EAAuBC,uBAAvB,IAAkDP,QAAQ,CAAmC,IAAnC,CAAhE;AACA,QAAMQ,mBAAmB,GAAGN,sBAAsB,EAAlD;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMQ,wBAAwB,GAAG,YAAY;AAC3C,UAAI;AACF,cAAM,CAACC,eAAD,IAAoB,MAAMF,mBAAmB,CAACG,WAApB,CAAgC,CAAhC,EAAmCP,oCAAnC,CAAhC;AACA,cAAMQ,OAAO,GAAGF,eAAe,CAACG,GAAhB,CAAqBC,OAAD,IAAaX,aAAa,CAACW,OAAD,CAA9C,CAAhB;AACAP,QAAAA,uBAAuB,CAACK,OAAD,CAAvB;AACD,OAJD,CAIE,OAAOG,KAAP,EAAc;AACdC,QAAAA,OAAO,CAACD,KAAR,CAAc,+CAAd,EAA+DA,KAA/D;AACD;AACF,KARD;;AASA,QAAI,CAACT,oBAAL,EAA2B;AACzBG,MAAAA,wBAAwB;AACzB;AACF,GAbQ,EAaN,CAACD,mBAAD,EAAsBF,oBAAtB,CAbM,CAAT;AAeA,SAAOA,oBAAP;AACD,CApBD;;GAAMD,uB;UAEwBH,sB;;;AAoB9B,eAAeG,uBAAf","sourcesContent":["import { useState, useEffect } from 'react'\nimport { useFarmAuctionContract } from 'hooks/useContract'\nimport { getBidderInfo } from 'config/constants/farmAuctions'\nimport { FarmAuctionBidderConfig } from 'config/constants/types'\nimport { AUCTION_WHITELISTED_BIDDERS_TO_FETCH } from 'config'\n\nconst useWhitelistedAddresses = () => {\n  const [whitelistedAddresses, setWhitelistedAddresses] = useState<FarmAuctionBidderConfig[] | null>(null)\n  const farmAuctionContract = useFarmAuctionContract()\n\n  useEffect(() => {\n    const fetchWhielistedAddresses = async () => {\n      try {\n        const [bidderAddresses] = await farmAuctionContract.viewBidders(0, AUCTION_WHITELISTED_BIDDERS_TO_FETCH)\n        const bidders = bidderAddresses.map((address) => getBidderInfo(address))\n        setWhitelistedAddresses(bidders)\n      } catch (error) {\n        console.error('Failed to fetch list of whitelisted addresses', error)\n      }\n    }\n    if (!whitelistedAddresses) {\n      fetchWhielistedAddresses()\n    }\n  }, [farmAuctionContract, whitelistedAddresses])\n\n  return whitelistedAddresses\n}\n\nexport default useWhitelistedAddresses\n"]},"metadata":{},"sourceType":"module"}