{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport { AuctionStatus } from 'config/constants/types';\nimport { useFarmAuctionContract } from 'hooks/useContract';\nimport { processAuctionData, sortAuctionBidders } from '../helpers';\n\nconst useCongratulateAuctionWinner = (currentAuction, bidders) => {\n  _s();\n\n  const [wonAuction, setWonAuction] = useState(null);\n  const {\n    account\n  } = useWeb3React();\n  const farmAuctionContract = useFarmAuctionContract();\n  useEffect(() => {\n    const checkIfWonPreviousAuction = async previousAuctionId => {\n      const auctionData = await farmAuctionContract.auctions(previousAuctionId);\n      const processedAuctionData = await processAuctionData(previousAuctionId, auctionData);\n      const [auctionBidders] = await farmAuctionContract.viewBidsPerAuction(previousAuctionId, 0, 500);\n      const sortedBidders = sortAuctionBidders(auctionBidders);\n      const {\n        leaderboardThreshold\n      } = processedAuctionData;\n      const winnerAddresses = sortedBidders.filter(bidder => leaderboardThreshold.lte(bidder.amount)).map(bidder => bidder.account);\n\n      if (winnerAddresses.includes(account)) {\n        const accountBidderData = sortedBidders.find(bidder => bidder.account === account);\n        setWonAuction({\n          auction: processedAuctionData,\n          bidderData: accountBidderData\n        });\n      }\n    };\n\n    const winnerAddresses = bidders.filter(bidder => currentAuction.leaderboardThreshold.lte(bidder.amount)).map(bidder => bidder.account);\n    const previousAuctionId = currentAuction.id - 1;\n\n    if (currentAuction.status === AuctionStatus.Closed && winnerAddresses.includes(account)) {\n      const accountBidderData = bidders.find(bidder => bidder.account === account);\n      setWonAuction({\n        auction: currentAuction,\n        bidderData: accountBidderData\n      });\n    } else if (previousAuctionId > 0) {\n      checkIfWonPreviousAuction(previousAuctionId);\n    }\n  }, [currentAuction, bidders, account, farmAuctionContract]);\n  return wonAuction;\n};\n\n_s(useCongratulateAuctionWinner, \"TqrjYyLUe+SC+bBT8nWUyi2JCyU=\", false, function () {\n  return [useWeb3React, useFarmAuctionContract];\n});\n\nexport default useCongratulateAuctionWinner;","map":{"version":3,"sources":["/Users/thomas/Documents/PycharmProjects/pancake-frontend/src/views/FarmAuction/hooks/useCongratulateAuctionWinner.tsx"],"names":["useState","useEffect","useWeb3React","AuctionStatus","useFarmAuctionContract","processAuctionData","sortAuctionBidders","useCongratulateAuctionWinner","currentAuction","bidders","wonAuction","setWonAuction","account","farmAuctionContract","checkIfWonPreviousAuction","previousAuctionId","auctionData","auctions","processedAuctionData","auctionBidders","viewBidsPerAuction","sortedBidders","leaderboardThreshold","winnerAddresses","filter","bidder","lte","amount","map","includes","accountBidderData","find","auction","bidderData","id","status","Closed"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,YAAT,QAA6B,kBAA7B;AACA,SAAkBC,aAAlB,QAA+C,wBAA/C;AACA,SAASC,sBAAT,QAAuC,mBAAvC;AACA,SAASC,kBAAT,EAA6BC,kBAA7B,QAAuD,YAAvD;;AAOA,MAAMC,4BAA4B,GAAG,CAACC,cAAD,EAA0BC,OAA1B,KAA4D;AAAA;;AAC/F,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BX,QAAQ,CAAoB,IAApB,CAA5C;AAEA,QAAM;AAAEY,IAAAA;AAAF,MAAcV,YAAY,EAAhC;AAEA,QAAMW,mBAAmB,GAAGT,sBAAsB,EAAlD;AAEAH,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMa,yBAAyB,GAAG,MAAOC,iBAAP,IAAqC;AACrE,YAAMC,WAAW,GAAG,MAAMH,mBAAmB,CAACI,QAApB,CAA6BF,iBAA7B,CAA1B;AACA,YAAMG,oBAAoB,GAAG,MAAMb,kBAAkB,CAACU,iBAAD,EAAoBC,WAApB,CAArD;AACA,YAAM,CAACG,cAAD,IAAmB,MAAMN,mBAAmB,CAACO,kBAApB,CAAuCL,iBAAvC,EAA0D,CAA1D,EAA6D,GAA7D,CAA/B;AACA,YAAMM,aAAa,GAAGf,kBAAkB,CAACa,cAAD,CAAxC;AACA,YAAM;AAAEG,QAAAA;AAAF,UAA2BJ,oBAAjC;AACA,YAAMK,eAAe,GAAGF,aAAa,CAClCG,MADqB,CACbC,MAAD,IAAYH,oBAAoB,CAACI,GAArB,CAAyBD,MAAM,CAACE,MAAhC,CADE,EAErBC,GAFqB,CAEhBH,MAAD,IAAYA,MAAM,CAACb,OAFF,CAAxB;;AAGA,UAAIW,eAAe,CAACM,QAAhB,CAAyBjB,OAAzB,CAAJ,EAAuC;AACrC,cAAMkB,iBAAiB,GAAGT,aAAa,CAACU,IAAd,CAAoBN,MAAD,IAAYA,MAAM,CAACb,OAAP,KAAmBA,OAAlD,CAA1B;AACAD,QAAAA,aAAa,CAAC;AACZqB,UAAAA,OAAO,EAAEd,oBADG;AAEZe,UAAAA,UAAU,EAAEH;AAFA,SAAD,CAAb;AAID;AACF,KAhBD;;AAkBA,UAAMP,eAAe,GAAGd,OAAO,CAC5Be,MADqB,CACbC,MAAD,IAAYjB,cAAc,CAACc,oBAAf,CAAoCI,GAApC,CAAwCD,MAAM,CAACE,MAA/C,CADE,EAErBC,GAFqB,CAEhBH,MAAD,IAAYA,MAAM,CAACb,OAFF,CAAxB;AAGA,UAAMG,iBAAiB,GAAGP,cAAc,CAAC0B,EAAf,GAAoB,CAA9C;;AACA,QAAI1B,cAAc,CAAC2B,MAAf,KAA0BhC,aAAa,CAACiC,MAAxC,IAAkDb,eAAe,CAACM,QAAhB,CAAyBjB,OAAzB,CAAtD,EAAyF;AACvF,YAAMkB,iBAAiB,GAAGrB,OAAO,CAACsB,IAAR,CAAcN,MAAD,IAAYA,MAAM,CAACb,OAAP,KAAmBA,OAA5C,CAA1B;AACAD,MAAAA,aAAa,CAAC;AACZqB,QAAAA,OAAO,EAAExB,cADG;AAEZyB,QAAAA,UAAU,EAAEH;AAFA,OAAD,CAAb;AAID,KAND,MAMO,IAAIf,iBAAiB,GAAG,CAAxB,EAA2B;AAChCD,MAAAA,yBAAyB,CAACC,iBAAD,CAAzB;AACD;AACF,GAhCQ,EAgCN,CAACP,cAAD,EAAiBC,OAAjB,EAA0BG,OAA1B,EAAmCC,mBAAnC,CAhCM,CAAT;AAkCA,SAAOH,UAAP;AACD,CA1CD;;GAAMH,4B;UAGgBL,Y,EAEQE,sB;;;AAuC9B,eAAeG,4BAAf","sourcesContent":["import { useState, useEffect } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { Auction, AuctionStatus, Bidder } from 'config/constants/types'\nimport { useFarmAuctionContract } from 'hooks/useContract'\nimport { processAuctionData, sortAuctionBidders } from '../helpers'\n\ninterface WonAuction {\n  auction: Auction\n  bidderData: Bidder\n}\n\nconst useCongratulateAuctionWinner = (currentAuction: Auction, bidders: Bidder[]): WonAuction => {\n  const [wonAuction, setWonAuction] = useState<WonAuction | null>(null)\n\n  const { account } = useWeb3React()\n\n  const farmAuctionContract = useFarmAuctionContract()\n\n  useEffect(() => {\n    const checkIfWonPreviousAuction = async (previousAuctionId: number) => {\n      const auctionData = await farmAuctionContract.auctions(previousAuctionId)\n      const processedAuctionData = await processAuctionData(previousAuctionId, auctionData)\n      const [auctionBidders] = await farmAuctionContract.viewBidsPerAuction(previousAuctionId, 0, 500)\n      const sortedBidders = sortAuctionBidders(auctionBidders)\n      const { leaderboardThreshold } = processedAuctionData\n      const winnerAddresses = sortedBidders\n        .filter((bidder) => leaderboardThreshold.lte(bidder.amount))\n        .map((bidder) => bidder.account)\n      if (winnerAddresses.includes(account)) {\n        const accountBidderData = sortedBidders.find((bidder) => bidder.account === account)\n        setWonAuction({\n          auction: processedAuctionData,\n          bidderData: accountBidderData,\n        })\n      }\n    }\n\n    const winnerAddresses = bidders\n      .filter((bidder) => currentAuction.leaderboardThreshold.lte(bidder.amount))\n      .map((bidder) => bidder.account)\n    const previousAuctionId = currentAuction.id - 1\n    if (currentAuction.status === AuctionStatus.Closed && winnerAddresses.includes(account)) {\n      const accountBidderData = bidders.find((bidder) => bidder.account === account)\n      setWonAuction({\n        auction: currentAuction,\n        bidderData: accountBidderData,\n      })\n    } else if (previousAuctionId > 0) {\n      checkIfWonPreviousAuction(previousAuctionId)\n    }\n  }, [currentAuction, bidders, account, farmAuctionContract])\n\n  return wonAuction\n}\n\nexport default useCongratulateAuctionWinner\n"]},"metadata":{},"sourceType":"module"}