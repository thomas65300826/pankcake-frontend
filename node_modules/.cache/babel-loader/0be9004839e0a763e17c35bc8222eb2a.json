{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$(),\n    _s5 = $RefreshSig$(),\n    _s6 = $RefreshSig$(),\n    _s7 = $RefreshSig$(),\n    _s8 = $RefreshSig$(),\n    _s9 = $RefreshSig$(),\n    _s10 = $RefreshSig$(),\n    _s11 = $RefreshSig$(),\n    _s12 = $RefreshSig$(),\n    _s13 = $RefreshSig$(),\n    _s14 = $RefreshSig$(),\n    _s15 = $RefreshSig$(),\n    _s16 = $RefreshSig$(),\n    _s17 = $RefreshSig$(),\n    _s18 = $RefreshSig$(),\n    _s19 = $RefreshSig$(),\n    _s20 = $RefreshSig$(),\n    _s21 = $RefreshSig$(),\n    _s22 = $RefreshSig$(),\n    _s23 = $RefreshSig$();\n\nimport { useMemo } from 'react';\nimport { useSelector } from 'react-redux';\nimport { ethers } from 'ethers';\nimport { minBy, orderBy } from 'lodash';\nimport { parseBigNumberObj } from './helpers'; // /!\\\n// Don't add anything here. These hooks will be moved the the predictions folder\n// Predictions\n\nexport const useGetRounds = () => {\n  _s();\n\n  const rounds = useSelector(state => state.predictions.rounds);\n  return Object.keys(rounds).reduce((accum, epoch) => {\n    return { ...accum,\n      [epoch]: parseBigNumberObj(rounds[epoch])\n    };\n  }, {});\n};\n\n_s(useGetRounds, \"NzcuGjY7/e8ANpMudDUPNEr2P38=\", false, function () {\n  return [useSelector];\n});\n\nexport const useGetRound = epoch => {\n  _s2();\n\n  const round = useSelector(state => state.predictions.rounds[epoch]);\n  return parseBigNumberObj(round);\n};\n\n_s2(useGetRound, \"I9yr3H2jZEg2pVJJxnbwqUm8+Vg=\", false, function () {\n  return [useSelector];\n});\n\nexport const useGetSortedRounds = () => {\n  _s3();\n\n  const roundData = useGetRounds();\n  return orderBy(Object.values(roundData), ['epoch'], ['asc']);\n};\n\n_s3(useGetSortedRounds, \"jFCo8rqHdnklGdNQF/awTvojkG0=\", false, function () {\n  return [useGetRounds];\n});\n\nexport const useGetBetByEpoch = (account, epoch) => {\n  _s4();\n\n  const bets = useSelector(state => state.predictions.ledgers);\n\n  if (!bets[account]) {\n    return null;\n  }\n\n  if (!bets[account][epoch]) {\n    return null;\n  }\n\n  return parseBigNumberObj(bets[account][epoch]);\n};\n\n_s4(useGetBetByEpoch, \"l2hU2dIovtccD4bBSsew9DdDw24=\", false, function () {\n  return [useSelector];\n});\n\nexport const useGetIsClaimable = epoch => {\n  _s5();\n\n  const claimableStatuses = useSelector(state => state.predictions.claimableStatuses);\n  return claimableStatuses[epoch] || false;\n};\n/**\n * Used to get the range of rounds to poll for\n */\n\n_s5(useGetIsClaimable, \"w8QNveyYtGfi9T0Sqff9LkqaoO0=\", false, function () {\n  return [useSelector];\n});\n\nexport const useGetEarliestEpoch = () => {\n  _s6();\n\n  return useSelector(state => {\n    const earliestRound = minBy(Object.values(state.predictions.rounds), 'epoch');\n    return earliestRound === null || earliestRound === void 0 ? void 0 : earliestRound.epoch;\n  });\n};\n\n_s6(useGetEarliestEpoch, \"nKHvd/QB6hocKEk0fSJoSYcCyR8=\", false, function () {\n  return [useSelector];\n});\n\nexport const useIsHistoryPaneOpen = () => {\n  _s7();\n\n  return useSelector(state => state.predictions.isHistoryPaneOpen);\n};\n\n_s7(useIsHistoryPaneOpen, \"nKHvd/QB6hocKEk0fSJoSYcCyR8=\", false, function () {\n  return [useSelector];\n});\n\nexport const useIsChartPaneOpen = () => {\n  _s8();\n\n  return useSelector(state => state.predictions.isChartPaneOpen);\n};\n\n_s8(useIsChartPaneOpen, \"nKHvd/QB6hocKEk0fSJoSYcCyR8=\", false, function () {\n  return [useSelector];\n});\n\nexport const useGetCurrentEpoch = () => {\n  _s9();\n\n  return useSelector(state => state.predictions.currentEpoch);\n};\n\n_s9(useGetCurrentEpoch, \"nKHvd/QB6hocKEk0fSJoSYcCyR8=\", false, function () {\n  return [useSelector];\n});\n\nexport const useGetIntervalBlocks = () => {\n  _s10();\n\n  return useSelector(state => state.predictions.intervalBlocks);\n};\n\n_s10(useGetIntervalBlocks, \"nKHvd/QB6hocKEk0fSJoSYcCyR8=\", false, function () {\n  return [useSelector];\n});\n\nexport const useGetBufferBlocks = () => {\n  _s11();\n\n  return useSelector(state => state.predictions.bufferBlocks);\n};\n\n_s11(useGetBufferBlocks, \"nKHvd/QB6hocKEk0fSJoSYcCyR8=\", false, function () {\n  return [useSelector];\n});\n\nexport const useGetTotalIntervalBlocks = () => {\n  _s12();\n\n  const intervalBlocks = useGetIntervalBlocks();\n  const bufferBlocks = useGetBufferBlocks();\n  return intervalBlocks + bufferBlocks;\n};\n\n_s12(useGetTotalIntervalBlocks, \"Tu40sOrNdwBfiHoai7qebXljDAY=\", false, function () {\n  return [useGetIntervalBlocks, useGetBufferBlocks];\n});\n\nexport const useGetCurrentRound = () => {\n  _s13();\n\n  const currentEpoch = useGetCurrentEpoch();\n  const rounds = useGetSortedRounds();\n  return rounds.find(round => round.epoch === currentEpoch);\n};\n\n_s13(useGetCurrentRound, \"cJlTwdlLYEKE4Qc5JxH6Xhb/WXY=\", false, function () {\n  return [useGetCurrentEpoch, useGetSortedRounds];\n});\n\nexport const useGetPredictionsStatus = () => {\n  _s14();\n\n  return useSelector(state => state.predictions.status);\n};\n\n_s14(useGetPredictionsStatus, \"nKHvd/QB6hocKEk0fSJoSYcCyR8=\", false, function () {\n  return [useSelector];\n});\n\nexport const useGetHistoryFilter = () => {\n  _s15();\n\n  return useSelector(state => state.predictions.historyFilter);\n};\n\n_s15(useGetHistoryFilter, \"nKHvd/QB6hocKEk0fSJoSYcCyR8=\", false, function () {\n  return [useSelector];\n});\n\nexport const useGetCurrentRoundBlockNumber = () => {\n  _s16();\n\n  return useSelector(state => state.predictions.currentRoundStartBlockNumber);\n};\n\n_s16(useGetCurrentRoundBlockNumber, \"nKHvd/QB6hocKEk0fSJoSYcCyR8=\", false, function () {\n  return [useSelector];\n});\n\nexport const useGetMinBetAmount = () => {\n  _s17();\n\n  const minBetAmount = useSelector(state => state.predictions.minBetAmount);\n  return useMemo(() => ethers.BigNumber.from(minBetAmount), [minBetAmount]);\n};\n\n_s17(useGetMinBetAmount, \"0dRfTS7F/4osBkgeEhhyeRmd26g=\", false, function () {\n  return [useSelector];\n});\n\nexport const useGetRewardRate = () => {\n  _s18();\n\n  const rewardRate = useSelector(state => state.predictions.rewardRate);\n  return rewardRate / 100;\n};\n\n_s18(useGetRewardRate, \"lTwF82Fzexvd7Gewn8ORgBHi/OY=\", false, function () {\n  return [useSelector];\n});\n\nexport const useGetIsFetchingHistory = () => {\n  _s19();\n\n  return useSelector(state => state.predictions.isFetchingHistory);\n};\n\n_s19(useGetIsFetchingHistory, \"nKHvd/QB6hocKEk0fSJoSYcCyR8=\", false, function () {\n  return [useSelector];\n});\n\nexport const useGetHistory = () => {\n  _s20();\n\n  return useSelector(state => state.predictions.history);\n};\n\n_s20(useGetHistory, \"nKHvd/QB6hocKEk0fSJoSYcCyR8=\", false, function () {\n  return [useSelector];\n});\n\nexport const useGetHistoryByAccount = account => {\n  _s21();\n\n  const bets = useGetHistory();\n  return bets ? bets[account] : [];\n};\n\n_s21(useGetHistoryByAccount, \"Yrp7yExhLjDp2kAaHnofs1ZdL7U=\", false, function () {\n  return [useGetHistory];\n});\n\nexport const useGetLedgerByRoundId = (account, roundId) => {\n  _s22();\n\n  const ledgers = useSelector(state => state.predictions.ledgers);\n\n  if (!ledgers[account]) {\n    return null;\n  }\n\n  if (!ledgers[account][roundId]) {\n    return null;\n  }\n\n  return ledgers[account][roundId];\n};\n\n_s22(useGetLedgerByRoundId, \"SiwK0RMfROek9ZWxxfWi0Br8aa8=\", false, function () {\n  return [useSelector];\n});\n\nexport const useGetLastOraclePrice = () => {\n  _s23();\n\n  const lastOraclePrice = useSelector(state => state.predictions.lastOraclePrice);\n  return useMemo(() => {\n    return ethers.BigNumber.from(lastOraclePrice);\n  }, [lastOraclePrice]);\n};\n\n_s23(useGetLastOraclePrice, \"sP8ZCewbYE0zHEHJigP6zSqhRXs=\", false, function () {\n  return [useSelector];\n});","map":{"version":3,"sources":["/Users/thomas/Documents/PycharmProjects/pancake-frontend/src/state/predictions/hooks.ts"],"names":["useMemo","useSelector","ethers","minBy","orderBy","parseBigNumberObj","useGetRounds","rounds","state","predictions","Object","keys","reduce","accum","epoch","useGetRound","round","useGetSortedRounds","roundData","values","useGetBetByEpoch","account","bets","ledgers","useGetIsClaimable","claimableStatuses","useGetEarliestEpoch","earliestRound","useIsHistoryPaneOpen","isHistoryPaneOpen","useIsChartPaneOpen","isChartPaneOpen","useGetCurrentEpoch","currentEpoch","useGetIntervalBlocks","intervalBlocks","useGetBufferBlocks","bufferBlocks","useGetTotalIntervalBlocks","useGetCurrentRound","find","useGetPredictionsStatus","status","useGetHistoryFilter","historyFilter","useGetCurrentRoundBlockNumber","currentRoundStartBlockNumber","useGetMinBetAmount","minBetAmount","BigNumber","from","useGetRewardRate","rewardRate","useGetIsFetchingHistory","isFetchingHistory","useGetHistory","history","useGetHistoryByAccount","useGetLedgerByRoundId","roundId","useGetLastOraclePrice","lastOraclePrice"],"mappings":"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","sourcesContent":["import { useMemo } from 'react'\nimport { useSelector } from 'react-redux'\nimport { ethers } from 'ethers'\nimport { minBy, orderBy } from 'lodash'\nimport { State, NodeRound, ReduxNodeLedger, NodeLedger, ReduxNodeRound } from '../types'\nimport { parseBigNumberObj } from './helpers'\n\n// /!\\\n// Don't add anything here. These hooks will be moved the the predictions folder\n\n// Predictions\nexport const useGetRounds = () => {\n  const rounds = useSelector((state: State) => state.predictions.rounds)\n  return Object.keys(rounds).reduce((accum, epoch) => {\n    return {\n      ...accum,\n      [epoch]: parseBigNumberObj<ReduxNodeRound, NodeRound>(rounds[epoch]),\n    }\n  }, {}) as { [key: string]: NodeRound }\n}\n\nexport const useGetRound = (epoch: number) => {\n  const round = useSelector((state: State) => state.predictions.rounds[epoch])\n  return parseBigNumberObj<ReduxNodeRound, NodeRound>(round)\n}\n\nexport const useGetSortedRounds = () => {\n  const roundData = useGetRounds()\n  return orderBy(Object.values(roundData), ['epoch'], ['asc'])\n}\n\nexport const useGetBetByEpoch = (account: string, epoch: number) => {\n  const bets = useSelector((state: State) => state.predictions.ledgers)\n\n  if (!bets[account]) {\n    return null\n  }\n\n  if (!bets[account][epoch]) {\n    return null\n  }\n\n  return parseBigNumberObj<ReduxNodeLedger, NodeLedger>(bets[account][epoch])\n}\n\nexport const useGetIsClaimable = (epoch) => {\n  const claimableStatuses = useSelector((state: State) => state.predictions.claimableStatuses)\n  return claimableStatuses[epoch] || false\n}\n\n/**\n * Used to get the range of rounds to poll for\n */\nexport const useGetEarliestEpoch = () => {\n  return useSelector((state: State) => {\n    const earliestRound = minBy(Object.values(state.predictions.rounds), 'epoch')\n    return earliestRound?.epoch\n  })\n}\n\nexport const useIsHistoryPaneOpen = () => {\n  return useSelector((state: State) => state.predictions.isHistoryPaneOpen)\n}\n\nexport const useIsChartPaneOpen = () => {\n  return useSelector((state: State) => state.predictions.isChartPaneOpen)\n}\n\nexport const useGetCurrentEpoch = () => {\n  return useSelector((state: State) => state.predictions.currentEpoch)\n}\n\nexport const useGetIntervalBlocks = () => {\n  return useSelector((state: State) => state.predictions.intervalBlocks)\n}\n\nexport const useGetBufferBlocks = () => {\n  return useSelector((state: State) => state.predictions.bufferBlocks)\n}\n\nexport const useGetTotalIntervalBlocks = () => {\n  const intervalBlocks = useGetIntervalBlocks()\n  const bufferBlocks = useGetBufferBlocks()\n  return intervalBlocks + bufferBlocks\n}\n\nexport const useGetCurrentRound = () => {\n  const currentEpoch = useGetCurrentEpoch()\n  const rounds = useGetSortedRounds()\n  return rounds.find((round) => round.epoch === currentEpoch)\n}\n\nexport const useGetPredictionsStatus = () => {\n  return useSelector((state: State) => state.predictions.status)\n}\n\nexport const useGetHistoryFilter = () => {\n  return useSelector((state: State) => state.predictions.historyFilter)\n}\n\nexport const useGetCurrentRoundBlockNumber = () => {\n  return useSelector((state: State) => state.predictions.currentRoundStartBlockNumber)\n}\n\nexport const useGetMinBetAmount = () => {\n  const minBetAmount = useSelector((state: State) => state.predictions.minBetAmount)\n  return useMemo(() => ethers.BigNumber.from(minBetAmount), [minBetAmount])\n}\n\nexport const useGetRewardRate = () => {\n  const rewardRate = useSelector((state: State) => state.predictions.rewardRate)\n  return rewardRate / 100\n}\n\nexport const useGetIsFetchingHistory = () => {\n  return useSelector((state: State) => state.predictions.isFetchingHistory)\n}\n\nexport const useGetHistory = () => {\n  return useSelector((state: State) => state.predictions.history)\n}\n\nexport const useGetHistoryByAccount = (account: string) => {\n  const bets = useGetHistory()\n  return bets ? bets[account] : []\n}\n\nexport const useGetLedgerByRoundId = (account: string, roundId: string) => {\n  const ledgers = useSelector((state: State) => state.predictions.ledgers)\n\n  if (!ledgers[account]) {\n    return null\n  }\n\n  if (!ledgers[account][roundId]) {\n    return null\n  }\n\n  return ledgers[account][roundId]\n}\n\nexport const useGetLastOraclePrice = () => {\n  const lastOraclePrice = useSelector((state: State) => state.predictions.lastOraclePrice)\n  return useMemo(() => {\n    return ethers.BigNumber.from(lastOraclePrice)\n  }, [lastOraclePrice])\n}\n"]},"metadata":{},"sourceType":"module"}