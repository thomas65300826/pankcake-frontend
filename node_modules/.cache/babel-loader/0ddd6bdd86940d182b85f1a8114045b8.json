{"ast":null,"code":"var _jsxFileName = \"/Users/thomas/Documents/pancake-frontend/src/components/Menu/UserMenu/CopyAddress.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Box, CopyIcon, Flex, IconButton } from '@pancakeswap/uikit';\nimport styled from 'styled-components';\nimport { useTranslation } from 'contexts/Localization';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Wrapper = styled(Flex)`\n  align-items: center;\n  background-color: ${({\n  theme\n}) => theme.colors.dropdown};\n  border-radius: 16px;\n  position: relative;\n`;\n_c = Wrapper;\nconst Address = styled.div`\n  flex: 1;\n  position: relative;\n  padding-left: 16px;\n\n  & > input {\n    background: transparent;\n    border: 0;\n    color: ${({\n  theme\n}) => theme.colors.text};\n    display: block;\n    font-weight: 600;\n    font-size: 16px;\n    padding: 0;\n    width: 100%;\n\n    &:focus {\n      outline: 0;\n    }\n  }\n\n  &:after {\n    background: linear-gradient(\n      to right,\n      ${({\n  theme\n}) => theme.colors.background}00,\n      ${({\n  theme\n}) => theme.colors.background}E6\n    );\n    content: '';\n    height: 100%;\n    pointer-events: none;\n    position: absolute;\n    right: 0;\n    top: 0;\n    width: 40px;\n  }\n`;\n_c2 = Address;\nconst Tooltip = styled.div`\n  display: ${({\n  isTooltipDisplayed\n}) => isTooltipDisplayed ? 'inline-block' : 'none'};\n  position: absolute;\n  padding: 8px;\n  top: -38px;\n  right: 0;\n  text-align: center;\n  background-color: ${({\n  theme\n}) => theme.colors.contrast};\n  color: ${({\n  theme\n}) => theme.colors.invertedContrast};\n  border-radius: 16px;\n  opacity: 0.7;\n  width: 100px;\n`;\n_c3 = Tooltip;\n\nconst CopyAddress = ({\n  account,\n  ...props\n}) => {\n  _s();\n\n  const [isTooltipDisplayed, setIsTooltipDisplayed] = useState(false);\n  const {\n    t\n  } = useTranslation();\n\n  const copyAddress = () => {\n    if (navigator.clipboard && navigator.permissions) {\n      navigator.clipboard.writeText(account).then(() => displayTooltip());\n    } else if (document.queryCommandSupported('copy')) {\n      const ele = document.createElement('textarea');\n      ele.value = account;\n      document.body.appendChild(ele);\n      ele.select();\n      document.execCommand('copy');\n      document.body.removeChild(ele);\n      displayTooltip();\n    }\n  };\n\n  function displayTooltip() {\n    setIsTooltipDisplayed(true);\n    setTimeout(() => {\n      setIsTooltipDisplayed(false);\n    }, 1000);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    position: \"relative\",\n    ...props,\n    children: [/*#__PURE__*/_jsxDEV(Wrapper, {\n      children: [/*#__PURE__*/_jsxDEV(Address, {\n        title: account,\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          readOnly: true,\n          value: account\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n        variant: \"text\",\n        onClick: copyAddress,\n        children: /*#__PURE__*/_jsxDEV(CopyIcon, {\n          color: \"primary\",\n          width: \"24px\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n      isTooltipDisplayed: isTooltipDisplayed,\n      children: t('Copied')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CopyAddress, \"JXVD6HuG7Im/tl4h6wkUhvr+3bc=\", false, function () {\n  return [useTranslation];\n});\n\n_c4 = CopyAddress;\nexport default CopyAddress;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"Wrapper\");\n$RefreshReg$(_c2, \"Address\");\n$RefreshReg$(_c3, \"Tooltip\");\n$RefreshReg$(_c4, \"CopyAddress\");","map":{"version":3,"sources":["/Users/thomas/Documents/pancake-frontend/src/components/Menu/UserMenu/CopyAddress.tsx"],"names":["React","useState","Box","CopyIcon","Flex","IconButton","styled","useTranslation","Wrapper","theme","colors","dropdown","Address","div","text","background","Tooltip","isTooltipDisplayed","contrast","invertedContrast","CopyAddress","account","props","setIsTooltipDisplayed","t","copyAddress","navigator","clipboard","permissions","writeText","then","displayTooltip","document","queryCommandSupported","ele","createElement","value","body","appendChild","select","execCommand","removeChild","setTimeout"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport { Box, CopyIcon, Flex, FlexProps, IconButton } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface CopyAddressProps extends FlexProps {\n  account: string\n}\n\nconst Wrapper = styled(Flex)`\n  align-items: center;\n  background-color: ${({ theme }) => theme.colors.dropdown};\n  border-radius: 16px;\n  position: relative;\n`\n\nconst Address = styled.div`\n  flex: 1;\n  position: relative;\n  padding-left: 16px;\n\n  & > input {\n    background: transparent;\n    border: 0;\n    color: ${({ theme }) => theme.colors.text};\n    display: block;\n    font-weight: 600;\n    font-size: 16px;\n    padding: 0;\n    width: 100%;\n\n    &:focus {\n      outline: 0;\n    }\n  }\n\n  &:after {\n    background: linear-gradient(\n      to right,\n      ${({ theme }) => theme.colors.background}00,\n      ${({ theme }) => theme.colors.background}E6\n    );\n    content: '';\n    height: 100%;\n    pointer-events: none;\n    position: absolute;\n    right: 0;\n    top: 0;\n    width: 40px;\n  }\n`\n\nconst Tooltip = styled.div<{ isTooltipDisplayed: boolean }>`\n  display: ${({ isTooltipDisplayed }) => (isTooltipDisplayed ? 'inline-block' : 'none')};\n  position: absolute;\n  padding: 8px;\n  top: -38px;\n  right: 0;\n  text-align: center;\n  background-color: ${({ theme }) => theme.colors.contrast};\n  color: ${({ theme }) => theme.colors.invertedContrast};\n  border-radius: 16px;\n  opacity: 0.7;\n  width: 100px;\n`\n\nconst CopyAddress: React.FC<CopyAddressProps> = ({ account, ...props }) => {\n  const [isTooltipDisplayed, setIsTooltipDisplayed] = useState(false)\n  const { t } = useTranslation()\n\n  const copyAddress = () => {\n    if (navigator.clipboard && navigator.permissions) {\n      navigator.clipboard.writeText(account).then(() => displayTooltip())\n    } else if (document.queryCommandSupported('copy')) {\n      const ele = document.createElement('textarea')\n      ele.value = account\n      document.body.appendChild(ele)\n      ele.select()\n      document.execCommand('copy')\n      document.body.removeChild(ele)\n      displayTooltip()\n    }\n  }\n\n  function displayTooltip() {\n    setIsTooltipDisplayed(true)\n    setTimeout(() => {\n      setIsTooltipDisplayed(false)\n    }, 1000)\n  }\n\n  return (\n    <Box position=\"relative\" {...props}>\n      <Wrapper>\n        <Address title={account}>\n          <input type=\"text\" readOnly value={account} />\n        </Address>\n        <IconButton variant=\"text\" onClick={copyAddress}>\n          <CopyIcon color=\"primary\" width=\"24px\" />\n        </IconButton>\n      </Wrapper>\n      <Tooltip isTooltipDisplayed={isTooltipDisplayed}>{t('Copied')}</Tooltip>\n    </Box>\n  )\n}\n\nexport default CopyAddress\n"]},"metadata":{},"sourceType":"module"}