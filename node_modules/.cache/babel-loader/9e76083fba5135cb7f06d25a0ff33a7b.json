{"ast":null,"code":"var _jsxFileName = \"/Users/thomas/Documents/PycharmProjects/pancake-frontend/src/components/Balance.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef } from 'react';\nimport CountUp from 'react-countup';\nimport { Text } from '@pancakeswap/uikit';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Balance = ({\n  value,\n  color = 'text',\n  decimals = 3,\n  isDisabled = false,\n  unit,\n  prefix,\n  onClick,\n  ...props\n}) => {\n  _s();\n\n  const previousValue = useRef(0);\n  useEffect(() => {\n    previousValue.current = value;\n  }, [value]);\n  return /*#__PURE__*/_jsxDEV(Text, {\n    color: isDisabled ? 'textDisabled' : color,\n    onClick: onClick,\n    ...props,\n    children: /*#__PURE__*/_jsxDEV(CountUp, {\n      start: previousValue.current,\n      end: value,\n      prefix: prefix,\n      suffix: unit,\n      decimals: decimals,\n      duration: 1,\n      separator: \",\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Balance, \"7sxqKrCAfH7mvAmhUempIz0vd8c=\");\n\n_c = Balance;\nexport default Balance;\n\nvar _c;\n\n$RefreshReg$(_c, \"Balance\");","map":{"version":3,"sources":["/Users/thomas/Documents/PycharmProjects/pancake-frontend/src/components/Balance.tsx"],"names":["React","useEffect","useRef","CountUp","Text","Balance","value","color","decimals","isDisabled","unit","prefix","onClick","props","previousValue","current"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,QAAyC,OAAzC;AACA,OAAOC,OAAP,MAAoB,eAApB;AACA,SAASC,IAAT,QAAgC,oBAAhC;;;AAWA,MAAMC,OAA+B,GAAG,CAAC;AACvCC,EAAAA,KADuC;AAEvCC,EAAAA,KAAK,GAAG,MAF+B;AAGvCC,EAAAA,QAAQ,GAAG,CAH4B;AAIvCC,EAAAA,UAAU,GAAG,KAJ0B;AAKvCC,EAAAA,IALuC;AAMvCC,EAAAA,MANuC;AAOvCC,EAAAA,OAPuC;AAQvC,KAAGC;AARoC,CAAD,KASlC;AAAA;;AACJ,QAAMC,aAAa,GAAGZ,MAAM,CAAC,CAAD,CAA5B;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACda,IAAAA,aAAa,CAACC,OAAd,GAAwBT,KAAxB;AACD,GAFQ,EAEN,CAACA,KAAD,CAFM,CAAT;AAIA,sBACE,QAAC,IAAD;AAAM,IAAA,KAAK,EAAEG,UAAU,GAAG,cAAH,GAAoBF,KAA3C;AAAkD,IAAA,OAAO,EAAEK,OAA3D;AAAA,OAAwEC,KAAxE;AAAA,2BACE,QAAC,OAAD;AACE,MAAA,KAAK,EAAEC,aAAa,CAACC,OADvB;AAEE,MAAA,GAAG,EAAET,KAFP;AAGE,MAAA,MAAM,EAAEK,MAHV;AAIE,MAAA,MAAM,EAAED,IAJV;AAKE,MAAA,QAAQ,EAAEF,QALZ;AAME,MAAA,QAAQ,EAAE,CANZ;AAOE,MAAA,SAAS,EAAC;AAPZ;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAaD,CA7BD;;GAAMH,O;;KAAAA,O;AA+BN,eAAeA,OAAf","sourcesContent":["import React, { useEffect, useRef } from 'react'\nimport CountUp from 'react-countup'\nimport { Text, TextProps } from '@pancakeswap/uikit'\n\ninterface BalanceProps extends TextProps {\n  value: number\n  decimals?: number\n  unit?: string\n  isDisabled?: boolean\n  prefix?: string\n  onClick?: (event: React.MouseEvent<HTMLElement>) => void\n}\n\nconst Balance: React.FC<BalanceProps> = ({\n  value,\n  color = 'text',\n  decimals = 3,\n  isDisabled = false,\n  unit,\n  prefix,\n  onClick,\n  ...props\n}) => {\n  const previousValue = useRef(0)\n\n  useEffect(() => {\n    previousValue.current = value\n  }, [value])\n\n  return (\n    <Text color={isDisabled ? 'textDisabled' : color} onClick={onClick} {...props}>\n      <CountUp\n        start={previousValue.current}\n        end={value}\n        prefix={prefix}\n        suffix={unit}\n        decimals={decimals}\n        duration={1}\n        separator=\",\"\n      />\n    </Text>\n  )\n}\n\nexport default Balance\n"]},"metadata":{},"sourceType":"module"}