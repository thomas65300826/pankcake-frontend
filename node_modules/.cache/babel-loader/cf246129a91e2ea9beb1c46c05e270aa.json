{"ast":null,"code":"/* eslint-disable no-param-reassign */\nimport { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { LotteryStatus } from 'config/constants/types';\nimport { fetchLottery, fetchCurrentLotteryIdAndMaxBuy } from './helpers';\nimport getLotteriesData from './getLotteriesData';\nimport getUserLotteryData from './getUserLotteryData';\nconst initialState = {\n  currentLotteryId: null,\n  isTransitioning: false,\n  maxNumberTicketsPerBuyOrClaim: null,\n  currentRound: {\n    isLoading: true,\n    lotteryId: null,\n    status: LotteryStatus.PENDING,\n    startTime: '',\n    endTime: '',\n    priceTicketInCake: '',\n    discountDivisor: '',\n    treasuryFee: '',\n    firstTicketId: '',\n    lastTicketId: '',\n    amountCollectedInCake: '',\n    finalNumber: null,\n    cakePerBracket: [],\n    countWinnersPerBracket: [],\n    rewardsBreakdown: [],\n    userTickets: {\n      isLoading: true,\n      tickets: []\n    }\n  },\n  lotteriesData: null,\n  userLotteryData: {\n    account: '',\n    totalCake: '',\n    totalTickets: '',\n    rounds: []\n  }\n};\nexport const fetchCurrentLottery = createAsyncThunk('lottery/fetchCurrentLottery', async ({\n  currentLotteryId\n}) => {\n  const lotteryInfo = await fetchLottery(currentLotteryId);\n  return lotteryInfo;\n});\nexport const fetchCurrentLotteryId = createAsyncThunk('lottery/fetchCurrentLotteryId', async () => {\n  const currentIdAndMaxBuy = await fetchCurrentLotteryIdAndMaxBuy();\n  return currentIdAndMaxBuy;\n});\nexport const fetchUserTicketsAndLotteries = createAsyncThunk('lottery/fetchUserTicketsAndLotteries', async ({\n  account,\n  currentLotteryId\n}) => {\n  var _userLotteriesRes$rou;\n\n  const userLotteriesRes = await getUserLotteryData(account, currentLotteryId);\n  const userParticipationInCurrentRound = (_userLotteriesRes$rou = userLotteriesRes.rounds) === null || _userLotteriesRes$rou === void 0 ? void 0 : _userLotteriesRes$rou.find(round => round.lotteryId === currentLotteryId);\n  const userTickets = userParticipationInCurrentRound === null || userParticipationInCurrentRound === void 0 ? void 0 : userParticipationInCurrentRound.tickets; // User has not bought tickets for the current lottery, or there has been an error\n\n  if (!userTickets || userTickets.length === 0) {\n    return {\n      userTickets: null,\n      userLotteries: userLotteriesRes\n    };\n  }\n\n  return {\n    userTickets,\n    userLotteries: userLotteriesRes\n  };\n});\nexport const fetchPublicLotteries = createAsyncThunk('lottery/fetchPublicLotteries', async ({\n  currentLotteryId\n}) => {\n  const lotteries = await getLotteriesData(currentLotteryId);\n  return lotteries;\n});\nexport const fetchUserLotteries = createAsyncThunk('lottery/fetchUserLotteries', async ({\n  account,\n  currentLotteryId\n}) => {\n  const userLotteries = await getUserLotteryData(account, currentLotteryId);\n  return userLotteries;\n});\nexport const setLotteryIsTransitioning = createAsyncThunk(`lottery/setIsTransitioning`, async ({\n  isTransitioning\n}) => {\n  return {\n    isTransitioning\n  };\n});\nexport const LotterySlice = createSlice({\n  name: 'Lottery',\n  initialState,\n  reducers: {\n    setLotteryPublicData: (state, action) => {\n      state = action.payload;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchCurrentLottery.fulfilled, (state, action) => {\n      state.currentRound = { ...state.currentRound,\n        ...action.payload\n      };\n    });\n    builder.addCase(fetchCurrentLotteryId.fulfilled, (state, action) => {\n      state.currentLotteryId = action.payload.currentLotteryId;\n      state.maxNumberTicketsPerBuyOrClaim = action.payload.maxNumberTicketsPerBuyOrClaim;\n    });\n    builder.addCase(fetchUserTicketsAndLotteries.fulfilled, (state, action) => {\n      state.currentRound.userTickets.isLoading = false;\n      state.currentRound.userTickets.tickets = action.payload.userTickets;\n      state.userLotteryData = action.payload.userLotteries;\n    });\n    builder.addCase(fetchPublicLotteries.fulfilled, (state, action) => {\n      state.lotteriesData = action.payload;\n    });\n    builder.addCase(fetchUserLotteries.fulfilled, (state, action) => {\n      state.userLotteryData = action.payload;\n    });\n    builder.addCase(setLotteryIsTransitioning.fulfilled, (state, action) => {\n      state.isTransitioning = action.payload.isTransitioning;\n    });\n  }\n}); // Actions\n\nexport const {\n  setLotteryPublicData\n} = LotterySlice.actions;\nexport default LotterySlice.reducer;","map":{"version":3,"sources":["/Users/thomas/Documents/pancake-frontend/pankcake-frontend/src/state/lottery/index.ts"],"names":["createAsyncThunk","createSlice","LotteryStatus","fetchLottery","fetchCurrentLotteryIdAndMaxBuy","getLotteriesData","getUserLotteryData","initialState","currentLotteryId","isTransitioning","maxNumberTicketsPerBuyOrClaim","currentRound","isLoading","lotteryId","status","PENDING","startTime","endTime","priceTicketInCake","discountDivisor","treasuryFee","firstTicketId","lastTicketId","amountCollectedInCake","finalNumber","cakePerBracket","countWinnersPerBracket","rewardsBreakdown","userTickets","tickets","lotteriesData","userLotteryData","account","totalCake","totalTickets","rounds","fetchCurrentLottery","lotteryInfo","fetchCurrentLotteryId","currentIdAndMaxBuy","fetchUserTicketsAndLotteries","userLotteriesRes","userParticipationInCurrentRound","find","round","length","userLotteries","fetchPublicLotteries","lotteries","fetchUserLotteries","setLotteryIsTransitioning","LotterySlice","name","reducers","setLotteryPublicData","state","action","payload","extraReducers","builder","addCase","fulfilled","actions","reducer"],"mappings":"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","sourcesContent":["/* eslint-disable no-param-reassign */\nimport { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { LotteryTicket, LotteryStatus } from 'config/constants/types'\nimport { LotteryState, LotteryRoundGraphEntity, LotteryUserGraphEntity, LotteryResponse } from 'state/types'\nimport { fetchLottery, fetchCurrentLotteryIdAndMaxBuy } from './helpers'\nimport getLotteriesData from './getLotteriesData'\nimport getUserLotteryData from './getUserLotteryData'\n\ninterface PublicLotteryData {\n  currentLotteryId: string\n  maxNumberTicketsPerBuyOrClaim: string\n}\n\nconst initialState: LotteryState = {\n  currentLotteryId: null,\n  isTransitioning: false,\n  maxNumberTicketsPerBuyOrClaim: null,\n  currentRound: {\n    isLoading: true,\n    lotteryId: null,\n    status: LotteryStatus.PENDING,\n    startTime: '',\n    endTime: '',\n    priceTicketInCake: '',\n    discountDivisor: '',\n    treasuryFee: '',\n    firstTicketId: '',\n    lastTicketId: '',\n    amountCollectedInCake: '',\n    finalNumber: null,\n    cakePerBracket: [],\n    countWinnersPerBracket: [],\n    rewardsBreakdown: [],\n    userTickets: {\n      isLoading: true,\n      tickets: [],\n    },\n  },\n  lotteriesData: null,\n  userLotteryData: { account: '', totalCake: '', totalTickets: '', rounds: [] },\n}\n\nexport const fetchCurrentLottery = createAsyncThunk<LotteryResponse, { currentLotteryId: string }>(\n  'lottery/fetchCurrentLottery',\n  async ({ currentLotteryId }) => {\n    const lotteryInfo = await fetchLottery(currentLotteryId)\n    return lotteryInfo\n  },\n)\n\nexport const fetchCurrentLotteryId = createAsyncThunk<PublicLotteryData>('lottery/fetchCurrentLotteryId', async () => {\n  const currentIdAndMaxBuy = await fetchCurrentLotteryIdAndMaxBuy()\n  return currentIdAndMaxBuy\n})\n\nexport const fetchUserTicketsAndLotteries = createAsyncThunk<\n  { userTickets: LotteryTicket[]; userLotteries: LotteryUserGraphEntity },\n  { account: string; currentLotteryId: string }\n>('lottery/fetchUserTicketsAndLotteries', async ({ account, currentLotteryId }) => {\n  const userLotteriesRes = await getUserLotteryData(account, currentLotteryId)\n  const userParticipationInCurrentRound = userLotteriesRes.rounds?.find((round) => round.lotteryId === currentLotteryId)\n  const userTickets = userParticipationInCurrentRound?.tickets\n\n  // User has not bought tickets for the current lottery, or there has been an error\n  if (!userTickets || userTickets.length === 0) {\n    return { userTickets: null, userLotteries: userLotteriesRes }\n  }\n\n  return { userTickets, userLotteries: userLotteriesRes }\n})\n\nexport const fetchPublicLotteries = createAsyncThunk<LotteryRoundGraphEntity[], { currentLotteryId: string }>(\n  'lottery/fetchPublicLotteries',\n  async ({ currentLotteryId }) => {\n    const lotteries = await getLotteriesData(currentLotteryId)\n    return lotteries\n  },\n)\n\nexport const fetchUserLotteries = createAsyncThunk<\n  LotteryUserGraphEntity,\n  { account: string; currentLotteryId: string }\n>('lottery/fetchUserLotteries', async ({ account, currentLotteryId }) => {\n  const userLotteries = await getUserLotteryData(account, currentLotteryId)\n  return userLotteries\n})\n\nexport const setLotteryIsTransitioning = createAsyncThunk<{ isTransitioning: boolean }, { isTransitioning: boolean }>(\n  `lottery/setIsTransitioning`,\n  async ({ isTransitioning }) => {\n    return { isTransitioning }\n  },\n)\n\nexport const LotterySlice = createSlice({\n  name: 'Lottery',\n  initialState,\n  reducers: {\n    setLotteryPublicData: (state, action) => {\n      state = action.payload\n    },\n  },\n  extraReducers: (builder) => {\n    builder.addCase(fetchCurrentLottery.fulfilled, (state, action: PayloadAction<LotteryResponse>) => {\n      state.currentRound = { ...state.currentRound, ...action.payload }\n    })\n    builder.addCase(fetchCurrentLotteryId.fulfilled, (state, action: PayloadAction<PublicLotteryData>) => {\n      state.currentLotteryId = action.payload.currentLotteryId\n      state.maxNumberTicketsPerBuyOrClaim = action.payload.maxNumberTicketsPerBuyOrClaim\n    })\n    builder.addCase(\n      fetchUserTicketsAndLotteries.fulfilled,\n      (state, action: PayloadAction<{ userTickets: LotteryTicket[]; userLotteries: LotteryUserGraphEntity }>) => {\n        state.currentRound.userTickets.isLoading = false\n        state.currentRound.userTickets.tickets = action.payload.userTickets\n        state.userLotteryData = action.payload.userLotteries\n      },\n    )\n    builder.addCase(fetchPublicLotteries.fulfilled, (state, action: PayloadAction<LotteryRoundGraphEntity[]>) => {\n      state.lotteriesData = action.payload\n    })\n    builder.addCase(fetchUserLotteries.fulfilled, (state, action: PayloadAction<LotteryUserGraphEntity>) => {\n      state.userLotteryData = action.payload\n    })\n    builder.addCase(\n      setLotteryIsTransitioning.fulfilled,\n      (state, action: PayloadAction<{ isTransitioning: boolean }>) => {\n        state.isTransitioning = action.payload.isTransitioning\n      },\n    )\n  },\n})\n\n// Actions\nexport const { setLotteryPublicData } = LotterySlice.actions\n\nexport default LotterySlice.reducer\n"]},"metadata":{},"sourceType":"module"}