{"ast":null,"code":"var _jsxFileName = \"/Users/thomas/Documents/PycharmProjects/pancake-frontend/src/views/Farms/components/FarmTable/Actions/HarvestAction.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Button, Heading, Skeleton, Text } from '@pancakeswap/uikit';\nimport BigNumber from 'bignumber.js';\nimport { useWeb3React } from '@web3-react/core';\nimport Balance from 'components/Balance';\nimport { BIG_ZERO } from 'utils/bigNumber';\nimport { getBalanceAmount } from 'utils/formatBalance';\nimport { useAppDispatch } from 'state';\nimport { fetchFarmUserDataAsync } from 'state/farms';\nimport { usePriceCakeBusd } from 'state/farms/hooks';\nimport useToast from 'hooks/useToast';\nimport { useTranslation } from 'contexts/Localization';\nimport useHarvestFarm from '../../../hooks/useHarvestFarm';\nimport { ActionContainer, ActionTitles, ActionContent } from './styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst HarvestAction = ({\n  pid,\n  userData,\n  userDataReady\n}) => {\n  _s();\n\n  const {\n    toastSuccess,\n    toastError\n  } = useToast();\n  const earningsBigNumber = new BigNumber(userData.earnings);\n  const cakePrice = usePriceCakeBusd();\n  let earnings = BIG_ZERO;\n  let earningsBusd = 0;\n  let displayBalance = userDataReady ? earnings.toLocaleString() : /*#__PURE__*/_jsxDEV(Skeleton, {\n    width: 60\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 68\n  }, this); // If user didn't connect wallet default balance will be 0\n\n  if (!earningsBigNumber.isZero()) {\n    earnings = getBalanceAmount(earningsBigNumber);\n    earningsBusd = earnings.multipliedBy(cakePrice).toNumber();\n    displayBalance = earnings.toFixed(3, BigNumber.ROUND_DOWN);\n  }\n\n  const [pendingTx, setPendingTx] = useState(false);\n  const {\n    onReward\n  } = useHarvestFarm(pid);\n  const {\n    t\n  } = useTranslation();\n  const dispatch = useAppDispatch();\n  const {\n    account\n  } = useWeb3React();\n  return /*#__PURE__*/_jsxDEV(ActionContainer, {\n    children: [/*#__PURE__*/_jsxDEV(ActionTitles, {\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        bold: true,\n        textTransform: \"uppercase\",\n        color: \"secondary\",\n        fontSize: \"12px\",\n        pr: \"4px\",\n        children: \"CAKE\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Text, {\n        bold: true,\n        textTransform: \"uppercase\",\n        color: \"textSubtle\",\n        fontSize: \"12px\",\n        children: t('Earned')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ActionContent, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Heading, {\n          children: displayBalance\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this), earningsBusd > 0 && /*#__PURE__*/_jsxDEV(Balance, {\n          fontSize: \"12px\",\n          color: \"textSubtle\",\n          decimals: 2,\n          value: earningsBusd,\n          unit: \" USD\",\n          prefix: \"~\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        disabled: earnings.eq(0) || pendingTx || !userDataReady,\n        onClick: async () => {\n          setPendingTx(true);\n\n          try {\n            await onReward();\n            toastSuccess(`${t('Harvested')}!`, t('Your %symbol% earnings have been sent to your wallet!', {\n              symbol: 'CAKE'\n            }));\n          } catch (e) {\n            toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'));\n            console.error(e);\n          } finally {\n            setPendingTx(false);\n          }\n\n          dispatch(fetchFarmUserDataAsync({\n            account,\n            pids: [pid]\n          }));\n        },\n        ml: \"4px\",\n        children: t('Harvest')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n\n_s(HarvestAction, \"bgUDCgJmDQinqw0QN+HTOMuJSvM=\", false, function () {\n  return [useToast, usePriceCakeBusd, useHarvestFarm, useTranslation, useAppDispatch, useWeb3React];\n});\n\n_c = HarvestAction;\nexport default HarvestAction;\n\nvar _c;\n\n$RefreshReg$(_c, \"HarvestAction\");","map":{"version":3,"sources":["/Users/thomas/Documents/PycharmProjects/pancake-frontend/src/views/Farms/components/FarmTable/Actions/HarvestAction.tsx"],"names":["React","useState","Button","Heading","Skeleton","Text","BigNumber","useWeb3React","Balance","BIG_ZERO","getBalanceAmount","useAppDispatch","fetchFarmUserDataAsync","usePriceCakeBusd","useToast","useTranslation","useHarvestFarm","ActionContainer","ActionTitles","ActionContent","HarvestAction","pid","userData","userDataReady","toastSuccess","toastError","earningsBigNumber","earnings","cakePrice","earningsBusd","displayBalance","toLocaleString","isZero","multipliedBy","toNumber","toFixed","ROUND_DOWN","pendingTx","setPendingTx","onReward","t","dispatch","account","eq","symbol","e","console","error","pids"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport { Button, Heading, Skeleton, Text } from '@pancakeswap/uikit'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport Balance from 'components/Balance'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { getBalanceAmount } from 'utils/formatBalance'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { usePriceCakeBusd } from 'state/farms/hooks'\nimport useToast from 'hooks/useToast'\nimport { useTranslation } from 'contexts/Localization'\nimport useHarvestFarm from '../../../hooks/useHarvestFarm'\n\nimport { ActionContainer, ActionTitles, ActionContent } from './styles'\n\ninterface HarvestActionProps extends FarmWithStakedValue {\n  userDataReady: boolean\n}\n\nconst HarvestAction: React.FunctionComponent<HarvestActionProps> = ({ pid, userData, userDataReady }) => {\n  const { toastSuccess, toastError } = useToast()\n  const earningsBigNumber = new BigNumber(userData.earnings)\n  const cakePrice = usePriceCakeBusd()\n  let earnings = BIG_ZERO\n  let earningsBusd = 0\n  let displayBalance = userDataReady ? earnings.toLocaleString() : <Skeleton width={60} />\n\n  // If user didn't connect wallet default balance will be 0\n  if (!earningsBigNumber.isZero()) {\n    earnings = getBalanceAmount(earningsBigNumber)\n    earningsBusd = earnings.multipliedBy(cakePrice).toNumber()\n    displayBalance = earnings.toFixed(3, BigNumber.ROUND_DOWN)\n  }\n\n  const [pendingTx, setPendingTx] = useState(false)\n  const { onReward } = useHarvestFarm(pid)\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n\n  return (\n    <ActionContainer>\n      <ActionTitles>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\n          CAKE\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {t('Earned')}\n        </Text>\n      </ActionTitles>\n      <ActionContent>\n        <div>\n          <Heading>{displayBalance}</Heading>\n          {earningsBusd > 0 && (\n            <Balance fontSize=\"12px\" color=\"textSubtle\" decimals={2} value={earningsBusd} unit=\" USD\" prefix=\"~\" />\n          )}\n        </div>\n        <Button\n          disabled={earnings.eq(0) || pendingTx || !userDataReady}\n          onClick={async () => {\n            setPendingTx(true)\n            try {\n              await onReward()\n              toastSuccess(\n                `${t('Harvested')}!`,\n                t('Your %symbol% earnings have been sent to your wallet!', { symbol: 'CAKE' }),\n              )\n            } catch (e) {\n              toastError(\n                t('Error'),\n                t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\n              )\n              console.error(e)\n            } finally {\n              setPendingTx(false)\n            }\n            dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n          }}\n          ml=\"4px\"\n        >\n          {t('Harvest')}\n        </Button>\n      </ActionContent>\n    </ActionContainer>\n  )\n}\n\nexport default HarvestAction\n"]},"metadata":{},"sourceType":"module"}