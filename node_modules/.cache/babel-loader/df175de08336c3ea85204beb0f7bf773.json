{"ast":null,"code":"import { toDate, add, hoursToSeconds, differenceInHours } from 'date-fns';\nimport { BSC_BLOCK_TIME, DEFAULT_TOKEN_DECIMAL } from 'config';\nimport { getBidderInfo } from 'config/constants/farmAuctions';\nimport { simpleRpcProvider } from 'utils/providers';\nimport { FarmAuctionContractStatus } from 'utils/types';\nimport { AuctionStatus } from 'config/constants/types';\nimport { ethersToBigNumber } from 'utils/bigNumber';\nexport const FORM_ADDRESS = 'https://docs.google.com/forms/d/e/1FAIpQLScUkwbsMWwg7L5jjGjEcmv6RsoCNhFDkV3xEpRu2KcJrr47Sw/viewform'; // Sorts bidders received from smart contract by bid amount in descending order (biggest -> smallest)\n// Also ammends bidder information with getBidderInfo\n// auction is required if data will be used for table display, hence in reclaim and congratulations card its ommited\n\nexport const sortAuctionBidders = (bidders, auction) => {\n  const sortedBidders = [...bidders].sort((a, b) => {\n    if (a.amount.lt(b.amount)) {\n      return 1;\n    }\n\n    if (a.amount.gt(b.amount)) {\n      return -1;\n    }\n\n    return 0;\n  }).map((bidder, index) => {\n    const bidderInfo = getBidderInfo(bidder.account);\n    return { ...bidderInfo,\n      position: index + 1,\n      account: bidder.account,\n      amount: bidder.amount\n    };\n  }); // Positions need to be adjusted in case 2 bidders has the same bid amount\n  // adjustedPosition will always increase by 1 in the following block for the first bidder\n\n  let adjustedPosition = 0;\n  return sortedBidders.map((bidder, index, unadjustedBidders) => {\n    const amount = ethersToBigNumber(bidder.amount);\n    const samePositionAsAbove = index === 0 ? false : bidder.amount.eq(unadjustedBidders[index - 1].amount);\n    adjustedPosition = samePositionAsAbove ? adjustedPosition : adjustedPosition + 1; // Reclaim and congratulations card don't need auction data or isTopPosition\n    // in this case it is set to false just to avoid TS errors\n\n    let isTopPosition = auction ? index + 1 <= auction.topLeaderboard : false; // This is here in case we closed auction with less/more winners for some reason\n\n    if (auction && auction.leaderboardThreshold.gt(0)) {\n      isTopPosition = auction.leaderboardThreshold.lte(amount);\n    }\n\n    return { ...bidder,\n      position: adjustedPosition,\n      isTopPosition,\n      samePositionAsAbove,\n      amount\n    };\n  });\n}; // Determine if the auction is:\n// - Live and biddable\n// - Has been scheduled for specific future date\n// - Not annoucned yet\n// - Recently Finished/Closed\n\nconst getAuctionStatus = (currentBlock, startBlock, endBlock, contractStatus) => {\n  if (contractStatus === FarmAuctionContractStatus.Pending && !startBlock && !endBlock) {\n    return AuctionStatus.ToBeAnnounced;\n  }\n\n  if (contractStatus === FarmAuctionContractStatus.Close) {\n    return AuctionStatus.Closed;\n  }\n\n  if (currentBlock >= endBlock) {\n    return AuctionStatus.Finished;\n  }\n\n  if (contractStatus === FarmAuctionContractStatus.Open && currentBlock < startBlock) {\n    return AuctionStatus.Pending;\n  }\n\n  if (contractStatus === FarmAuctionContractStatus.Open && currentBlock > startBlock) {\n    return AuctionStatus.Open;\n  }\n\n  return AuctionStatus.ToBeAnnounced;\n};\n\nconst getDateForBlock = async (currentBlock, block) => {\n  const blocksUntilBlock = block - currentBlock;\n  const secondsUntilStart = blocksUntilBlock * BSC_BLOCK_TIME; // if block already happened we can get timestamp via .getBlock(block)\n\n  if (currentBlock > block) {\n    try {\n      const {\n        timestamp\n      } = await simpleRpcProvider.getBlock(block);\n      return toDate(timestamp * 1000);\n    } catch {\n      add(new Date(), {\n        seconds: secondsUntilStart\n      });\n    }\n  }\n\n  return add(new Date(), {\n    seconds: secondsUntilStart\n  });\n}; // Get additional auction information based on the date received from smart contract\n\n\nexport const processAuctionData = async (auctionId, auctionResponse) => {\n  const processedAuctionData = { ...auctionResponse,\n    topLeaderboard: auctionResponse.leaderboard.toNumber(),\n    initialBidAmount: ethersToBigNumber(auctionResponse.initialBidAmount).div(DEFAULT_TOKEN_DECIMAL).toNumber(),\n    leaderboardThreshold: ethersToBigNumber(auctionResponse.leaderboardThreshold),\n    startBlock: auctionResponse.startBlock.toNumber(),\n    endBlock: auctionResponse.endBlock.toNumber()\n  }; // Get all required datas and blocks\n\n  const currentBlock = await simpleRpcProvider.getBlockNumber();\n  const startDate = await getDateForBlock(currentBlock, processedAuctionData.startBlock);\n  const endDate = await getDateForBlock(currentBlock, processedAuctionData.endBlock);\n  const farmStartDate = add(endDate, {\n    hours: 12\n  });\n  const blocksToFarmStartDate = hoursToSeconds(12) / BSC_BLOCK_TIME;\n  const farmStartBlock = processedAuctionData.endBlock + blocksToFarmStartDate;\n  const farmDurationInBlocks = hoursToSeconds(7 * 24) / BSC_BLOCK_TIME;\n  const farmEndBlock = farmStartBlock + farmDurationInBlocks;\n  const farmEndDate = add(farmStartDate, {\n    weeks: 1\n  });\n  const auctionStatus = getAuctionStatus(currentBlock, processedAuctionData.startBlock, processedAuctionData.endBlock, processedAuctionData.status);\n  return {\n    id: auctionId,\n    startDate,\n    endDate,\n    auctionDuration: differenceInHours(endDate, startDate),\n    farmStartBlock,\n    farmStartDate,\n    farmEndBlock,\n    farmEndDate,\n    ...processedAuctionData,\n    status: auctionStatus\n  };\n};\nexport const processBidderAuctions = bidderAuctions => {\n  const [auctionIds, bids, claimed, nextCursor] = bidderAuctions;\n  const auctions = auctionIds.map((auctionId, index) => ({\n    id: auctionId.toNumber(),\n    amount: ethersToBigNumber(bids[index]),\n    claimed: claimed[index]\n  }));\n  return {\n    auctions,\n    nextCursor: nextCursor.toNumber()\n  };\n};","map":{"version":3,"sources":["/Users/thomas/Documents/pancake-frontend/pankcake-frontend/src/views/FarmAuction/helpers.tsx"],"names":["toDate","add","hoursToSeconds","differenceInHours","BSC_BLOCK_TIME","DEFAULT_TOKEN_DECIMAL","getBidderInfo","simpleRpcProvider","FarmAuctionContractStatus","AuctionStatus","ethersToBigNumber","FORM_ADDRESS","sortAuctionBidders","bidders","auction","sortedBidders","sort","a","b","amount","lt","gt","map","bidder","index","bidderInfo","account","position","adjustedPosition","unadjustedBidders","samePositionAsAbove","eq","isTopPosition","topLeaderboard","leaderboardThreshold","lte","getAuctionStatus","currentBlock","startBlock","endBlock","contractStatus","Pending","ToBeAnnounced","Close","Closed","Finished","Open","getDateForBlock","block","blocksUntilBlock","secondsUntilStart","timestamp","getBlock","Date","seconds","processAuctionData","auctionId","auctionResponse","processedAuctionData","leaderboard","toNumber","initialBidAmount","div","getBlockNumber","startDate","endDate","farmStartDate","hours","blocksToFarmStartDate","farmStartBlock","farmDurationInBlocks","farmEndBlock","farmEndDate","weeks","auctionStatus","status","id","auctionDuration","processBidderAuctions","bidderAuctions","auctionIds","bids","claimed","nextCursor","auctions"],"mappings":"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","sourcesContent":["import { toDate, add, hoursToSeconds, differenceInHours } from 'date-fns'\nimport { BSC_BLOCK_TIME, DEFAULT_TOKEN_DECIMAL } from 'config'\nimport { getBidderInfo } from 'config/constants/farmAuctions'\nimport { simpleRpcProvider } from 'utils/providers'\nimport { AuctionsResponse, FarmAuctionContractStatus, BidsPerAuction, ViewBidderAuctionsResponse } from 'utils/types'\nimport { Auction, AuctionStatus, Bidder, BidderAuction } from 'config/constants/types'\nimport { ethersToBigNumber } from 'utils/bigNumber'\n\nexport const FORM_ADDRESS =\n  'https://docs.google.com/forms/d/e/1FAIpQLScUkwbsMWwg7L5jjGjEcmv6RsoCNhFDkV3xEpRu2KcJrr47Sw/viewform'\n\n// Sorts bidders received from smart contract by bid amount in descending order (biggest -> smallest)\n// Also ammends bidder information with getBidderInfo\n// auction is required if data will be used for table display, hence in reclaim and congratulations card its ommited\nexport const sortAuctionBidders = (bidders: BidsPerAuction[], auction?: Auction): Bidder[] => {\n  const sortedBidders = [...bidders]\n    .sort((a, b) => {\n      if (a.amount.lt(b.amount)) {\n        return 1\n      }\n      if (a.amount.gt(b.amount)) {\n        return -1\n      }\n      return 0\n    })\n    .map((bidder, index) => {\n      const bidderInfo = getBidderInfo(bidder.account)\n      return {\n        ...bidderInfo,\n        position: index + 1,\n        account: bidder.account,\n        amount: bidder.amount,\n      }\n    })\n\n  // Positions need to be adjusted in case 2 bidders has the same bid amount\n  // adjustedPosition will always increase by 1 in the following block for the first bidder\n  let adjustedPosition = 0\n\n  return sortedBidders.map((bidder, index, unadjustedBidders) => {\n    const amount = ethersToBigNumber(bidder.amount)\n    const samePositionAsAbove = index === 0 ? false : bidder.amount.eq(unadjustedBidders[index - 1].amount)\n    adjustedPosition = samePositionAsAbove ? adjustedPosition : adjustedPosition + 1\n    // Reclaim and congratulations card don't need auction data or isTopPosition\n    // in this case it is set to false just to avoid TS errors\n    let isTopPosition = auction ? index + 1 <= auction.topLeaderboard : false\n    // This is here in case we closed auction with less/more winners for some reason\n    if (auction && auction.leaderboardThreshold.gt(0)) {\n      isTopPosition = auction.leaderboardThreshold.lte(amount)\n    }\n    return {\n      ...bidder,\n      position: adjustedPosition,\n      isTopPosition,\n      samePositionAsAbove,\n      amount,\n    }\n  })\n}\n\n// Determine if the auction is:\n// - Live and biddable\n// - Has been scheduled for specific future date\n// - Not annoucned yet\n// - Recently Finished/Closed\nconst getAuctionStatus = (\n  currentBlock: number,\n  startBlock: number,\n  endBlock: number,\n  contractStatus: FarmAuctionContractStatus,\n) => {\n  if (contractStatus === FarmAuctionContractStatus.Pending && !startBlock && !endBlock) {\n    return AuctionStatus.ToBeAnnounced\n  }\n  if (contractStatus === FarmAuctionContractStatus.Close) {\n    return AuctionStatus.Closed\n  }\n  if (currentBlock >= endBlock) {\n    return AuctionStatus.Finished\n  }\n  if (contractStatus === FarmAuctionContractStatus.Open && currentBlock < startBlock) {\n    return AuctionStatus.Pending\n  }\n  if (contractStatus === FarmAuctionContractStatus.Open && currentBlock > startBlock) {\n    return AuctionStatus.Open\n  }\n  return AuctionStatus.ToBeAnnounced\n}\n\nconst getDateForBlock = async (currentBlock: number, block: number) => {\n  const blocksUntilBlock = block - currentBlock\n  const secondsUntilStart = blocksUntilBlock * BSC_BLOCK_TIME\n  // if block already happened we can get timestamp via .getBlock(block)\n  if (currentBlock > block) {\n    try {\n      const { timestamp } = await simpleRpcProvider.getBlock(block)\n      return toDate(timestamp * 1000)\n    } catch {\n      add(new Date(), { seconds: secondsUntilStart })\n    }\n  }\n  return add(new Date(), { seconds: secondsUntilStart })\n}\n\n// Get additional auction information based on the date received from smart contract\nexport const processAuctionData = async (auctionId: number, auctionResponse: AuctionsResponse): Promise<Auction> => {\n  const processedAuctionData = {\n    ...auctionResponse,\n    topLeaderboard: auctionResponse.leaderboard.toNumber(),\n    initialBidAmount: ethersToBigNumber(auctionResponse.initialBidAmount).div(DEFAULT_TOKEN_DECIMAL).toNumber(),\n    leaderboardThreshold: ethersToBigNumber(auctionResponse.leaderboardThreshold),\n    startBlock: auctionResponse.startBlock.toNumber(),\n    endBlock: auctionResponse.endBlock.toNumber(),\n  }\n\n  // Get all required datas and blocks\n  const currentBlock = await simpleRpcProvider.getBlockNumber()\n  const startDate = await getDateForBlock(currentBlock, processedAuctionData.startBlock)\n  const endDate = await getDateForBlock(currentBlock, processedAuctionData.endBlock)\n  const farmStartDate = add(endDate, { hours: 12 })\n  const blocksToFarmStartDate = hoursToSeconds(12) / BSC_BLOCK_TIME\n  const farmStartBlock = processedAuctionData.endBlock + blocksToFarmStartDate\n  const farmDurationInBlocks = hoursToSeconds(7 * 24) / BSC_BLOCK_TIME\n  const farmEndBlock = farmStartBlock + farmDurationInBlocks\n  const farmEndDate = add(farmStartDate, { weeks: 1 })\n\n  const auctionStatus = getAuctionStatus(\n    currentBlock,\n    processedAuctionData.startBlock,\n    processedAuctionData.endBlock,\n    processedAuctionData.status,\n  )\n\n  return {\n    id: auctionId,\n    startDate,\n    endDate,\n    auctionDuration: differenceInHours(endDate, startDate),\n    farmStartBlock,\n    farmStartDate,\n    farmEndBlock,\n    farmEndDate,\n    ...processedAuctionData,\n    status: auctionStatus,\n  }\n}\n\nexport const processBidderAuctions = (\n  bidderAuctions: ViewBidderAuctionsResponse,\n): { auctions: BidderAuction[]; nextCursor: number } => {\n  const [auctionIds, bids, claimed, nextCursor] = bidderAuctions\n  const auctions = auctionIds.map((auctionId, index) => ({\n    id: auctionId.toNumber(),\n    amount: ethersToBigNumber(bids[index]),\n    claimed: claimed[index],\n  }))\n  return { auctions, nextCursor: nextCursor.toNumber() }\n}\n"]},"metadata":{},"sourceType":"module"}