{"ast":null,"code":"import request, { gql } from 'graphql-request';\nimport { SNAPSHOT_API, SNAPSHOT_VOTING_API } from 'config/constants/endpoints';\nimport { ProposalState } from 'state/types';\nimport { simpleRpcProvider } from 'utils/providers';\nexport const getProposals = async (first = 5, skip = 0, state = ProposalState.ACTIVE) => {\n  const response = await request(SNAPSHOT_API, gql`\n      query getProposals($first: Int!, $skip: Int!, $state: String!) {\n        proposals(\n          first: $first\n          skip: $skip\n          orderBy: \"end\"\n          orderDirection: desc\n          where: { space_in: \"cake.eth\", state: $state }\n        ) {\n          id\n          title\n          body\n          choices\n          start\n          end\n          snapshot\n          state\n          author\n          space {\n            id\n            name\n          }\n        }\n      }\n    `, {\n    first,\n    skip,\n    state\n  });\n  return response.proposals;\n};\nexport const getProposal = async id => {\n  const response = await request(SNAPSHOT_API, gql`\n      query getProposal($id: String) {\n        proposal(id: $id) {\n          id\n          title\n          body\n          choices\n          start\n          end\n          snapshot\n          state\n          author\n          space {\n            id\n            name\n          }\n        }\n      }\n    `, {\n    id\n  });\n  return response.proposal;\n};\nexport const getVotes = async (first, skip, where) => {\n  const response = await request(SNAPSHOT_API, gql`\n      query getVotes($first: Int, $skip: Int, $where: VoteWhere) {\n        votes(first: $first, skip: $skip, where: $where) {\n          id\n          voter\n          created\n          choice\n          space {\n            id\n            name\n          }\n          proposal {\n            choices\n          }\n          metadata\n        }\n      }\n    `, {\n    first,\n    skip,\n    where\n  });\n  return response.votes;\n};\nexport const getVoteVerificationStatuses = async (votes, block) => {\n  const blockNumber = block || (await simpleRpcProvider.getBlockNumber());\n  const votesToVerify = votes.map(vote => {\n    var _vote$metadata, _vote$metadata2;\n\n    return {\n      address: vote.voter,\n      verificationHash: (_vote$metadata = vote.metadata) === null || _vote$metadata === void 0 ? void 0 : _vote$metadata.verificationHash,\n      total: (_vote$metadata2 = vote.metadata) === null || _vote$metadata2 === void 0 ? void 0 : _vote$metadata2.votingPower\n    };\n  });\n  const response = await fetch(`${SNAPSHOT_VOTING_API}/verify`, {\n    method: 'post',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      block: blockNumber,\n      votes: votesToVerify\n    })\n  });\n\n  if (!response.ok) {\n    throw new Error(response.statusText);\n  }\n\n  const data = await response.json();\n  return votes.reduce((accum, vote) => {\n    var _data$data$vote$voter;\n\n    return { ...accum,\n      [vote.id]: ((_data$data$vote$voter = data.data[vote.voter.toLowerCase()]) === null || _data$data$vote$voter === void 0 ? void 0 : _data$data$vote$voter.isValid) === true\n    };\n  }, {});\n};\nexport const getAllVotes = async (proposalId, block, votesPerChunk = 1000) => {\n  // const blockNumber = block || (await simpleRpcProvider.getBlockNumber())\n  return new Promise((resolve, reject) => {\n    let votes = [];\n\n    const fetchVoteChunk = async newSkip => {\n      try {\n        const voteChunk = await getVotes(votesPerChunk, newSkip, {\n          proposal: proposalId\n        });\n\n        if (voteChunk.length === 0) {\n          resolve(votes);\n        } else {\n          votes = [...votes, ...voteChunk];\n          fetchVoteChunk(newSkip + votesPerChunk);\n        }\n      } catch (error) {\n        reject(error);\n      }\n    };\n\n    fetchVoteChunk(0);\n  });\n};","map":{"version":3,"sources":["/Users/thomas/Documents/pancake-frontend/pankcake-frontend/src/state/voting/helpers.ts"],"names":["request","gql","SNAPSHOT_API","SNAPSHOT_VOTING_API","ProposalState","simpleRpcProvider","getProposals","first","skip","state","ACTIVE","response","proposals","getProposal","id","proposal","getVotes","where","votes","getVoteVerificationStatuses","block","blockNumber","getBlockNumber","votesToVerify","map","vote","address","voter","verificationHash","metadata","total","votingPower","fetch","method","headers","body","JSON","stringify","ok","Error","statusText","data","json","reduce","accum","toLowerCase","isValid","getAllVotes","proposalId","votesPerChunk","Promise","resolve","reject","fetchVoteChunk","newSkip","voteChunk","length","error"],"mappings":"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","sourcesContent":["import request, { gql } from 'graphql-request'\nimport { SNAPSHOT_API, SNAPSHOT_VOTING_API } from 'config/constants/endpoints'\nimport { Proposal, ProposalState, Vote, VoteWhere } from 'state/types'\nimport { simpleRpcProvider } from 'utils/providers'\n\nexport const getProposals = async (first = 5, skip = 0, state = ProposalState.ACTIVE): Promise<Proposal[]> => {\n  const response: { proposals: Proposal[] } = await request(\n    SNAPSHOT_API,\n    gql`\n      query getProposals($first: Int!, $skip: Int!, $state: String!) {\n        proposals(\n          first: $first\n          skip: $skip\n          orderBy: \"end\"\n          orderDirection: desc\n          where: { space_in: \"cake.eth\", state: $state }\n        ) {\n          id\n          title\n          body\n          choices\n          start\n          end\n          snapshot\n          state\n          author\n          space {\n            id\n            name\n          }\n        }\n      }\n    `,\n    { first, skip, state },\n  )\n  return response.proposals\n}\n\nexport const getProposal = async (id: string): Promise<Proposal> => {\n  const response: { proposal: Proposal } = await request(\n    SNAPSHOT_API,\n    gql`\n      query getProposal($id: String) {\n        proposal(id: $id) {\n          id\n          title\n          body\n          choices\n          start\n          end\n          snapshot\n          state\n          author\n          space {\n            id\n            name\n          }\n        }\n      }\n    `,\n    { id },\n  )\n  return response.proposal\n}\n\nexport const getVotes = async (first: number, skip: number, where: VoteWhere): Promise<Vote[]> => {\n  const response: { votes: Vote[] } = await request(\n    SNAPSHOT_API,\n    gql`\n      query getVotes($first: Int, $skip: Int, $where: VoteWhere) {\n        votes(first: $first, skip: $skip, where: $where) {\n          id\n          voter\n          created\n          choice\n          space {\n            id\n            name\n          }\n          proposal {\n            choices\n          }\n          metadata\n        }\n      }\n    `,\n    { first, skip, where },\n  )\n  return response.votes\n}\n\nexport const getVoteVerificationStatuses = async (\n  votes: Vote[],\n  block?: number,\n): Promise<{ [key: string]: boolean }> => {\n  const blockNumber = block || (await simpleRpcProvider.getBlockNumber())\n\n  const votesToVerify = votes.map((vote) => ({\n    address: vote.voter,\n    verificationHash: vote.metadata?.verificationHash,\n    total: vote.metadata?.votingPower,\n  }))\n  const response = await fetch(`${SNAPSHOT_VOTING_API}/verify`, {\n    method: 'post',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      block: blockNumber,\n      votes: votesToVerify,\n    }),\n  })\n\n  if (!response.ok) {\n    throw new Error(response.statusText)\n  }\n\n  const data = await response.json()\n  return votes.reduce((accum, vote) => {\n    return {\n      ...accum,\n      [vote.id]: data.data[vote.voter.toLowerCase()]?.isValid === true,\n    }\n  }, {})\n}\n\nexport const getAllVotes = async (proposalId: string, block?: number, votesPerChunk = 1000): Promise<Vote[]> => {\n  // const blockNumber = block || (await simpleRpcProvider.getBlockNumber())\n  return new Promise((resolve, reject) => {\n    let votes: Vote[] = []\n\n    const fetchVoteChunk = async (newSkip: number) => {\n      try {\n        const voteChunk = await getVotes(votesPerChunk, newSkip, { proposal: proposalId })\n\n        if (voteChunk.length === 0) {\n          resolve(votes)\n        } else {\n          votes = [...votes, ...voteChunk]\n          fetchVoteChunk(newSkip + votesPerChunk)\n        }\n      } catch (error) {\n        reject(error)\n      }\n    }\n\n    fetchVoteChunk(0)\n  })\n}\n"]},"metadata":{},"sourceType":"module"}