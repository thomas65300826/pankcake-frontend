{"ast":null,"code":"var _jsxFileName = \"/Users/thomas/Documents/pancake-frontend/pankcake-frontend/src/views/Profile/components/ApproveConfirmButtons.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport styled from 'styled-components';\nimport { ChevronRightIcon, Button as UIKitButton, AutoRenewIcon, ChevronDownIcon, Box, Flex } from '@pancakeswap/uikit';\nimport { useTranslation } from 'contexts/Localization';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport let ButtonArrangement;\n\n(function (ButtonArrangement) {\n  ButtonArrangement[\"ROW\"] = \"row\";\n  ButtonArrangement[\"SEQUENTIAL\"] = \"sequential\";\n})(ButtonArrangement || (ButtonArrangement = {}));\n\nconst StyledApproveConfirmButtonRow = styled.div`\n  align-items: center;\n  display: grid;\n  grid-template-columns: 1fr;\n  justify-content: center;\n\n  ${({\n  theme\n}) => theme.mediaQueries.md} {\n    grid-template-columns: 1fr 24px 1fr;\n  }\n`;\n_c = StyledApproveConfirmButtonRow;\nconst Button = styled(UIKitButton)`\n  width: 100%;\n\n  ${({\n  theme\n}) => theme.mediaQueries.md} {\n    min-width: 160px;\n  }\n`;\n_c2 = Button;\nconst iconAttrs = {\n  width: '24px',\n  color: 'textDisabled'\n};\nconst ChevronRight = styled(ChevronRightIcon).attrs(iconAttrs)`\n  display: none;\n\n  ${({\n  theme\n}) => theme.mediaQueries.md} {\n    display: block;\n  }\n`;\n_c3 = ChevronRight;\nconst ChevronBottom = styled(ChevronDownIcon).attrs(iconAttrs)`\n  display: block;\n\n  ${({\n  theme\n}) => theme.mediaQueries.md} {\n    display: none;\n  }\n`;\n_c4 = ChevronBottom;\n\nconst spinnerIcon = /*#__PURE__*/_jsxDEV(AutoRenewIcon, {\n  spin: true,\n  color: \"currentColor\"\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 59,\n  columnNumber: 21\n}, this);\n\nconst ApproveConfirmButtons = ({\n  isApproveDisabled,\n  isApproving,\n  isConfirming,\n  isConfirmDisabled,\n  onApprove,\n  onConfirm,\n  buttonArrangement = ButtonArrangement.ROW,\n  confirmLabel\n}) => {\n  _s();\n\n  const {\n    t\n  } = useTranslation();\n  const confirmButtonText = confirmLabel !== null && confirmLabel !== void 0 ? confirmLabel : t('Confirm');\n\n  const ApproveConfirmRow = () => {\n    return /*#__PURE__*/_jsxDEV(StyledApproveConfirmButtonRow, {\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          disabled: isApproveDisabled,\n          onClick: onApprove,\n          endIcon: isApproving ? spinnerIcon : undefined,\n          isLoading: isApproving,\n          children: isApproving ? t('Enabling') : t('Enable')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Flex, {\n        justifyContent: \"center\",\n        children: [/*#__PURE__*/_jsxDEV(ChevronRight, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ChevronBottom, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          onClick: onConfirm,\n          disabled: isConfirmDisabled,\n          isLoading: isConfirming,\n          endIcon: isConfirming ? spinnerIcon : undefined,\n          children: isConfirming ? t('Confirming') : confirmButtonText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this);\n  };\n\n  const ApproveConfirmSequential = () => {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: isApproveDisabled ? /*#__PURE__*/_jsxDEV(Box, {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          onClick: onConfirm,\n          disabled: isConfirmDisabled,\n          isLoading: isConfirming,\n          endIcon: isConfirming ? spinnerIcon : undefined,\n          children: isConfirming ? t('Confirming') : confirmButtonText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(Box, {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          onClick: onApprove,\n          endIcon: isApproving ? spinnerIcon : undefined,\n          isLoading: isApproving,\n          children: isApproving ? t('Enabling') : t('Enable')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 11\n      }, this)\n    }, void 0, false);\n  };\n\n  return buttonArrangement === ButtonArrangement.ROW ? ApproveConfirmRow() : ApproveConfirmSequential();\n};\n\n_s(ApproveConfirmButtons, \"zlIdU9EjM2llFt74AbE2KsUJXyM=\", false, function () {\n  return [useTranslation];\n});\n\n_c5 = ApproveConfirmButtons;\nexport default ApproveConfirmButtons;\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"StyledApproveConfirmButtonRow\");\n$RefreshReg$(_c2, \"Button\");\n$RefreshReg$(_c3, \"ChevronRight\");\n$RefreshReg$(_c4, \"ChevronBottom\");\n$RefreshReg$(_c5, \"ApproveConfirmButtons\");","map":{"version":3,"sources":["/Users/thomas/Documents/pancake-frontend/pankcake-frontend/src/views/Profile/components/ApproveConfirmButtons.tsx"],"names":["React","styled","ChevronRightIcon","Button","UIKitButton","AutoRenewIcon","ChevronDownIcon","Box","Flex","useTranslation","ButtonArrangement","StyledApproveConfirmButtonRow","div","theme","mediaQueries","md","iconAttrs","width","color","ChevronRight","attrs","ChevronBottom","spinnerIcon","ApproveConfirmButtons","isApproveDisabled","isApproving","isConfirming","isConfirmDisabled","onApprove","onConfirm","buttonArrangement","ROW","confirmLabel","t","confirmButtonText","ApproveConfirmRow","undefined","ApproveConfirmSequential"],"mappings":"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","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\nimport { ChevronRightIcon, Button as UIKitButton, AutoRenewIcon, ChevronDownIcon, Box, Flex } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nexport enum ButtonArrangement {\n  ROW = 'row',\n  SEQUENTIAL = 'sequential',\n}\n\ninterface ApproveConfirmButtonsProps {\n  isApproveDisabled: boolean\n  isApproving: boolean\n  isConfirming: boolean\n  isConfirmDisabled: boolean\n  onApprove: () => void\n  onConfirm: () => void\n  buttonArrangement?: ButtonArrangement\n  confirmLabel?: string\n}\n\nconst StyledApproveConfirmButtonRow = styled.div`\n  align-items: center;\n  display: grid;\n  grid-template-columns: 1fr;\n  justify-content: center;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    grid-template-columns: 1fr 24px 1fr;\n  }\n`\n\nconst Button = styled(UIKitButton)`\n  width: 100%;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    min-width: 160px;\n  }\n`\n\nconst iconAttrs = { width: '24px', color: 'textDisabled' }\n\nconst ChevronRight = styled(ChevronRightIcon).attrs(iconAttrs)`\n  display: none;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    display: block;\n  }\n`\n\nconst ChevronBottom = styled(ChevronDownIcon).attrs(iconAttrs)`\n  display: block;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    display: none;\n  }\n`\n\nconst spinnerIcon = <AutoRenewIcon spin color=\"currentColor\" />\n\nconst ApproveConfirmButtons: React.FC<ApproveConfirmButtonsProps> = ({\n  isApproveDisabled,\n  isApproving,\n  isConfirming,\n  isConfirmDisabled,\n  onApprove,\n  onConfirm,\n  buttonArrangement = ButtonArrangement.ROW,\n  confirmLabel,\n}) => {\n  const { t } = useTranslation()\n  const confirmButtonText = confirmLabel ?? t('Confirm')\n\n  const ApproveConfirmRow = () => {\n    return (\n      <StyledApproveConfirmButtonRow>\n        <Box>\n          <Button\n            disabled={isApproveDisabled}\n            onClick={onApprove}\n            endIcon={isApproving ? spinnerIcon : undefined}\n            isLoading={isApproving}\n          >\n            {isApproving ? t('Enabling') : t('Enable')}\n          </Button>\n        </Box>\n        <Flex justifyContent=\"center\">\n          <ChevronRight />\n          <ChevronBottom />\n        </Flex>\n        <Box>\n          <Button\n            onClick={onConfirm}\n            disabled={isConfirmDisabled}\n            isLoading={isConfirming}\n            endIcon={isConfirming ? spinnerIcon : undefined}\n          >\n            {isConfirming ? t('Confirming') : confirmButtonText}\n          </Button>\n        </Box>\n      </StyledApproveConfirmButtonRow>\n    )\n  }\n\n  const ApproveConfirmSequential = () => {\n    return (\n      <>\n        {isApproveDisabled ? (\n          <Box>\n            <Button\n              onClick={onConfirm}\n              disabled={isConfirmDisabled}\n              isLoading={isConfirming}\n              endIcon={isConfirming ? spinnerIcon : undefined}\n            >\n              {isConfirming ? t('Confirming') : confirmButtonText}\n            </Button>\n          </Box>\n        ) : (\n          <Box>\n            <Button onClick={onApprove} endIcon={isApproving ? spinnerIcon : undefined} isLoading={isApproving}>\n              {isApproving ? t('Enabling') : t('Enable')}\n            </Button>\n          </Box>\n        )}\n      </>\n    )\n  }\n\n  return buttonArrangement === ButtonArrangement.ROW ? ApproveConfirmRow() : ApproveConfirmSequential()\n}\n\nexport default ApproveConfirmButtons\n"]},"metadata":{},"sourceType":"module"}