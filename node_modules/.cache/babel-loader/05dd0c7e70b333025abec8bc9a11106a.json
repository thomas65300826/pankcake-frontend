{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect } from 'react';\nimport usePrevious from 'hooks/usePreviousValue';\nimport useSwiper from './useSwiper';\n\n/**\n * Hooks for actions to be performed when the view changes (mobile)\n */\nconst useOnViewChange = (liveSwiperIndex, view) => {\n  _s();\n\n  const {\n    swiper\n  } = useSwiper();\n  const prevView = usePrevious(view);\n  useEffect(() => {\n    if (swiper && view !== prevView && swiper.activeIndex !== liveSwiperIndex) {\n      swiper.slideTo(liveSwiperIndex, 0.1);\n    }\n  }, [swiper, prevView, view, liveSwiperIndex]);\n};\n\n_s(useOnViewChange, \"FzRsYm2cvQ76Q4SmPR/sJeHn1Nc=\", false, function () {\n  return [useSwiper, usePrevious];\n});\n\nexport default useOnViewChange;","map":{"version":3,"sources":["/Users/thomas/Documents/PycharmProjects/pancake-frontend/src/views/Predictions/hooks/useOnViewChange.ts"],"names":["useEffect","usePrevious","useSwiper","useOnViewChange","liveSwiperIndex","view","swiper","prevView","activeIndex","slideTo"],"mappings":";;AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,OAAOC,WAAP,MAAwB,wBAAxB;AACA,OAAOC,SAAP,MAAsB,aAAtB;;AAGA;AACA;AACA;AACA,MAAMC,eAAe,GAAG,CAACC,eAAD,EAA0BC,IAA1B,KAA8C;AAAA;;AACpE,QAAM;AAAEC,IAAAA;AAAF,MAAaJ,SAAS,EAA5B;AACA,QAAMK,QAAQ,GAAGN,WAAW,CAACI,IAAD,CAA5B;AAEAL,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIM,MAAM,IAAID,IAAI,KAAKE,QAAnB,IAA+BD,MAAM,CAACE,WAAP,KAAuBJ,eAA1D,EAA2E;AACzEE,MAAAA,MAAM,CAACG,OAAP,CAAeL,eAAf,EAAgC,GAAhC;AACD;AACF,GAJQ,EAIN,CAACE,MAAD,EAASC,QAAT,EAAmBF,IAAnB,EAAyBD,eAAzB,CAJM,CAAT;AAKD,CATD;;GAAMD,e;UACeD,S,EACFD,W;;;AASnB,eAAeE,eAAf","sourcesContent":["import { useEffect } from 'react'\nimport usePrevious from 'hooks/usePreviousValue'\nimport useSwiper from './useSwiper'\nimport { PageView } from '../types'\n\n/**\n * Hooks for actions to be performed when the view changes (mobile)\n */\nconst useOnViewChange = (liveSwiperIndex: number, view?: PageView) => {\n  const { swiper } = useSwiper()\n  const prevView = usePrevious(view)\n\n  useEffect(() => {\n    if (swiper && view !== prevView && swiper.activeIndex !== liveSwiperIndex) {\n      swiper.slideTo(liveSwiperIndex, 0.1)\n    }\n  }, [swiper, prevView, view, liveSwiperIndex])\n}\n\nexport default useOnViewChange\n"]},"metadata":{},"sourceType":"module"}