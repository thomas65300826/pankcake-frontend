{"ast":null,"code":"var _jsxFileName = \"/Users/thomas/Documents/pancake-frontend/src/views/Profile/components/EditProfileModal/ApproveCakeView.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { AutoRenewIcon, Button, Flex, Text } from '@pancakeswap/uikit';\nimport { useTranslation } from 'contexts/Localization';\nimport { useCake } from 'hooks/useContract';\nimport useToast from 'hooks/useToast';\nimport { useProfile } from 'state/profile/hooks';\nimport { getPancakeProfileAddress } from 'utils/addressHelpers';\nimport { getFullDisplayBalance } from 'utils/formatBalance';\nimport useGetProfileCosts from 'views/Profile/hooks/useGetProfileCosts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ApproveCakePage = ({\n  goToChange,\n  onDismiss\n}) => {\n  _s();\n\n  const [isApproving, setIsApproving] = useState(false);\n  const {\n    profile\n  } = useProfile();\n  const {\n    t\n  } = useTranslation();\n  const {\n    numberCakeToUpdate,\n    numberCakeToReactivate\n  } = useGetProfileCosts();\n  const cakeContract = useCake();\n  const {\n    toastError\n  } = useToast();\n  const cost = profile.isActive ? numberCakeToUpdate : numberCakeToReactivate;\n\n  const handleApprove = async () => {\n    const tx = await cakeContract.approve(getPancakeProfileAddress(), cost.times(2).toJSON());\n    setIsApproving(true);\n    const receipt = await tx.wait();\n\n    if (receipt.status) {\n      goToChange();\n    } else {\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'));\n      setIsApproving(false);\n    }\n  };\n\n  if (!profile) {\n    return null;\n  }\n\n  return /*#__PURE__*/_jsxDEV(Flex, {\n    flexDirection: \"column\",\n    children: [/*#__PURE__*/_jsxDEV(Flex, {\n      alignItems: \"center\",\n      justifyContent: \"space-between\",\n      mb: \"24px\",\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        children: profile.isActive ? t('Cost to update:') : t('Cost to reactivate:')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Text, {\n        children: [getFullDisplayBalance(cost), \" CAKE\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      disabled: isApproving,\n      isLoading: isApproving,\n      endIcon: isApproving ? /*#__PURE__*/_jsxDEV(AutoRenewIcon, {\n        spin: true,\n        color: \"currentColor\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 32\n      }, this) : null,\n      width: \"100%\",\n      mb: \"8px\",\n      onClick: handleApprove,\n      children: t('Enable')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"text\",\n      width: \"100%\",\n      onClick: onDismiss,\n      disabled: isApproving,\n      children: t('Close Window')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ApproveCakePage, \"QOqAsJH3oengD0Y8+V00QA30GKk=\", false, function () {\n  return [useProfile, useTranslation, useGetProfileCosts, useCake, useToast];\n});\n\n_c = ApproveCakePage;\nexport default ApproveCakePage;\n\nvar _c;\n\n$RefreshReg$(_c, \"ApproveCakePage\");","map":{"version":3,"sources":["/Users/thomas/Documents/pancake-frontend/src/views/Profile/components/EditProfileModal/ApproveCakeView.tsx"],"names":["React","useState","AutoRenewIcon","Button","Flex","Text","useTranslation","useCake","useToast","useProfile","getPancakeProfileAddress","getFullDisplayBalance","useGetProfileCosts","ApproveCakePage","goToChange","onDismiss","isApproving","setIsApproving","profile","t","numberCakeToUpdate","numberCakeToReactivate","cakeContract","toastError","cost","isActive","handleApprove","tx","approve","times","toJSON","receipt","wait","status"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport { AutoRenewIcon, Button, Flex, InjectedModalProps, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useCake } from 'hooks/useContract'\nimport useToast from 'hooks/useToast'\nimport { useProfile } from 'state/profile/hooks'\nimport { getPancakeProfileAddress } from 'utils/addressHelpers'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\nimport useGetProfileCosts from 'views/Profile/hooks/useGetProfileCosts'\nimport { UseEditProfileResponse } from './reducer'\n\ninterface ApproveCakePageProps extends InjectedModalProps {\n  goToChange: UseEditProfileResponse['goToChange']\n}\n\nconst ApproveCakePage: React.FC<ApproveCakePageProps> = ({ goToChange, onDismiss }) => {\n  const [isApproving, setIsApproving] = useState(false)\n  const { profile } = useProfile()\n  const { t } = useTranslation()\n  const { numberCakeToUpdate, numberCakeToReactivate } = useGetProfileCosts()\n  const cakeContract = useCake()\n  const { toastError } = useToast()\n  const cost = profile.isActive ? numberCakeToUpdate : numberCakeToReactivate\n\n  const handleApprove = async () => {\n    const tx = await cakeContract.approve(getPancakeProfileAddress(), cost.times(2).toJSON())\n    setIsApproving(true)\n    const receipt = await tx.wait()\n    if (receipt.status) {\n      goToChange()\n    } else {\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n      setIsApproving(false)\n    }\n  }\n\n  if (!profile) {\n    return null\n  }\n\n  return (\n    <Flex flexDirection=\"column\">\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"24px\">\n        <Text>{profile.isActive ? t('Cost to update:') : t('Cost to reactivate:')}</Text>\n        <Text>{getFullDisplayBalance(cost)} CAKE</Text>\n      </Flex>\n      <Button\n        disabled={isApproving}\n        isLoading={isApproving}\n        endIcon={isApproving ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n        width=\"100%\"\n        mb=\"8px\"\n        onClick={handleApprove}\n      >\n        {t('Enable')}\n      </Button>\n      <Button variant=\"text\" width=\"100%\" onClick={onDismiss} disabled={isApproving}>\n        {t('Close Window')}\n      </Button>\n    </Flex>\n  )\n}\n\nexport default ApproveCakePage\n"]},"metadata":{},"sourceType":"module"}