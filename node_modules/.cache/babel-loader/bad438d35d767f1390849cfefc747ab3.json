{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useReducer } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport { useFarmAuctionContract } from 'hooks/useContract';\nimport { RECLAIM_AUCTIONS_TO_FETCH } from 'config';\nimport { processBidderAuctions, sortAuctionBidders } from '../helpers';\nconst initialState = {\n  auctions: [],\n  currentCursor: 0,\n  nextCursor: 0,\n  nextAuctionToCheck: 0,\n  auctionToReclaim: null,\n  loading: false\n};\n\nconst reclaimReducer = (state, action) => {\n  switch (action.type) {\n    case 'setAuctions':\n      return {\n        auctions: action.payload.auctions,\n        currentCursor: state.currentCursor,\n        nextCursor: action.payload.nextCursor,\n        nextAuctionToCheck: 0,\n        auctionToReclaim: null,\n        loading: false\n      };\n\n    case 'setAuctionToReclaim':\n      return { ...state,\n        auctionToReclaim: action.payload.auctionToReclaim,\n        loading: false\n      };\n\n    case 'checkNextAuction':\n      {\n        const nextAuctionToCheck = state.nextAuctionToCheck + 1;\n\n        if (nextAuctionToCheck === state.auctions.length) {\n          // Checked all auctions in the batch\n          return { ...state,\n            auctions: [],\n            currentCursor: state.nextCursor,\n            auctionToReclaim: null,\n            loading: false\n          };\n        }\n\n        return { ...state,\n          nextAuctionToCheck,\n          auctionToReclaim: null,\n          loading: false\n        };\n      }\n\n    case 'setLoading':\n      return { ...state,\n        loading: action.payload.loading\n      };\n\n    case 'reset':\n      return initialState;\n\n    default:\n      return state;\n  }\n};\n/**\n * This hook checks if user has participated in previous auctions and has some bids to claim back.\n */\n\n\nconst useReclaimAuctionBid = () => {\n  _s();\n\n  const {\n    account\n  } = useWeb3React();\n  const [state, dispatch] = useReducer(reclaimReducer, initialState);\n  const farmAuctionContract = useFarmAuctionContract();\n\n  const checkNextAuction = () => {\n    dispatch({\n      type: 'checkNextAuction'\n    });\n  }; // Reset checking if account was switched\n\n\n  useEffect(() => {\n    dispatch({\n      type: 'reset'\n    });\n  }, [account]); // Fetch auction data for auctions account has participated\n\n  useEffect(() => {\n    const fetchBidderAuctions = async () => {\n      try {\n        dispatch({\n          type: 'setLoading',\n          payload: {\n            loading: true\n          }\n        });\n        const bidderAuctionsResponse = await farmAuctionContract.viewBidderAuctions(account, state.currentCursor, RECLAIM_AUCTIONS_TO_FETCH);\n        const {\n          auctions,\n          nextCursor\n        } = processBidderAuctions(bidderAuctionsResponse);\n\n        if (auctions.length > 0) {\n          dispatch({\n            type: 'setAuctions',\n            payload: {\n              auctions,\n              nextCursor\n            }\n          });\n        }\n      } catch (error) {\n        console.error('Failed to fetch auctions for bidder', error);\n        dispatch({\n          type: 'setLoading',\n          payload: {\n            loading: false\n          }\n        });\n      }\n    };\n\n    if (!state.loading && account && state.currentCursor === state.nextCursor) {\n      fetchBidderAuctions();\n    }\n  }, [account, state, farmAuctionContract]);\n  useEffect(() => {\n    const checkIfAuctionIsClaimable = async auctionToCheck => {\n      dispatch({\n        type: 'setLoading',\n        payload: {\n          loading: true\n        }\n      });\n\n      try {\n        const isClaimable = await farmAuctionContract.claimable(auctionToCheck.id, account);\n\n        if (isClaimable) {\n          const [auctionBidders] = await farmAuctionContract.viewBidsPerAuction(auctionToCheck.id, 0, 500);\n          const sortedBidders = sortAuctionBidders(auctionBidders);\n          const accountBidderData = sortedBidders.find(bidder => bidder.account === account);\n          const position = accountBidderData === null || accountBidderData === void 0 ? void 0 : accountBidderData.position;\n          const auctionToReclaim = {\n            id: auctionToCheck.id,\n            amount: auctionToCheck.amount,\n            position\n          };\n          dispatch({\n            type: 'setAuctionToReclaim',\n            payload: {\n              auctionToReclaim\n            }\n          });\n        } else {\n          dispatch({\n            type: 'checkNextAuction'\n          });\n        }\n      } catch (error) {\n        dispatch({\n          type: 'setLoading',\n          payload: {\n            loading: false\n          }\n        });\n        console.error('Failed to check for unclaim bids', error);\n      }\n    };\n\n    const {\n      auctions,\n      nextAuctionToCheck,\n      loading\n    } = state;\n\n    if (auctions.length > 0 && account && !loading) {\n      const auctionToCheck = auctions[nextAuctionToCheck];\n      checkIfAuctionIsClaimable(auctionToCheck);\n    }\n  }, [account, state, farmAuctionContract]);\n  return [state.auctionToReclaim, checkNextAuction];\n};\n\n_s(useReclaimAuctionBid, \"udS4tV8VAhtyw+SvUhUx3e+4upY=\", false, function () {\n  return [useWeb3React, useFarmAuctionContract];\n});\n\nexport default useReclaimAuctionBid;","map":{"version":3,"sources":["/Users/thomas/Documents/PycharmProjects/pancake-frontend/src/views/FarmAuction/hooks/useReclaimAuctionBid.ts"],"names":["useEffect","useReducer","useWeb3React","useFarmAuctionContract","RECLAIM_AUCTIONS_TO_FETCH","processBidderAuctions","sortAuctionBidders","initialState","auctions","currentCursor","nextCursor","nextAuctionToCheck","auctionToReclaim","loading","reclaimReducer","state","action","type","payload","length","useReclaimAuctionBid","account","dispatch","farmAuctionContract","checkNextAuction","fetchBidderAuctions","bidderAuctionsResponse","viewBidderAuctions","error","console","checkIfAuctionIsClaimable","auctionToCheck","isClaimable","claimable","id","auctionBidders","viewBidsPerAuction","sortedBidders","accountBidderData","find","bidder","position","amount"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,UAApB,QAAsC,OAAtC;AACA,SAASC,YAAT,QAA6B,kBAA7B;AAGA,SAASC,sBAAT,QAAuC,mBAAvC;AACA,SAASC,yBAAT,QAA0C,QAA1C;AACA,SAASC,qBAAT,EAAgCC,kBAAhC,QAA0D,YAA1D;AAiBA,MAAMC,YAAiC,GAAG;AACxCC,EAAAA,QAAQ,EAAE,EAD8B;AAExCC,EAAAA,aAAa,EAAE,CAFyB;AAGxCC,EAAAA,UAAU,EAAE,CAH4B;AAIxCC,EAAAA,kBAAkB,EAAE,CAJoB;AAKxCC,EAAAA,gBAAgB,EAAE,IALsB;AAMxCC,EAAAA,OAAO,EAAE;AAN+B,CAA1C;;AASA,MAAMC,cAAc,GAAG,CAACC,KAAD,EAA6BC,MAA7B,KAA8F;AACnH,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,aAAL;AACE,aAAO;AACLT,QAAAA,QAAQ,EAAEQ,MAAM,CAACE,OAAP,CAAeV,QADpB;AAELC,QAAAA,aAAa,EAAEM,KAAK,CAACN,aAFhB;AAGLC,QAAAA,UAAU,EAAEM,MAAM,CAACE,OAAP,CAAeR,UAHtB;AAILC,QAAAA,kBAAkB,EAAE,CAJf;AAKLC,QAAAA,gBAAgB,EAAE,IALb;AAMLC,QAAAA,OAAO,EAAE;AANJ,OAAP;;AAQF,SAAK,qBAAL;AACE,aAAO,EACL,GAAGE,KADE;AAELH,QAAAA,gBAAgB,EAAEI,MAAM,CAACE,OAAP,CAAeN,gBAF5B;AAGLC,QAAAA,OAAO,EAAE;AAHJ,OAAP;;AAKF,SAAK,kBAAL;AAAyB;AACvB,cAAMF,kBAAkB,GAAGI,KAAK,CAACJ,kBAAN,GAA2B,CAAtD;;AACA,YAAIA,kBAAkB,KAAKI,KAAK,CAACP,QAAN,CAAeW,MAA1C,EAAkD;AAChD;AACA,iBAAO,EACL,GAAGJ,KADE;AAELP,YAAAA,QAAQ,EAAE,EAFL;AAGLC,YAAAA,aAAa,EAAEM,KAAK,CAACL,UAHhB;AAILE,YAAAA,gBAAgB,EAAE,IAJb;AAKLC,YAAAA,OAAO,EAAE;AALJ,WAAP;AAOD;;AACD,eAAO,EACL,GAAGE,KADE;AAELJ,UAAAA,kBAFK;AAGLC,UAAAA,gBAAgB,EAAE,IAHb;AAILC,UAAAA,OAAO,EAAE;AAJJ,SAAP;AAMD;;AACD,SAAK,YAAL;AACE,aAAO,EAAE,GAAGE,KAAL;AAAYF,QAAAA,OAAO,EAAEG,MAAM,CAACE,OAAP,CAAeL;AAApC,OAAP;;AACF,SAAK,OAAL;AACE,aAAON,YAAP;;AACF;AACE,aAAOQ,KAAP;AAxCJ;AA0CD,CA3CD;AA6CA;AACA;AACA;;;AACA,MAAMK,oBAAoB,GAAG,MAA+C;AAAA;;AAC1E,QAAM;AAAEC,IAAAA;AAAF,MAAcnB,YAAY,EAAhC;AAEA,QAAM,CAACa,KAAD,EAAQO,QAAR,IAAoBrB,UAAU,CAACa,cAAD,EAAiBP,YAAjB,CAApC;AAEA,QAAMgB,mBAAmB,GAAGpB,sBAAsB,EAAlD;;AAEA,QAAMqB,gBAAgB,GAAG,MAAM;AAC7BF,IAAAA,QAAQ,CAAC;AAAEL,MAAAA,IAAI,EAAE;AAAR,KAAD,CAAR;AACD,GAFD,CAP0E,CAW1E;;;AACAjB,EAAAA,SAAS,CAAC,MAAM;AACdsB,IAAAA,QAAQ,CAAC;AAAEL,MAAAA,IAAI,EAAE;AAAR,KAAD,CAAR;AACD,GAFQ,EAEN,CAACI,OAAD,CAFM,CAAT,CAZ0E,CAgB1E;;AACArB,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMyB,mBAAmB,GAAG,YAAY;AACtC,UAAI;AACFH,QAAAA,QAAQ,CAAC;AAAEL,UAAAA,IAAI,EAAE,YAAR;AAAsBC,UAAAA,OAAO,EAAE;AAAEL,YAAAA,OAAO,EAAE;AAAX;AAA/B,SAAD,CAAR;AAEA,cAAMa,sBAAsB,GAAG,MAAMH,mBAAmB,CAACI,kBAApB,CACnCN,OADmC,EAEnCN,KAAK,CAACN,aAF6B,EAGnCL,yBAHmC,CAArC;AAMA,cAAM;AAAEI,UAAAA,QAAF;AAAYE,UAAAA;AAAZ,YAA2BL,qBAAqB,CAACqB,sBAAD,CAAtD;;AACA,YAAIlB,QAAQ,CAACW,MAAT,GAAkB,CAAtB,EAAyB;AACvBG,UAAAA,QAAQ,CAAC;AAAEL,YAAAA,IAAI,EAAE,aAAR;AAAuBC,YAAAA,OAAO,EAAE;AAAEV,cAAAA,QAAF;AAAYE,cAAAA;AAAZ;AAAhC,WAAD,CAAR;AACD;AACF,OAbD,CAaE,OAAOkB,KAAP,EAAc;AACdC,QAAAA,OAAO,CAACD,KAAR,CAAc,qCAAd,EAAqDA,KAArD;AACAN,QAAAA,QAAQ,CAAC;AAAEL,UAAAA,IAAI,EAAE,YAAR;AAAsBC,UAAAA,OAAO,EAAE;AAAEL,YAAAA,OAAO,EAAE;AAAX;AAA/B,SAAD,CAAR;AACD;AACF,KAlBD;;AAoBA,QAAI,CAACE,KAAK,CAACF,OAAP,IAAkBQ,OAAlB,IAA6BN,KAAK,CAACN,aAAN,KAAwBM,KAAK,CAACL,UAA/D,EAA2E;AACzEe,MAAAA,mBAAmB;AACpB;AACF,GAxBQ,EAwBN,CAACJ,OAAD,EAAUN,KAAV,EAAiBQ,mBAAjB,CAxBM,CAAT;AA0BAvB,EAAAA,SAAS,CAAC,MAAM;AACd,UAAM8B,yBAAyB,GAAG,MAAOC,cAAP,IAAyC;AACzET,MAAAA,QAAQ,CAAC;AAAEL,QAAAA,IAAI,EAAE,YAAR;AAAsBC,QAAAA,OAAO,EAAE;AAAEL,UAAAA,OAAO,EAAE;AAAX;AAA/B,OAAD,CAAR;;AACA,UAAI;AACF,cAAMmB,WAAW,GAAG,MAAMT,mBAAmB,CAACU,SAApB,CAA8BF,cAAc,CAACG,EAA7C,EAAiDb,OAAjD,CAA1B;;AACA,YAAIW,WAAJ,EAAiB;AACf,gBAAM,CAACG,cAAD,IAAmB,MAAMZ,mBAAmB,CAACa,kBAApB,CAAuCL,cAAc,CAACG,EAAtD,EAA0D,CAA1D,EAA6D,GAA7D,CAA/B;AACA,gBAAMG,aAAa,GAAG/B,kBAAkB,CAAC6B,cAAD,CAAxC;AACA,gBAAMG,iBAAiB,GAAGD,aAAa,CAACE,IAAd,CAAoBC,MAAD,IAAYA,MAAM,CAACnB,OAAP,KAAmBA,OAAlD,CAA1B;AACA,gBAAMoB,QAAQ,GAAGH,iBAAH,aAAGA,iBAAH,uBAAGA,iBAAiB,CAAEG,QAApC;AACA,gBAAM7B,gBAAgB,GAAG;AAAEsB,YAAAA,EAAE,EAAEH,cAAc,CAACG,EAArB;AAAyBQ,YAAAA,MAAM,EAAEX,cAAc,CAACW,MAAhD;AAAwDD,YAAAA;AAAxD,WAAzB;AACAnB,UAAAA,QAAQ,CAAC;AAAEL,YAAAA,IAAI,EAAE,qBAAR;AAA+BC,YAAAA,OAAO,EAAE;AAAEN,cAAAA;AAAF;AAAxC,WAAD,CAAR;AACD,SAPD,MAOO;AACLU,UAAAA,QAAQ,CAAC;AAAEL,YAAAA,IAAI,EAAE;AAAR,WAAD,CAAR;AACD;AACF,OAZD,CAYE,OAAOW,KAAP,EAAc;AACdN,QAAAA,QAAQ,CAAC;AAAEL,UAAAA,IAAI,EAAE,YAAR;AAAsBC,UAAAA,OAAO,EAAE;AAAEL,YAAAA,OAAO,EAAE;AAAX;AAA/B,SAAD,CAAR;AACAgB,QAAAA,OAAO,CAACD,KAAR,CAAc,kCAAd,EAAkDA,KAAlD;AACD;AACF,KAlBD;;AAmBA,UAAM;AAAEpB,MAAAA,QAAF;AAAYG,MAAAA,kBAAZ;AAAgCE,MAAAA;AAAhC,QAA4CE,KAAlD;;AACA,QAAIP,QAAQ,CAACW,MAAT,GAAkB,CAAlB,IAAuBE,OAAvB,IAAkC,CAACR,OAAvC,EAAgD;AAC9C,YAAMkB,cAAc,GAAGvB,QAAQ,CAACG,kBAAD,CAA/B;AACAmB,MAAAA,yBAAyB,CAACC,cAAD,CAAzB;AACD;AACF,GAzBQ,EAyBN,CAACV,OAAD,EAAUN,KAAV,EAAiBQ,mBAAjB,CAzBM,CAAT;AA2BA,SAAO,CAACR,KAAK,CAACH,gBAAP,EAAyBY,gBAAzB,CAAP;AACD,CAvED;;GAAMJ,oB;UACgBlB,Y,EAIQC,sB;;;AAoE9B,eAAeiB,oBAAf","sourcesContent":["import { useEffect, useReducer } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport BigNumber from 'bignumber.js'\nimport { BidderAuction } from 'config/constants/types'\nimport { useFarmAuctionContract } from 'hooks/useContract'\nimport { RECLAIM_AUCTIONS_TO_FETCH } from 'config'\nimport { processBidderAuctions, sortAuctionBidders } from '../helpers'\n\ninterface ReclaimableAuction {\n  id: number\n  amount: BigNumber\n  position: number\n}\n\ninterface ReclaimReducerState {\n  auctions: BidderAuction[]\n  currentCursor: number\n  nextCursor: number\n  nextAuctionToCheck: number // nextAuctionToCheck is array index in auctions\n  auctionToReclaim: ReclaimableAuction | null\n  loading: boolean\n}\n\nconst initialState: ReclaimReducerState = {\n  auctions: [],\n  currentCursor: 0,\n  nextCursor: 0,\n  nextAuctionToCheck: 0,\n  auctionToReclaim: null,\n  loading: false,\n}\n\nconst reclaimReducer = (state: ReclaimReducerState, action: { type: string; payload?: any }): ReclaimReducerState => {\n  switch (action.type) {\n    case 'setAuctions':\n      return {\n        auctions: action.payload.auctions,\n        currentCursor: state.currentCursor,\n        nextCursor: action.payload.nextCursor,\n        nextAuctionToCheck: 0,\n        auctionToReclaim: null,\n        loading: false,\n      }\n    case 'setAuctionToReclaim':\n      return {\n        ...state,\n        auctionToReclaim: action.payload.auctionToReclaim,\n        loading: false,\n      }\n    case 'checkNextAuction': {\n      const nextAuctionToCheck = state.nextAuctionToCheck + 1\n      if (nextAuctionToCheck === state.auctions.length) {\n        // Checked all auctions in the batch\n        return {\n          ...state,\n          auctions: [],\n          currentCursor: state.nextCursor,\n          auctionToReclaim: null,\n          loading: false,\n        }\n      }\n      return {\n        ...state,\n        nextAuctionToCheck,\n        auctionToReclaim: null,\n        loading: false,\n      }\n    }\n    case 'setLoading':\n      return { ...state, loading: action.payload.loading }\n    case 'reset':\n      return initialState\n    default:\n      return state\n  }\n}\n\n/**\n * This hook checks if user has participated in previous auctions and has some bids to claim back.\n */\nconst useReclaimAuctionBid = (): [ReclaimableAuction | null, () => void] => {\n  const { account } = useWeb3React()\n\n  const [state, dispatch] = useReducer(reclaimReducer, initialState)\n\n  const farmAuctionContract = useFarmAuctionContract()\n\n  const checkNextAuction = () => {\n    dispatch({ type: 'checkNextAuction' })\n  }\n\n  // Reset checking if account was switched\n  useEffect(() => {\n    dispatch({ type: 'reset' })\n  }, [account])\n\n  // Fetch auction data for auctions account has participated\n  useEffect(() => {\n    const fetchBidderAuctions = async () => {\n      try {\n        dispatch({ type: 'setLoading', payload: { loading: true } })\n\n        const bidderAuctionsResponse = await farmAuctionContract.viewBidderAuctions(\n          account,\n          state.currentCursor,\n          RECLAIM_AUCTIONS_TO_FETCH,\n        )\n\n        const { auctions, nextCursor } = processBidderAuctions(bidderAuctionsResponse)\n        if (auctions.length > 0) {\n          dispatch({ type: 'setAuctions', payload: { auctions, nextCursor } })\n        }\n      } catch (error) {\n        console.error('Failed to fetch auctions for bidder', error)\n        dispatch({ type: 'setLoading', payload: { loading: false } })\n      }\n    }\n\n    if (!state.loading && account && state.currentCursor === state.nextCursor) {\n      fetchBidderAuctions()\n    }\n  }, [account, state, farmAuctionContract])\n\n  useEffect(() => {\n    const checkIfAuctionIsClaimable = async (auctionToCheck: BidderAuction) => {\n      dispatch({ type: 'setLoading', payload: { loading: true } })\n      try {\n        const isClaimable = await farmAuctionContract.claimable(auctionToCheck.id, account)\n        if (isClaimable) {\n          const [auctionBidders] = await farmAuctionContract.viewBidsPerAuction(auctionToCheck.id, 0, 500)\n          const sortedBidders = sortAuctionBidders(auctionBidders)\n          const accountBidderData = sortedBidders.find((bidder) => bidder.account === account)\n          const position = accountBidderData?.position\n          const auctionToReclaim = { id: auctionToCheck.id, amount: auctionToCheck.amount, position }\n          dispatch({ type: 'setAuctionToReclaim', payload: { auctionToReclaim } })\n        } else {\n          dispatch({ type: 'checkNextAuction' })\n        }\n      } catch (error) {\n        dispatch({ type: 'setLoading', payload: { loading: false } })\n        console.error('Failed to check for unclaim bids', error)\n      }\n    }\n    const { auctions, nextAuctionToCheck, loading } = state\n    if (auctions.length > 0 && account && !loading) {\n      const auctionToCheck = auctions[nextAuctionToCheck]\n      checkIfAuctionIsClaimable(auctionToCheck)\n    }\n  }, [account, state, farmAuctionContract])\n\n  return [state.auctionToReclaim, checkNextAuction]\n}\n\nexport default useReclaimAuctionBid\n"]},"metadata":{},"sourceType":"module"}