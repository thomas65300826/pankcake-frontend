{"ast":null,"code":"var _jsxFileName = \"/Users/thomas/Documents/pancake-frontend/pankcake-frontend/src/views/Collectibles/components/NftCard/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { Card, CardBody, Heading, Tag, Button, ChevronUpIcon, ChevronDownIcon, Text, CardFooter, useModal } from '@pancakeswap/uikit';\nimport { useProfile } from 'state/profile/hooks';\nimport { useTranslation } from 'contexts/Localization';\nimport InfoRow from '../InfoRow';\nimport TransferNftModal from '../TransferNftModal';\nimport ClaimNftModal from '../ClaimNftModal';\nimport Preview from './Preview';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Header = styled(InfoRow)`\n  min-height: 28px;\n`;\n_c = Header;\nconst DetailsButton = styled(Button).attrs({\n  variant: 'text'\n})`\n  height: auto;\n  padding: 16px 24px;\n\n  &:hover:not(:disabled):not(:active) {\n    background-color: transparent;\n  }\n\n  &:focus:not(:active) {\n    box-shadow: none;\n  }\n`;\n_c2 = DetailsButton;\nconst InfoBlock = styled.div`\n  padding: 24px;\n`;\n_c3 = InfoBlock;\n\nconst NftCard = ({\n  nft,\n  canClaim = false,\n  tokenIds = [],\n  onClaim,\n  refresh\n}) => {\n  _s();\n\n  var _profile$nft;\n\n  const [isOpen, setIsOpen] = useState(false);\n  const {\n    t\n  } = useTranslation();\n  const {\n    profile\n  } = useProfile();\n  const {\n    identifier,\n    name,\n    description\n  } = nft;\n  const walletOwnsNft = tokenIds.length > 0;\n  const Icon = isOpen ? ChevronUpIcon : ChevronDownIcon;\n\n  const handleClick = async () => {\n    setIsOpen(!isOpen);\n  };\n\n  const handleSuccess = () => {\n    refresh();\n  };\n\n  const [onPresentTransferModal] = useModal( /*#__PURE__*/_jsxDEV(TransferNftModal, {\n    nft: nft,\n    tokenIds: tokenIds,\n    onSuccess: handleSuccess\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this));\n  const [onPresentClaimModal] = useModal( /*#__PURE__*/_jsxDEV(ClaimNftModal, {\n    nft: nft,\n    onSuccess: handleSuccess,\n    onClaim: onClaim\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 42\n  }, this));\n  return /*#__PURE__*/_jsxDEV(Card, {\n    isActive: walletOwnsNft,\n    children: [/*#__PURE__*/_jsxDEV(Preview, {\n      nft: nft,\n      isOwned: walletOwnsNft\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CardBody, {\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        children: [/*#__PURE__*/_jsxDEV(Heading, {\n          children: name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this), walletOwnsNft && /*#__PURE__*/_jsxDEV(Tag, {\n          outline: true,\n          variant: \"secondary\",\n          children: t('In Wallet')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 13\n        }, this), (profile === null || profile === void 0 ? void 0 : (_profile$nft = profile.nft) === null || _profile$nft === void 0 ? void 0 : _profile$nft.identifier) === identifier && /*#__PURE__*/_jsxDEV(Tag, {\n          outline: true,\n          variant: \"success\",\n          children: t('Profile Pic')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), canClaim && /*#__PURE__*/_jsxDEV(Button, {\n        width: \"100%\",\n        mt: \"24px\",\n        onClick: onPresentClaimModal,\n        children: t('Claim this NFT')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }, this), walletOwnsNft && /*#__PURE__*/_jsxDEV(Button, {\n        width: \"100%\",\n        variant: \"secondary\",\n        mt: \"24px\",\n        onClick: onPresentTransferModal,\n        children: t('Transfer')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CardFooter, {\n      p: \"0\",\n      children: [/*#__PURE__*/_jsxDEV(DetailsButton, {\n        width: \"100%\",\n        endIcon: /*#__PURE__*/_jsxDEV(Icon, {\n          width: \"24px\",\n          color: \"primary\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 46\n        }, this),\n        onClick: handleClick,\n        children: t('Details')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this), isOpen && /*#__PURE__*/_jsxDEV(InfoBlock, {\n        children: /*#__PURE__*/_jsxDEV(Text, {\n          as: \"p\",\n          color: \"textSubtle\",\n          style: {\n            textAlign: 'center'\n          },\n          children: t(description)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n};\n\n_s(NftCard, \"m5kgKLlB1r/HTX5rG3RK6pbRsos=\", false, function () {\n  return [useTranslation, useProfile, useModal, useModal];\n});\n\n_c4 = NftCard;\nexport default NftCard;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"Header\");\n$RefreshReg$(_c2, \"DetailsButton\");\n$RefreshReg$(_c3, \"InfoBlock\");\n$RefreshReg$(_c4, \"NftCard\");","map":{"version":3,"sources":["/Users/thomas/Documents/pancake-frontend/pankcake-frontend/src/views/Collectibles/components/NftCard/index.tsx"],"names":["React","useState","styled","Card","CardBody","Heading","Tag","Button","ChevronUpIcon","ChevronDownIcon","Text","CardFooter","useModal","useProfile","useTranslation","InfoRow","TransferNftModal","ClaimNftModal","Preview","Header","DetailsButton","attrs","variant","InfoBlock","div","NftCard","nft","canClaim","tokenIds","onClaim","refresh","isOpen","setIsOpen","t","profile","identifier","name","description","walletOwnsNft","length","Icon","handleClick","handleSuccess","onPresentTransferModal","onPresentClaimModal","textAlign"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { ethers } from 'ethers'\nimport {\n  Card,\n  CardBody,\n  Heading,\n  Tag,\n  Button,\n  ChevronUpIcon,\n  ChevronDownIcon,\n  Text,\n  CardFooter,\n  useModal,\n} from '@pancakeswap/uikit'\nimport { useProfile } from 'state/profile/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport { Nft } from 'config/constants/types'\nimport InfoRow from '../InfoRow'\nimport TransferNftModal from '../TransferNftModal'\nimport ClaimNftModal from '../ClaimNftModal'\nimport Preview from './Preview'\n\nexport interface NftCardProps {\n  nft: Nft\n  canClaim?: boolean\n  tokenIds?: number[]\n  onClaim?: () => Promise<ethers.providers.TransactionResponse>\n  refresh: () => void\n}\n\nconst Header = styled(InfoRow)`\n  min-height: 28px;\n`\n\nconst DetailsButton = styled(Button).attrs({ variant: 'text' })`\n  height: auto;\n  padding: 16px 24px;\n\n  &:hover:not(:disabled):not(:active) {\n    background-color: transparent;\n  }\n\n  &:focus:not(:active) {\n    box-shadow: none;\n  }\n`\n\nconst InfoBlock = styled.div`\n  padding: 24px;\n`\n\nconst NftCard: React.FC<NftCardProps> = ({ nft, canClaim = false, tokenIds = [], onClaim, refresh }) => {\n  const [isOpen, setIsOpen] = useState(false)\n  const { t } = useTranslation()\n  const { profile } = useProfile()\n  const { identifier, name, description } = nft\n  const walletOwnsNft = tokenIds.length > 0\n  const Icon = isOpen ? ChevronUpIcon : ChevronDownIcon\n\n  const handleClick = async () => {\n    setIsOpen(!isOpen)\n  }\n\n  const handleSuccess = () => {\n    refresh()\n  }\n\n  const [onPresentTransferModal] = useModal(\n    <TransferNftModal nft={nft} tokenIds={tokenIds} onSuccess={handleSuccess} />,\n  )\n  const [onPresentClaimModal] = useModal(<ClaimNftModal nft={nft} onSuccess={handleSuccess} onClaim={onClaim} />)\n\n  return (\n    <Card isActive={walletOwnsNft}>\n      <Preview nft={nft} isOwned={walletOwnsNft} />\n      <CardBody>\n        <Header>\n          <Heading>{name}</Heading>\n          {walletOwnsNft && (\n            <Tag outline variant=\"secondary\">\n              {t('In Wallet')}\n            </Tag>\n          )}\n          {profile?.nft?.identifier === identifier && (\n            <Tag outline variant=\"success\">\n              {t('Profile Pic')}\n            </Tag>\n          )}\n        </Header>\n        {canClaim && (\n          <Button width=\"100%\" mt=\"24px\" onClick={onPresentClaimModal}>\n            {t('Claim this NFT')}\n          </Button>\n        )}\n        {walletOwnsNft && (\n          <Button width=\"100%\" variant=\"secondary\" mt=\"24px\" onClick={onPresentTransferModal}>\n            {t('Transfer')}\n          </Button>\n        )}\n      </CardBody>\n      <CardFooter p=\"0\">\n        <DetailsButton width=\"100%\" endIcon={<Icon width=\"24px\" color=\"primary\" />} onClick={handleClick}>\n          {t('Details')}\n        </DetailsButton>\n        {isOpen && (\n          <InfoBlock>\n            <Text as=\"p\" color=\"textSubtle\" style={{ textAlign: 'center' }}>\n              {t(description)}\n            </Text>\n          </InfoBlock>\n        )}\n      </CardFooter>\n    </Card>\n  )\n}\n\nexport default NftCard\n"]},"metadata":{},"sourceType":"module"}