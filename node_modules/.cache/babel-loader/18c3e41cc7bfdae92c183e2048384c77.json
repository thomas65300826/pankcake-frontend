{"ast":null,"code":"import BigNumber from 'bignumber.js';\nimport { getRoi, tokenEarnedPerThousandDollarsCompounding } from 'utils/compoundApyHelpers';\nimport { getBalanceNumber, getFullDisplayBalance, getDecimalAmount } from 'utils/formatBalance';\nexport const convertSharesToCake = (shares, cakePerFullShare, decimals = 18, decimalsToRound = 3) => {\n  const sharePriceNumber = getBalanceNumber(cakePerFullShare, decimals);\n  const amountInCake = new BigNumber(shares.multipliedBy(sharePriceNumber));\n  const cakeAsNumberBalance = getBalanceNumber(amountInCake, decimals);\n  const cakeAsBigNumber = getDecimalAmount(new BigNumber(cakeAsNumberBalance), decimals);\n  const cakeAsDisplayBalance = getFullDisplayBalance(amountInCake, decimals, decimalsToRound);\n  return {\n    cakeAsNumberBalance,\n    cakeAsBigNumber,\n    cakeAsDisplayBalance\n  };\n};\nexport const convertCakeToShares = (cake, cakePerFullShare, decimals = 18, decimalsToRound = 3) => {\n  const sharePriceNumber = getBalanceNumber(cakePerFullShare, decimals);\n  const amountInShares = new BigNumber(cake.dividedBy(sharePriceNumber));\n  const sharesAsNumberBalance = getBalanceNumber(amountInShares, decimals);\n  const sharesAsBigNumber = getDecimalAmount(new BigNumber(sharesAsNumberBalance), decimals);\n  const sharesAsDisplayBalance = getFullDisplayBalance(amountInShares, decimals, decimalsToRound);\n  return {\n    sharesAsNumberBalance,\n    sharesAsBigNumber,\n    sharesAsDisplayBalance\n  };\n};\nconst AUTO_VAULT_COMPOUND_FREQUENCY = 288;\nconst MANUAL_POOL_COMPOUND_FREQUENCY = 1;\nexport const getAprData = (pool, performanceFee) => {\n  const {\n    isAutoVault,\n    earningTokenPrice,\n    apr\n  } = pool; // special handling for tokens like tBTC or BIFI where the daily token rewards for $1000 dollars will be less than 0.001 of that token\n\n  const isHighValueToken = Math.round(earningTokenPrice / 1000) > 0;\n  const roundingDecimals = isHighValueToken ? 4 : 2; //   Estimate & manual for now. 288 = once every 5 mins. We can change once we have a better sense of this\n\n  const compoundFrequency = isAutoVault ? AUTO_VAULT_COMPOUND_FREQUENCY : MANUAL_POOL_COMPOUND_FREQUENCY;\n\n  if (isAutoVault) {\n    const oneThousandDollarsWorthOfToken = 1000 / earningTokenPrice;\n    const tokenEarnedPerThousand365D = tokenEarnedPerThousandDollarsCompounding({\n      numberOfDays: 365,\n      farmApr: apr,\n      tokenPrice: earningTokenPrice,\n      roundingDecimals,\n      compoundFrequency,\n      performanceFee\n    });\n    const autoApr = getRoi({\n      amountEarned: tokenEarnedPerThousand365D,\n      amountInvested: oneThousandDollarsWorthOfToken\n    });\n    return {\n      apr: autoApr,\n      isHighValueToken,\n      roundingDecimals,\n      compoundFrequency\n    };\n  }\n\n  return {\n    apr,\n    isHighValueToken,\n    roundingDecimals,\n    compoundFrequency\n  };\n};\nexport const getCakeVaultEarnings = (account, cakeAtLastUserAction, userShares, pricePerFullShare, earningTokenPrice) => {\n  const hasAutoEarnings = account && cakeAtLastUserAction && cakeAtLastUserAction.gt(0) && userShares && userShares.gt(0);\n  const {\n    cakeAsBigNumber\n  } = convertSharesToCake(userShares, pricePerFullShare);\n  const autoCakeProfit = cakeAsBigNumber.minus(cakeAtLastUserAction);\n  const autoCakeToDisplay = autoCakeProfit.gte(0) ? getBalanceNumber(autoCakeProfit, 18) : 0;\n  const autoUsdProfit = autoCakeProfit.times(earningTokenPrice);\n  const autoUsdToDisplay = autoUsdProfit.gte(0) ? getBalanceNumber(autoUsdProfit, 18) : 0;\n  return {\n    hasAutoEarnings,\n    autoCakeToDisplay,\n    autoUsdToDisplay\n  };\n};\nexport const getPoolBlockInfo = (pool, currentBlock) => {\n  const {\n    startBlock,\n    endBlock,\n    isFinished\n  } = pool;\n  const shouldShowBlockCountdown = Boolean(!isFinished && startBlock && endBlock);\n  const blocksUntilStart = Math.max(startBlock - currentBlock, 0);\n  const blocksRemaining = Math.max(endBlock - currentBlock, 0);\n  const hasPoolStarted = blocksUntilStart === 0 && blocksRemaining > 0;\n  const blocksToDisplay = hasPoolStarted ? blocksRemaining : blocksUntilStart;\n  return {\n    shouldShowBlockCountdown,\n    blocksUntilStart,\n    blocksRemaining,\n    hasPoolStarted,\n    blocksToDisplay\n  };\n};","map":{"version":3,"sources":["/Users/thomas/Documents/PycharmProjects/pancake-frontend/src/views/Pools/helpers.tsx"],"names":["BigNumber","getRoi","tokenEarnedPerThousandDollarsCompounding","getBalanceNumber","getFullDisplayBalance","getDecimalAmount","convertSharesToCake","shares","cakePerFullShare","decimals","decimalsToRound","sharePriceNumber","amountInCake","multipliedBy","cakeAsNumberBalance","cakeAsBigNumber","cakeAsDisplayBalance","convertCakeToShares","cake","amountInShares","dividedBy","sharesAsNumberBalance","sharesAsBigNumber","sharesAsDisplayBalance","AUTO_VAULT_COMPOUND_FREQUENCY","MANUAL_POOL_COMPOUND_FREQUENCY","getAprData","pool","performanceFee","isAutoVault","earningTokenPrice","apr","isHighValueToken","Math","round","roundingDecimals","compoundFrequency","oneThousandDollarsWorthOfToken","tokenEarnedPerThousand365D","numberOfDays","farmApr","tokenPrice","autoApr","amountEarned","amountInvested","getCakeVaultEarnings","account","cakeAtLastUserAction","userShares","pricePerFullShare","hasAutoEarnings","gt","autoCakeProfit","minus","autoCakeToDisplay","gte","autoUsdProfit","times","autoUsdToDisplay","getPoolBlockInfo","currentBlock","startBlock","endBlock","isFinished","shouldShowBlockCountdown","Boolean","blocksUntilStart","max","blocksRemaining","hasPoolStarted","blocksToDisplay"],"mappings":"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","sourcesContent":["import BigNumber from 'bignumber.js'\nimport { Pool } from 'state/types'\nimport { getRoi, tokenEarnedPerThousandDollarsCompounding } from 'utils/compoundApyHelpers'\nimport { getBalanceNumber, getFullDisplayBalance, getDecimalAmount } from 'utils/formatBalance'\n\nexport const convertSharesToCake = (\n  shares: BigNumber,\n  cakePerFullShare: BigNumber,\n  decimals = 18,\n  decimalsToRound = 3,\n) => {\n  const sharePriceNumber = getBalanceNumber(cakePerFullShare, decimals)\n  const amountInCake = new BigNumber(shares.multipliedBy(sharePriceNumber))\n  const cakeAsNumberBalance = getBalanceNumber(amountInCake, decimals)\n  const cakeAsBigNumber = getDecimalAmount(new BigNumber(cakeAsNumberBalance), decimals)\n  const cakeAsDisplayBalance = getFullDisplayBalance(amountInCake, decimals, decimalsToRound)\n  return { cakeAsNumberBalance, cakeAsBigNumber, cakeAsDisplayBalance }\n}\n\nexport const convertCakeToShares = (\n  cake: BigNumber,\n  cakePerFullShare: BigNumber,\n  decimals = 18,\n  decimalsToRound = 3,\n) => {\n  const sharePriceNumber = getBalanceNumber(cakePerFullShare, decimals)\n  const amountInShares = new BigNumber(cake.dividedBy(sharePriceNumber))\n  const sharesAsNumberBalance = getBalanceNumber(amountInShares, decimals)\n  const sharesAsBigNumber = getDecimalAmount(new BigNumber(sharesAsNumberBalance), decimals)\n  const sharesAsDisplayBalance = getFullDisplayBalance(amountInShares, decimals, decimalsToRound)\n  return { sharesAsNumberBalance, sharesAsBigNumber, sharesAsDisplayBalance }\n}\n\nconst AUTO_VAULT_COMPOUND_FREQUENCY = 288\nconst MANUAL_POOL_COMPOUND_FREQUENCY = 1\n\nexport const getAprData = (pool: Pool, performanceFee: number) => {\n  const { isAutoVault, earningTokenPrice, apr } = pool\n  // special handling for tokens like tBTC or BIFI where the daily token rewards for $1000 dollars will be less than 0.001 of that token\n  const isHighValueToken = Math.round(earningTokenPrice / 1000) > 0\n  const roundingDecimals = isHighValueToken ? 4 : 2\n\n  //   Estimate & manual for now. 288 = once every 5 mins. We can change once we have a better sense of this\n  const compoundFrequency = isAutoVault ? AUTO_VAULT_COMPOUND_FREQUENCY : MANUAL_POOL_COMPOUND_FREQUENCY\n\n  if (isAutoVault) {\n    const oneThousandDollarsWorthOfToken = 1000 / earningTokenPrice\n    const tokenEarnedPerThousand365D = tokenEarnedPerThousandDollarsCompounding({\n      numberOfDays: 365,\n      farmApr: apr,\n      tokenPrice: earningTokenPrice,\n      roundingDecimals,\n      compoundFrequency,\n      performanceFee,\n    })\n    const autoApr = getRoi({\n      amountEarned: tokenEarnedPerThousand365D,\n      amountInvested: oneThousandDollarsWorthOfToken,\n    })\n    return { apr: autoApr, isHighValueToken, roundingDecimals, compoundFrequency }\n  }\n  return { apr, isHighValueToken, roundingDecimals, compoundFrequency }\n}\n\nexport const getCakeVaultEarnings = (\n  account: string,\n  cakeAtLastUserAction: BigNumber,\n  userShares: BigNumber,\n  pricePerFullShare: BigNumber,\n  earningTokenPrice: number,\n) => {\n  const hasAutoEarnings =\n    account && cakeAtLastUserAction && cakeAtLastUserAction.gt(0) && userShares && userShares.gt(0)\n  const { cakeAsBigNumber } = convertSharesToCake(userShares, pricePerFullShare)\n  const autoCakeProfit = cakeAsBigNumber.minus(cakeAtLastUserAction)\n  const autoCakeToDisplay = autoCakeProfit.gte(0) ? getBalanceNumber(autoCakeProfit, 18) : 0\n\n  const autoUsdProfit = autoCakeProfit.times(earningTokenPrice)\n  const autoUsdToDisplay = autoUsdProfit.gte(0) ? getBalanceNumber(autoUsdProfit, 18) : 0\n  return { hasAutoEarnings, autoCakeToDisplay, autoUsdToDisplay }\n}\n\nexport const getPoolBlockInfo = (pool: Pool, currentBlock: number) => {\n  const { startBlock, endBlock, isFinished } = pool\n  const shouldShowBlockCountdown = Boolean(!isFinished && startBlock && endBlock)\n  const blocksUntilStart = Math.max(startBlock - currentBlock, 0)\n  const blocksRemaining = Math.max(endBlock - currentBlock, 0)\n  const hasPoolStarted = blocksUntilStart === 0 && blocksRemaining > 0\n  const blocksToDisplay = hasPoolStarted ? blocksRemaining : blocksUntilStart\n  return { shouldShowBlockCountdown, blocksUntilStart, blocksRemaining, hasPoolStarted, blocksToDisplay }\n}\n"]},"metadata":{},"sourceType":"module"}