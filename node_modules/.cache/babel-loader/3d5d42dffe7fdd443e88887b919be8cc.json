{"ast":null,"code":"import BigNumber from 'bignumber.js';\n\n/**\n * Remove the '1' and reverse the digits in a lottery number retreived from the smart contract\n */\nexport const parseRetreivedNumber = number => {\n  const numberAsArray = number.split('');\n  numberAsArray.splice(0, 1);\n  numberAsArray.reverse();\n  return numberAsArray.join('');\n};\nexport const getDrawnDate = endTime => {\n  const endTimeInMs = parseInt(endTime, 10) * 1000;\n  const endTimeAsDate = new Date(endTimeInMs);\n  return endTimeAsDate.toLocaleDateString(undefined, dateTimeOptions);\n};\nexport const dateOptions = {\n  year: 'numeric',\n  month: 'short',\n  day: 'numeric'\n};\nexport const timeOptions = {\n  hour: 'numeric',\n  minute: 'numeric'\n};\nexport const dateTimeOptions = { ...dateOptions,\n  ...timeOptions\n};\nexport const processLotteryResponse = lotteryData => {\n  const {\n    priceTicketInCake: priceTicketInCakeAsString,\n    discountDivisor: discountDivisorAsString,\n    amountCollectedInCake: amountCollectedInCakeAsString\n  } = lotteryData;\n  const discountDivisor = new BigNumber(discountDivisorAsString);\n  const priceTicketInCake = new BigNumber(priceTicketInCakeAsString);\n  const amountCollectedInCake = new BigNumber(amountCollectedInCakeAsString);\n  return {\n    isLoading: lotteryData.isLoading,\n    lotteryId: lotteryData.lotteryId,\n    userTickets: lotteryData.userTickets,\n    status: lotteryData.status,\n    startTime: lotteryData.startTime,\n    endTime: lotteryData.endTime,\n    priceTicketInCake,\n    discountDivisor,\n    treasuryFee: lotteryData.treasuryFee,\n    firstTicketId: lotteryData.firstTicketId,\n    lastTicketId: lotteryData.lastTicketId,\n    amountCollectedInCake,\n    finalNumber: lotteryData.finalNumber,\n    cakePerBracket: lotteryData.cakePerBracket,\n    countWinnersPerBracket: lotteryData.countWinnersPerBracket,\n    rewardsBreakdown: lotteryData.rewardsBreakdown\n  };\n};","map":{"version":3,"sources":["/Users/thomas/Documents/PycharmProjects/pancake-frontend/src/views/Lottery/helpers.tsx"],"names":["BigNumber","parseRetreivedNumber","number","numberAsArray","split","splice","reverse","join","getDrawnDate","endTime","endTimeInMs","parseInt","endTimeAsDate","Date","toLocaleDateString","undefined","dateTimeOptions","dateOptions","year","month","day","timeOptions","hour","minute","processLotteryResponse","lotteryData","priceTicketInCake","priceTicketInCakeAsString","discountDivisor","discountDivisorAsString","amountCollectedInCake","amountCollectedInCakeAsString","isLoading","lotteryId","userTickets","status","startTime","treasuryFee","firstTicketId","lastTicketId","finalNumber","cakePerBracket","countWinnersPerBracket","rewardsBreakdown"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,cAAtB;;AAGA;AACA;AACA;AACA,OAAO,MAAMC,oBAAoB,GAAIC,MAAD,IAA4B;AAC9D,QAAMC,aAAa,GAAGD,MAAM,CAACE,KAAP,CAAa,EAAb,CAAtB;AACAD,EAAAA,aAAa,CAACE,MAAd,CAAqB,CAArB,EAAwB,CAAxB;AACAF,EAAAA,aAAa,CAACG,OAAd;AACA,SAAOH,aAAa,CAACI,IAAd,CAAmB,EAAnB,CAAP;AACD,CALM;AAOP,OAAO,MAAMC,YAAY,GAAIC,OAAD,IAAqB;AAC/C,QAAMC,WAAW,GAAGC,QAAQ,CAACF,OAAD,EAAU,EAAV,CAAR,GAAwB,IAA5C;AACA,QAAMG,aAAa,GAAG,IAAIC,IAAJ,CAASH,WAAT,CAAtB;AACA,SAAOE,aAAa,CAACE,kBAAd,CAAiCC,SAAjC,EAA4CC,eAA5C,CAAP;AACD,CAJM;AAMP,OAAO,MAAMC,WAAuC,GAAG;AACrDC,EAAAA,IAAI,EAAE,SAD+C;AAErDC,EAAAA,KAAK,EAAE,OAF8C;AAGrDC,EAAAA,GAAG,EAAE;AAHgD,CAAhD;AAMP,OAAO,MAAMC,WAAuC,GAAG;AACrDC,EAAAA,IAAI,EAAE,SAD+C;AAErDC,EAAAA,MAAM,EAAE;AAF6C,CAAhD;AAKP,OAAO,MAAMP,eAA2C,GAAG,EACzD,GAAGC,WADsD;AAEzD,KAAGI;AAFsD,CAApD;AAKP,OAAO,MAAMG,sBAAsB,GACjCC,WADoC,IAEnB;AACjB,QAAM;AACJC,IAAAA,iBAAiB,EAAEC,yBADf;AAEJC,IAAAA,eAAe,EAAEC,uBAFb;AAGJC,IAAAA,qBAAqB,EAAEC;AAHnB,MAIFN,WAJJ;AAMA,QAAMG,eAAe,GAAG,IAAI5B,SAAJ,CAAc6B,uBAAd,CAAxB;AACA,QAAMH,iBAAiB,GAAG,IAAI1B,SAAJ,CAAc2B,yBAAd,CAA1B;AACA,QAAMG,qBAAqB,GAAG,IAAI9B,SAAJ,CAAc+B,6BAAd,CAA9B;AAEA,SAAO;AACLC,IAAAA,SAAS,EAAEP,WAAW,CAACO,SADlB;AAELC,IAAAA,SAAS,EAAER,WAAW,CAACQ,SAFlB;AAGLC,IAAAA,WAAW,EAAET,WAAW,CAACS,WAHpB;AAILC,IAAAA,MAAM,EAAEV,WAAW,CAACU,MAJf;AAKLC,IAAAA,SAAS,EAAEX,WAAW,CAACW,SALlB;AAML3B,IAAAA,OAAO,EAAEgB,WAAW,CAAChB,OANhB;AAOLiB,IAAAA,iBAPK;AAQLE,IAAAA,eARK;AASLS,IAAAA,WAAW,EAAEZ,WAAW,CAACY,WATpB;AAULC,IAAAA,aAAa,EAAEb,WAAW,CAACa,aAVtB;AAWLC,IAAAA,YAAY,EAAEd,WAAW,CAACc,YAXrB;AAYLT,IAAAA,qBAZK;AAaLU,IAAAA,WAAW,EAAEf,WAAW,CAACe,WAbpB;AAcLC,IAAAA,cAAc,EAAEhB,WAAW,CAACgB,cAdvB;AAeLC,IAAAA,sBAAsB,EAAEjB,WAAW,CAACiB,sBAf/B;AAgBLC,IAAAA,gBAAgB,EAAElB,WAAW,CAACkB;AAhBzB,GAAP;AAkBD,CA/BM","sourcesContent":["import BigNumber from 'bignumber.js'\nimport { LotteryResponse, LotteryRound, LotteryRoundUserTickets } from 'state/types'\n\n/**\n * Remove the '1' and reverse the digits in a lottery number retreived from the smart contract\n */\nexport const parseRetreivedNumber = (number: string): string => {\n  const numberAsArray = number.split('')\n  numberAsArray.splice(0, 1)\n  numberAsArray.reverse()\n  return numberAsArray.join('')\n}\n\nexport const getDrawnDate = (endTime: string) => {\n  const endTimeInMs = parseInt(endTime, 10) * 1000\n  const endTimeAsDate = new Date(endTimeInMs)\n  return endTimeAsDate.toLocaleDateString(undefined, dateTimeOptions)\n}\n\nexport const dateOptions: Intl.DateTimeFormatOptions = {\n  year: 'numeric',\n  month: 'short',\n  day: 'numeric',\n}\n\nexport const timeOptions: Intl.DateTimeFormatOptions = {\n  hour: 'numeric',\n  minute: 'numeric',\n}\n\nexport const dateTimeOptions: Intl.DateTimeFormatOptions = {\n  ...dateOptions,\n  ...timeOptions,\n}\n\nexport const processLotteryResponse = (\n  lotteryData: LotteryResponse & { userTickets?: LotteryRoundUserTickets },\n): LotteryRound => {\n  const {\n    priceTicketInCake: priceTicketInCakeAsString,\n    discountDivisor: discountDivisorAsString,\n    amountCollectedInCake: amountCollectedInCakeAsString,\n  } = lotteryData\n\n  const discountDivisor = new BigNumber(discountDivisorAsString)\n  const priceTicketInCake = new BigNumber(priceTicketInCakeAsString)\n  const amountCollectedInCake = new BigNumber(amountCollectedInCakeAsString)\n\n  return {\n    isLoading: lotteryData.isLoading,\n    lotteryId: lotteryData.lotteryId,\n    userTickets: lotteryData.userTickets,\n    status: lotteryData.status,\n    startTime: lotteryData.startTime,\n    endTime: lotteryData.endTime,\n    priceTicketInCake,\n    discountDivisor,\n    treasuryFee: lotteryData.treasuryFee,\n    firstTicketId: lotteryData.firstTicketId,\n    lastTicketId: lotteryData.lastTicketId,\n    amountCollectedInCake,\n    finalNumber: lotteryData.finalNumber,\n    cakePerBracket: lotteryData.cakePerBracket,\n    countWinnersPerBracket: lotteryData.countWinnersPerBracket,\n    rewardsBreakdown: lotteryData.rewardsBreakdown,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}