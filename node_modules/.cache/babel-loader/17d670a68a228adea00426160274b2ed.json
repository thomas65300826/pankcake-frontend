{"ast":null,"code":"var _jsxFileName = \"/Users/thomas/Documents/pancake-frontend/pankcake-frontend/src/views/TradingCompetition/components/YourScore/ScoreCard.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport styled from 'styled-components';\nimport { Card, CardBody, CardFooter, Flex, Skeleton, Button, LaurelLeftIcon, LaurelRightIcon, CheckmarkCircleIcon, useModal } from '@pancakeswap/uikit';\nimport { CLAIM, OVER } from 'config/constants/trading-competition/easterPhases';\nimport ConnectWalletButton from 'components/ConnectWalletButton';\nimport { useTranslation } from 'contexts/Localization';\nimport UserPrizeGrid from './UserPrizeGrid';\nimport ClaimModal from '../ClaimModal';\nimport CardUserInfo from './CardUserInfo';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst StyledCard = styled(Card)`\n  ${({\n  theme\n}) => theme.mediaQueries.sm} {\n    min-width: 380px;\n  }\n`;\n_c = StyledCard;\nconst StyledCardFooter = styled(CardFooter)`\n  background: ${({\n  theme\n}) => theme.card.cardHeaderBackground.default};\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  svg {\n    height: 32px;\n    width: auto;\n    fill: ${({\n  theme\n}) => theme.colors.warning};\n  }\n`;\n_c2 = StyledCardFooter;\nconst StyledButton = styled(Button)`\n  svg {\n    margin-right: 4px;\n    height: 20px;\n    width: auto;\n    fill: ${({\n  theme\n}) => theme.colors.textDisabled};\n  }\n`;\n_c3 = StyledButton;\n\nconst ScoreCard = ({\n  hasRegistered,\n  account,\n  userTradingInformation,\n  profile,\n  isLoading,\n  userLeaderboardInformation,\n  currentPhase,\n  userCanClaimPrizes,\n  finishedAndPrizesClaimed,\n  finishedAndNothingToClaim,\n  onClaimSuccess\n}) => {\n  _s();\n\n  const {\n    t\n  } = useTranslation();\n  const [onPresentClaimModal] = useModal( /*#__PURE__*/_jsxDEV(ClaimModal, {\n    userTradingInformation: userTradingInformation,\n    onClaimSuccess: onClaimSuccess\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this), false);\n  const isClaimButtonDisabled = Boolean(isLoading || finishedAndPrizesClaimed || finishedAndNothingToClaim);\n  const {\n    hasUserClaimed\n  } = userTradingInformation;\n\n  const getClaimButtonText = () => {\n    if (userCanClaimPrizes) {\n      return t('Claim prizes');\n    } // User has already claimed prizes\n\n\n    if (hasUserClaimed) {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(CheckmarkCircleIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, this), \" \", t('Prizes Claimed!')]\n      }, void 0, true);\n    } // User has nothing to claim\n\n\n    return t('Nothing to claim');\n  };\n\n  return /*#__PURE__*/_jsxDEV(StyledCard, {\n    mt: \"24px\",\n    children: [/*#__PURE__*/_jsxDEV(CardBody, {\n      children: isLoading ? /*#__PURE__*/_jsxDEV(Flex, {\n        mt: \"24px\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        children: /*#__PURE__*/_jsxDEV(Skeleton, {\n          width: \"100%\",\n          height: \"60px\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(CardUserInfo, {\n          hasRegistered: hasRegistered,\n          account: account,\n          profile: profile,\n          userLeaderboardInformation: userLeaderboardInformation,\n          currentPhase: currentPhase\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 13\n        }, this), hasRegistered && (currentPhase.state === CLAIM || currentPhase.state === OVER) && /*#__PURE__*/_jsxDEV(UserPrizeGrid, {\n          userTradingInformation: userTradingInformation\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 15\n        }, this), !account && /*#__PURE__*/_jsxDEV(Flex, {\n          mt: \"24px\",\n          justifyContent: \"center\",\n          children: /*#__PURE__*/_jsxDEV(ConnectWalletButton, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), hasRegistered && currentPhase.state === CLAIM && /*#__PURE__*/_jsxDEV(StyledCardFooter, {\n      children: [/*#__PURE__*/_jsxDEV(LaurelLeftIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(StyledButton, {\n        disabled: isClaimButtonDisabled,\n        mx: \"18px\",\n        onClick: () => onPresentClaimModal(),\n        children: getClaimButtonText()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(LaurelRightIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ScoreCard, \"LdK2hD5s5Db0gu/G2ZrcFOviBUs=\", false, function () {\n  return [useTranslation, useModal];\n});\n\n_c4 = ScoreCard;\nexport default ScoreCard;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"StyledCard\");\n$RefreshReg$(_c2, \"StyledCardFooter\");\n$RefreshReg$(_c3, \"StyledButton\");\n$RefreshReg$(_c4, \"ScoreCard\");","map":{"version":3,"sources":["/Users/thomas/Documents/pancake-frontend/pankcake-frontend/src/views/TradingCompetition/components/YourScore/ScoreCard.tsx"],"names":["React","styled","Card","CardBody","CardFooter","Flex","Skeleton","Button","LaurelLeftIcon","LaurelRightIcon","CheckmarkCircleIcon","useModal","CLAIM","OVER","ConnectWalletButton","useTranslation","UserPrizeGrid","ClaimModal","CardUserInfo","StyledCard","theme","mediaQueries","sm","StyledCardFooter","card","cardHeaderBackground","default","colors","warning","StyledButton","textDisabled","ScoreCard","hasRegistered","account","userTradingInformation","profile","isLoading","userLeaderboardInformation","currentPhase","userCanClaimPrizes","finishedAndPrizesClaimed","finishedAndNothingToClaim","onClaimSuccess","t","onPresentClaimModal","isClaimButtonDisabled","Boolean","hasUserClaimed","getClaimButtonText","state"],"mappings":"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","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\nimport {\n  Card,\n  CardBody,\n  CardFooter,\n  Flex,\n  Skeleton,\n  Button,\n  LaurelLeftIcon,\n  LaurelRightIcon,\n  CheckmarkCircleIcon,\n  useModal,\n} from '@pancakeswap/uikit'\nimport { CLAIM, OVER } from 'config/constants/trading-competition/easterPhases'\nimport ConnectWalletButton from 'components/ConnectWalletButton'\nimport { useTranslation } from 'contexts/Localization'\nimport UserPrizeGrid from './UserPrizeGrid'\nimport ClaimModal from '../ClaimModal'\nimport { YourScoreProps } from '../../types'\nimport CardUserInfo from './CardUserInfo'\n\nconst StyledCard = styled(Card)`\n  ${({ theme }) => theme.mediaQueries.sm} {\n    min-width: 380px;\n  }\n`\n\nconst StyledCardFooter = styled(CardFooter)`\n  background: ${({ theme }) => theme.card.cardHeaderBackground.default};\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  svg {\n    height: 32px;\n    width: auto;\n    fill: ${({ theme }) => theme.colors.warning};\n  }\n`\n\nconst StyledButton = styled(Button)`\n  svg {\n    margin-right: 4px;\n    height: 20px;\n    width: auto;\n    fill: ${({ theme }) => theme.colors.textDisabled};\n  }\n`\n\nconst ScoreCard: React.FC<YourScoreProps> = ({\n  hasRegistered,\n  account,\n  userTradingInformation,\n  profile,\n  isLoading,\n  userLeaderboardInformation,\n  currentPhase,\n  userCanClaimPrizes,\n  finishedAndPrizesClaimed,\n  finishedAndNothingToClaim,\n  onClaimSuccess,\n}) => {\n  const { t } = useTranslation()\n  const [onPresentClaimModal] = useModal(\n    <ClaimModal userTradingInformation={userTradingInformation} onClaimSuccess={onClaimSuccess} />,\n    false,\n  )\n  const isClaimButtonDisabled = Boolean(isLoading || finishedAndPrizesClaimed || finishedAndNothingToClaim)\n  const { hasUserClaimed } = userTradingInformation\n\n  const getClaimButtonText = () => {\n    if (userCanClaimPrizes) {\n      return t('Claim prizes')\n    }\n    // User has already claimed prizes\n    if (hasUserClaimed) {\n      return (\n        <>\n          <CheckmarkCircleIcon /> {t('Prizes Claimed!')}\n        </>\n      )\n    }\n    // User has nothing to claim\n    return t('Nothing to claim')\n  }\n\n  return (\n    <StyledCard mt=\"24px\">\n      <CardBody>\n        {isLoading ? (\n          <Flex mt=\"24px\" justifyContent=\"center\" alignItems=\"center\">\n            <Skeleton width=\"100%\" height=\"60px\" />\n          </Flex>\n        ) : (\n          <>\n            <CardUserInfo\n              hasRegistered={hasRegistered}\n              account={account}\n              profile={profile}\n              userLeaderboardInformation={userLeaderboardInformation}\n              currentPhase={currentPhase}\n            />\n            {hasRegistered && (currentPhase.state === CLAIM || currentPhase.state === OVER) && (\n              <UserPrizeGrid userTradingInformation={userTradingInformation} />\n            )}\n            {!account && (\n              <Flex mt=\"24px\" justifyContent=\"center\">\n                <ConnectWalletButton />\n              </Flex>\n            )}\n          </>\n        )}\n      </CardBody>\n      {hasRegistered && currentPhase.state === CLAIM && (\n        <StyledCardFooter>\n          <LaurelLeftIcon />\n          <StyledButton disabled={isClaimButtonDisabled} mx=\"18px\" onClick={() => onPresentClaimModal()}>\n            {getClaimButtonText()}\n          </StyledButton>\n          <LaurelRightIcon />\n        </StyledCardFooter>\n      )}\n    </StyledCard>\n  )\n}\n\nexport default ScoreCard\n"]},"metadata":{},"sourceType":"module"}