{"ast":null,"code":"var _jsxFileName = \"/Users/thomas/Documents/PycharmProjects/pancake-frontend/src/views/Home/components/WinSection/LotteryCardContent.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useMemo } from 'react';\nimport { Flex, Text, Skeleton, Link, Button, ArrowForwardIcon } from '@pancakeswap/uikit';\nimport { useTranslation } from 'contexts/Localization';\nimport useRefresh from 'hooks/useRefresh';\nimport useIntersectionObserver from 'hooks/useIntersectionObserver';\nimport { usePriceCakeBusd } from 'state/farms/hooks';\nimport Balance from 'components/Balance';\nimport styled from 'styled-components';\nimport { fetchCurrentLotteryIdAndMaxBuy, fetchLottery } from 'state/lottery/helpers';\nimport BigNumber from 'bignumber.js';\nimport { getBalanceAmount } from 'utils/formatBalance';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst StyledLink = styled(Link)`\n  width: 100%;\n`;\n_c = StyledLink;\nconst StyledBalance = styled(Balance)`\n  background: ${({\n  theme\n}) => theme.colors.gradients.gold};\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n`;\n_c2 = StyledBalance;\n\nconst LotteryCardContent = () => {\n  _s();\n\n  const {\n    t\n  } = useTranslation();\n  const {\n    observerRef,\n    isIntersecting\n  } = useIntersectionObserver();\n  const [loadData, setLoadData] = useState(false);\n  const {\n    slowRefresh\n  } = useRefresh();\n  const [lotteryId, setLotteryId] = useState(null);\n  const [currentLotteryPrize, setCurrentLotteryPrize] = useState(null);\n  const cakePriceBusdAsString = usePriceCakeBusd().toString();\n  const cakePrizesText = t('%cakePrizeInUsd% in CAKE prizes this round', {\n    cakePrizeInUsd: cakePriceBusdAsString\n  });\n  const [pretext, prizesThisRound] = cakePrizesText.split(cakePriceBusdAsString);\n  const cakePriceBusd = useMemo(() => {\n    return new BigNumber(cakePriceBusdAsString);\n  }, [cakePriceBusdAsString]);\n  useEffect(() => {\n    if (isIntersecting) {\n      setLoadData(true);\n    }\n  }, [isIntersecting]);\n  useEffect(() => {\n    // get current lottery ID\n    const fetchCurrentID = async () => {\n      const {\n        currentLotteryId\n      } = await fetchCurrentLotteryIdAndMaxBuy();\n      setLotteryId(currentLotteryId);\n    };\n\n    if (loadData) {\n      fetchCurrentID();\n    }\n  }, [loadData, setLotteryId]);\n  useEffect(() => {\n    // get public data for current lottery\n    const fetchCurrentLotteryPrize = async () => {\n      const {\n        amountCollectedInCake\n      } = await fetchLottery(lotteryId);\n      const prizeInBusd = cakePriceBusd.times(amountCollectedInCake);\n      setCurrentLotteryPrize(prizeInBusd);\n    };\n\n    if (lotteryId) {\n      fetchCurrentLotteryPrize();\n    }\n  }, [lotteryId, slowRefresh, setCurrentLotteryPrize, cakePriceBusd]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Flex, {\n      flexDirection: \"column\",\n      mt: \"48px\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        ref: observerRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Text, {\n        color: \"white\",\n        bold: true,\n        fontSize: \"16px\",\n        children: t('Lottery')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), pretext && /*#__PURE__*/_jsxDEV(Text, {\n        color: \"white\",\n        mt: \"12px\",\n        bold: true,\n        fontSize: \"16px\",\n        children: pretext\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 11\n      }, this), currentLotteryPrize && currentLotteryPrize.gt(0) ? /*#__PURE__*/_jsxDEV(StyledBalance, {\n        fontSize: \"40px\",\n        bold: true,\n        prefix: \"$\",\n        decimals: 0,\n        value: getBalanceAmount(currentLotteryPrize).toNumber()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Skeleton, {\n          width: 200,\n          height: 40,\n          my: \"8px\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: observerRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), /*#__PURE__*/_jsxDEV(Text, {\n        color: \"white\",\n        mb: \"24px\",\n        bold: true,\n        fontSize: \"16px\",\n        children: prizesThisRound\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Text, {\n        color: \"white\",\n        mb: \"40px\",\n        children: t('Buy tickets with CAKE, win CAKE if your numbers match')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Flex, {\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      children: /*#__PURE__*/_jsxDEV(StyledLink, {\n        href: \"/lottery\",\n        id: \"homepage-prediction-cta\",\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          width: \"100%\",\n          children: [/*#__PURE__*/_jsxDEV(Text, {\n            bold: true,\n            color: \"invertedContrast\",\n            children: t('Buy Tickets')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(ArrowForwardIcon, {\n            ml: \"4px\",\n            color: \"invertedContrast\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(LotteryCardContent, \"2SVQE1RQYjmNC3RU8DlbxaZME6o=\", false, function () {\n  return [useTranslation, useIntersectionObserver, useRefresh, usePriceCakeBusd];\n});\n\n_c3 = LotteryCardContent;\nexport default LotteryCardContent;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"StyledLink\");\n$RefreshReg$(_c2, \"StyledBalance\");\n$RefreshReg$(_c3, \"LotteryCardContent\");","map":{"version":3,"sources":["/Users/thomas/Documents/PycharmProjects/pancake-frontend/src/views/Home/components/WinSection/LotteryCardContent.tsx"],"names":["React","useState","useEffect","useMemo","Flex","Text","Skeleton","Link","Button","ArrowForwardIcon","useTranslation","useRefresh","useIntersectionObserver","usePriceCakeBusd","Balance","styled","fetchCurrentLotteryIdAndMaxBuy","fetchLottery","BigNumber","getBalanceAmount","StyledLink","StyledBalance","theme","colors","gradients","gold","LotteryCardContent","t","observerRef","isIntersecting","loadData","setLoadData","slowRefresh","lotteryId","setLotteryId","currentLotteryPrize","setCurrentLotteryPrize","cakePriceBusdAsString","toString","cakePrizesText","cakePrizeInUsd","pretext","prizesThisRound","split","cakePriceBusd","fetchCurrentID","currentLotteryId","fetchCurrentLotteryPrize","amountCollectedInCake","prizeInBusd","times","gt","toNumber"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useMemo } from 'react'\nimport { Flex, Text, Skeleton, Link, Button, ArrowForwardIcon } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport useRefresh from 'hooks/useRefresh'\nimport useIntersectionObserver from 'hooks/useIntersectionObserver'\nimport { usePriceCakeBusd } from 'state/farms/hooks'\nimport Balance from 'components/Balance'\nimport styled from 'styled-components'\nimport { fetchCurrentLotteryIdAndMaxBuy, fetchLottery } from 'state/lottery/helpers'\nimport BigNumber from 'bignumber.js'\nimport { getBalanceAmount } from 'utils/formatBalance'\n\nconst StyledLink = styled(Link)`\n  width: 100%;\n`\n\nconst StyledBalance = styled(Balance)`\n  background: ${({ theme }) => theme.colors.gradients.gold};\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n`\n\nconst LotteryCardContent = () => {\n  const { t } = useTranslation()\n  const { observerRef, isIntersecting } = useIntersectionObserver()\n  const [loadData, setLoadData] = useState(false)\n  const { slowRefresh } = useRefresh()\n  const [lotteryId, setLotteryId] = useState<string>(null)\n  const [currentLotteryPrize, setCurrentLotteryPrize] = useState<BigNumber>(null)\n  const cakePriceBusdAsString = usePriceCakeBusd().toString()\n\n  const cakePrizesText = t('%cakePrizeInUsd% in CAKE prizes this round', { cakePrizeInUsd: cakePriceBusdAsString })\n  const [pretext, prizesThisRound] = cakePrizesText.split(cakePriceBusdAsString)\n\n  const cakePriceBusd = useMemo(() => {\n    return new BigNumber(cakePriceBusdAsString)\n  }, [cakePriceBusdAsString])\n\n  useEffect(() => {\n    if (isIntersecting) {\n      setLoadData(true)\n    }\n  }, [isIntersecting])\n\n  useEffect(() => {\n    // get current lottery ID\n    const fetchCurrentID = async () => {\n      const { currentLotteryId } = await fetchCurrentLotteryIdAndMaxBuy()\n      setLotteryId(currentLotteryId)\n    }\n\n    if (loadData) {\n      fetchCurrentID()\n    }\n  }, [loadData, setLotteryId])\n\n  useEffect(() => {\n    // get public data for current lottery\n    const fetchCurrentLotteryPrize = async () => {\n      const { amountCollectedInCake } = await fetchLottery(lotteryId)\n      const prizeInBusd = cakePriceBusd.times(amountCollectedInCake)\n      setCurrentLotteryPrize(prizeInBusd)\n    }\n\n    if (lotteryId) {\n      fetchCurrentLotteryPrize()\n    }\n  }, [lotteryId, slowRefresh, setCurrentLotteryPrize, cakePriceBusd])\n\n  return (\n    <>\n      <Flex flexDirection=\"column\" mt=\"48px\">\n        <div ref={observerRef} />\n        <Text color=\"white\" bold fontSize=\"16px\">\n          {t('Lottery')}\n        </Text>\n        {pretext && (\n          <Text color=\"white\" mt=\"12px\" bold fontSize=\"16px\">\n            {pretext}\n          </Text>\n        )}\n        {currentLotteryPrize && currentLotteryPrize.gt(0) ? (\n          <StyledBalance\n            fontSize=\"40px\"\n            bold\n            prefix=\"$\"\n            decimals={0}\n            value={getBalanceAmount(currentLotteryPrize).toNumber()}\n          />\n        ) : (\n          <>\n            <Skeleton width={200} height={40} my=\"8px\" />\n            <div ref={observerRef} />\n          </>\n        )}\n        <Text color=\"white\" mb=\"24px\" bold fontSize=\"16px\">\n          {prizesThisRound}\n        </Text>\n        <Text color=\"white\" mb=\"40px\">\n          {t('Buy tickets with CAKE, win CAKE if your numbers match')}\n        </Text>\n      </Flex>\n      <Flex alignItems=\"center\" justifyContent=\"center\">\n        <StyledLink href=\"/lottery\" id=\"homepage-prediction-cta\">\n          <Button width=\"100%\">\n            <Text bold color=\"invertedContrast\">\n              {t('Buy Tickets')}\n            </Text>\n            <ArrowForwardIcon ml=\"4px\" color=\"invertedContrast\" />\n          </Button>\n        </StyledLink>\n      </Flex>\n    </>\n  )\n}\n\nexport default LotteryCardContent\n"]},"metadata":{},"sourceType":"module"}