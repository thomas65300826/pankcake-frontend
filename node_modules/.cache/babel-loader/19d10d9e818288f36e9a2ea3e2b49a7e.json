{"ast":null,"code":"import ifosList from 'config/constants/ifo';\nimport { campaignMap } from 'config/constants/campaigns';\nimport { multicallv2 } from 'utils/multicall';\nimport { getPointCenterIfoAddress } from 'utils/addressHelpers';\nimport pointCenterIfoABI from 'config/abi/pointCenterIfo.json';\nexport const getAchievementTitle = campaign => {\n  switch (campaign.type) {\n    case 'ifo':\n      return {\n        key: 'IFO Shopper: %title%',\n        data: {\n          title: campaign.title\n        }\n      };\n\n    default:\n      return campaign.title;\n  }\n};\nexport const getAchievementDescription = campaign => {\n  switch (campaign.type) {\n    case 'ifo':\n      return {\n        key: 'Committed more than $5 worth of LP in the %title% IFO',\n        data: {\n          title: campaign.title\n        }\n      };\n\n    default:\n      return campaign.description;\n  }\n};\n/**\n * Checks if a wallet is eligible to claim points from valid IFO's\n */\n\nexport const getClaimableIfoData = async account => {\n  const ifoCampaigns = ifosList.filter(ifoItem => ifoItem.campaignId !== undefined); // Returns the claim status of every IFO with a campaign ID\n\n  const claimStatusCalls = ifoCampaigns.map(({\n    address\n  }) => {\n    return {\n      address: getPointCenterIfoAddress(),\n      name: 'checkClaimStatus',\n      params: [account, address]\n    };\n  });\n  const claimStatuses = await multicallv2(pointCenterIfoABI, claimStatusCalls, {\n    requireSuccess: false\n  }); // Get IFO data for all IFO's that are eligible to claim\n\n  const claimableIfoData = await multicallv2(pointCenterIfoABI, claimStatuses.reduce((accum, claimStatusArr, index) => {\n    if (claimStatusArr === null) {\n      return accum;\n    }\n\n    const [claimStatus] = claimStatusArr;\n\n    if (claimStatus === true) {\n      return [...accum, {\n        address: getPointCenterIfoAddress(),\n        name: 'ifos',\n        params: [index]\n      }];\n    }\n\n    return accum;\n  }, [])); // Transform response to an Achievement\n\n  return claimableIfoData.reduce((accum, claimableIfoDataItem) => {\n    if (!campaignMap.has(claimableIfoDataItem.campaignId)) {\n      return accum;\n    }\n\n    const campaignMeta = campaignMap.get(claimableIfoDataItem.campaignId);\n    const {\n      address\n    } = ifoCampaigns.find(ifoCampaign => ifoCampaign.campaignId === claimableIfoDataItem.campaignId);\n    return [...accum, {\n      address,\n      id: claimableIfoDataItem.campaignId,\n      type: 'ifo',\n      title: getAchievementTitle(campaignMeta),\n      description: getAchievementDescription(campaignMeta),\n      badge: campaignMeta.badge,\n      points: claimableIfoDataItem.numberPoints.toNumber()\n    }];\n  }, []);\n};","map":{"version":3,"sources":["/Users/thomas/Documents/pancake-frontend/src/utils/achievements.ts"],"names":["ifosList","campaignMap","multicallv2","getPointCenterIfoAddress","pointCenterIfoABI","getAchievementTitle","campaign","type","key","data","title","getAchievementDescription","description","getClaimableIfoData","account","ifoCampaigns","filter","ifoItem","campaignId","undefined","claimStatusCalls","map","address","name","params","claimStatuses","requireSuccess","claimableIfoData","reduce","accum","claimStatusArr","index","claimStatus","claimableIfoDataItem","has","campaignMeta","get","find","ifoCampaign","id","badge","points","numberPoints","toNumber"],"mappings":"AAEA,OAAOA,QAAP,MAAqB,sBAArB;AACA,SAASC,WAAT,QAA4B,4BAA5B;AAEA,SAASC,WAAT,QAA4B,iBAA5B;AACA,SAASC,wBAAT,QAAyC,sBAAzC;AACA,OAAOC,iBAAP,MAA8B,gCAA9B;AAQA,OAAO,MAAMC,mBAAmB,GAAIC,QAAD,IAA0C;AAC3E,UAAQA,QAAQ,CAACC,IAAjB;AACE,SAAK,KAAL;AACE,aAAO;AACLC,QAAAA,GAAG,EAAE,sBADA;AAELC,QAAAA,IAAI,EAAE;AACJC,UAAAA,KAAK,EAAEJ,QAAQ,CAACI;AADZ;AAFD,OAAP;;AAMF;AACE,aAAOJ,QAAQ,CAACI,KAAhB;AATJ;AAWD,CAZM;AAcP,OAAO,MAAMC,yBAAyB,GAAIL,QAAD,IAA0C;AACjF,UAAQA,QAAQ,CAACC,IAAjB;AACE,SAAK,KAAL;AACE,aAAO;AACLC,QAAAA,GAAG,EAAE,uDADA;AAELC,QAAAA,IAAI,EAAE;AACJC,UAAAA,KAAK,EAAEJ,QAAQ,CAACI;AADZ;AAFD,OAAP;;AAMF;AACE,aAAOJ,QAAQ,CAACM,WAAhB;AATJ;AAWD,CAZM;AAcP;AACA;AACA;;AACA,OAAO,MAAMC,mBAAmB,GAAG,MAAOC,OAAP,IAAmD;AACpF,QAAMC,YAAY,GAAGf,QAAQ,CAACgB,MAAT,CAAiBC,OAAD,IAAaA,OAAO,CAACC,UAAR,KAAuBC,SAApD,CAArB,CADoF,CAGpF;;AACA,QAAMC,gBAAgB,GAAGL,YAAY,CAACM,GAAb,CAAiB,CAAC;AAAEC,IAAAA;AAAF,GAAD,KAAiB;AACzD,WAAO;AACLA,MAAAA,OAAO,EAAEnB,wBAAwB,EAD5B;AAELoB,MAAAA,IAAI,EAAE,kBAFD;AAGLC,MAAAA,MAAM,EAAE,CAACV,OAAD,EAAUQ,OAAV;AAHH,KAAP;AAKD,GANwB,CAAzB;AAQA,QAAMG,aAAa,GAAI,MAAMvB,WAAW,CAACE,iBAAD,EAAoBgB,gBAApB,EAAsC;AAAEM,IAAAA,cAAc,EAAE;AAAlB,GAAtC,CAAxC,CAZoF,CAgBpF;;AACA,QAAMC,gBAAgB,GAAI,MAAMzB,WAAW,CACzCE,iBADyC,EAEzCqB,aAAa,CAACG,MAAd,CAAqB,CAACC,KAAD,EAAQC,cAAR,EAAwBC,KAAxB,KAAkC;AACrD,QAAID,cAAc,KAAK,IAAvB,EAA6B;AAC3B,aAAOD,KAAP;AACD;;AAED,UAAM,CAACG,WAAD,IAAgBF,cAAtB;;AAEA,QAAIE,WAAW,KAAK,IAApB,EAA0B;AACxB,aAAO,CAAC,GAAGH,KAAJ,EAAW;AAAEP,QAAAA,OAAO,EAAEnB,wBAAwB,EAAnC;AAAuCoB,QAAAA,IAAI,EAAE,MAA7C;AAAqDC,QAAAA,MAAM,EAAE,CAACO,KAAD;AAA7D,OAAX,CAAP;AACD;;AAED,WAAOF,KAAP;AACD,GAZD,EAYG,EAZH,CAFyC,CAA3C,CAjBoF,CAkCpF;;AACA,SAAOF,gBAAgB,CAACC,MAAjB,CAAwB,CAACC,KAAD,EAAQI,oBAAR,KAAiC;AAC9D,QAAI,CAAChC,WAAW,CAACiC,GAAZ,CAAgBD,oBAAoB,CAACf,UAArC,CAAL,EAAuD;AACrD,aAAOW,KAAP;AACD;;AAED,UAAMM,YAAY,GAAGlC,WAAW,CAACmC,GAAZ,CAAgBH,oBAAoB,CAACf,UAArC,CAArB;AACA,UAAM;AAAEI,MAAAA;AAAF,QAAcP,YAAY,CAACsB,IAAb,CAAmBC,WAAD,IAAiBA,WAAW,CAACpB,UAAZ,KAA2Be,oBAAoB,CAACf,UAAnF,CAApB;AAEA,WAAO,CACL,GAAGW,KADE,EAEL;AACEP,MAAAA,OADF;AAEEiB,MAAAA,EAAE,EAAEN,oBAAoB,CAACf,UAF3B;AAGEX,MAAAA,IAAI,EAAE,KAHR;AAIEG,MAAAA,KAAK,EAAEL,mBAAmB,CAAC8B,YAAD,CAJ5B;AAKEvB,MAAAA,WAAW,EAAED,yBAAyB,CAACwB,YAAD,CALxC;AAMEK,MAAAA,KAAK,EAAEL,YAAY,CAACK,KANtB;AAOEC,MAAAA,MAAM,EAAER,oBAAoB,CAACS,YAArB,CAAkCC,QAAlC;AAPV,KAFK,CAAP;AAYD,GApBM,EAoBJ,EApBI,CAAP;AAqBD,CAxDM","sourcesContent":["import { ethers } from 'ethers'\nimport { Campaign } from 'config/constants/types'\nimport ifosList from 'config/constants/ifo'\nimport { campaignMap } from 'config/constants/campaigns'\nimport { Achievement, TranslatableText } from 'state/types'\nimport { multicallv2 } from 'utils/multicall'\nimport { getPointCenterIfoAddress } from 'utils/addressHelpers'\nimport pointCenterIfoABI from 'config/abi/pointCenterIfo.json'\n\ninterface IfoMapResponse {\n  thresholdToClaim: string\n  campaignId: string\n  numberPoints: ethers.BigNumber\n}\n\nexport const getAchievementTitle = (campaign: Campaign): TranslatableText => {\n  switch (campaign.type) {\n    case 'ifo':\n      return {\n        key: 'IFO Shopper: %title%',\n        data: {\n          title: campaign.title as string,\n        },\n      }\n    default:\n      return campaign.title\n  }\n}\n\nexport const getAchievementDescription = (campaign: Campaign): TranslatableText => {\n  switch (campaign.type) {\n    case 'ifo':\n      return {\n        key: 'Committed more than $5 worth of LP in the %title% IFO',\n        data: {\n          title: campaign.title as string,\n        },\n      }\n    default:\n      return campaign.description\n  }\n}\n\n/**\n * Checks if a wallet is eligible to claim points from valid IFO's\n */\nexport const getClaimableIfoData = async (account: string): Promise<Achievement[]> => {\n  const ifoCampaigns = ifosList.filter((ifoItem) => ifoItem.campaignId !== undefined)\n\n  // Returns the claim status of every IFO with a campaign ID\n  const claimStatusCalls = ifoCampaigns.map(({ address }) => {\n    return {\n      address: getPointCenterIfoAddress(),\n      name: 'checkClaimStatus',\n      params: [account, address],\n    }\n  })\n\n  const claimStatuses = (await multicallv2(pointCenterIfoABI, claimStatusCalls, { requireSuccess: false })) as\n    | [boolean][]\n    | null\n\n  // Get IFO data for all IFO's that are eligible to claim\n  const claimableIfoData = (await multicallv2(\n    pointCenterIfoABI,\n    claimStatuses.reduce((accum, claimStatusArr, index) => {\n      if (claimStatusArr === null) {\n        return accum\n      }\n\n      const [claimStatus] = claimStatusArr\n\n      if (claimStatus === true) {\n        return [...accum, { address: getPointCenterIfoAddress(), name: 'ifos', params: [index] }]\n      }\n\n      return accum\n    }, []),\n  )) as IfoMapResponse[]\n\n  // Transform response to an Achievement\n  return claimableIfoData.reduce((accum, claimableIfoDataItem) => {\n    if (!campaignMap.has(claimableIfoDataItem.campaignId)) {\n      return accum\n    }\n\n    const campaignMeta = campaignMap.get(claimableIfoDataItem.campaignId)\n    const { address } = ifoCampaigns.find((ifoCampaign) => ifoCampaign.campaignId === claimableIfoDataItem.campaignId)\n\n    return [\n      ...accum,\n      {\n        address,\n        id: claimableIfoDataItem.campaignId,\n        type: 'ifo',\n        title: getAchievementTitle(campaignMeta),\n        description: getAchievementDescription(campaignMeta),\n        badge: campaignMeta.badge,\n        points: claimableIfoDataItem.numberPoints.toNumber(),\n      },\n    ]\n  }, [])\n}\n"]},"metadata":{},"sourceType":"module"}