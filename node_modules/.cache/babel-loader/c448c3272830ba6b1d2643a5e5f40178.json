{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport BigNumber from 'bignumber.js';\nimport { useWeb3React } from '@web3-react/core';\nimport multicall from 'utils/multicall';\nimport { getMasterChefAddress } from 'utils/addressHelpers';\nimport masterChefABI from 'config/abi/masterchef.json';\nimport { farmsConfig } from 'config/constants';\nimport useRefresh from 'hooks/useRefresh';\nimport { DEFAULT_TOKEN_DECIMAL } from 'config';\n\nconst useFarmsWithBalance = () => {\n  _s();\n\n  const [farmsWithStakedBalance, setFarmsWithStakedBalance] = useState([]);\n  const [earningsSum, setEarningsSum] = useState(null);\n  const {\n    account\n  } = useWeb3React();\n  const {\n    fastRefresh\n  } = useRefresh();\n  useEffect(() => {\n    const fetchBalances = async () => {\n      const calls = farmsConfig.map(farm => ({\n        address: getMasterChefAddress(),\n        name: 'pendingCake',\n        params: [farm.pid, account]\n      }));\n      const rawResults = await multicall(masterChefABI, calls);\n      const results = farmsConfig.map((farm, index) => ({ ...farm,\n        balance: new BigNumber(rawResults[index])\n      }));\n      const farmsWithBalances = results.filter(balanceType => balanceType.balance.gt(0));\n      const totalEarned = farmsWithBalances.reduce((accum, earning) => {\n        const earningNumber = new BigNumber(earning.balance);\n\n        if (earningNumber.eq(0)) {\n          return accum;\n        }\n\n        return accum + earningNumber.div(DEFAULT_TOKEN_DECIMAL).toNumber();\n      }, 0);\n      setFarmsWithStakedBalance(farmsWithBalances);\n      setEarningsSum(totalEarned);\n    };\n\n    if (account) {\n      fetchBalances();\n    }\n  }, [account, fastRefresh]);\n  return {\n    farmsWithStakedBalance,\n    earningsSum\n  };\n};\n\n_s(useFarmsWithBalance, \"dXIAccWgAS5bQBu5kujcJj4yWqE=\", false, function () {\n  return [useWeb3React, useRefresh];\n});\n\nexport default useFarmsWithBalance;","map":{"version":3,"sources":["/Users/thomas/Documents/PycharmProjects/pancake-frontend/src/views/Home/hooks/useFarmsWithBalance.tsx"],"names":["useEffect","useState","BigNumber","useWeb3React","multicall","getMasterChefAddress","masterChefABI","farmsConfig","useRefresh","DEFAULT_TOKEN_DECIMAL","useFarmsWithBalance","farmsWithStakedBalance","setFarmsWithStakedBalance","earningsSum","setEarningsSum","account","fastRefresh","fetchBalances","calls","map","farm","address","name","params","pid","rawResults","results","index","balance","farmsWithBalances","filter","balanceType","gt","totalEarned","reduce","accum","earning","earningNumber","eq","div","toNumber"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,SAAP,MAAsB,cAAtB;AACA,SAASC,YAAT,QAA6B,kBAA7B;AACA,OAAOC,SAAP,MAAsB,iBAAtB;AACA,SAASC,oBAAT,QAAqC,sBAArC;AACA,OAAOC,aAAP,MAA0B,4BAA1B;AACA,SAASC,WAAT,QAA4B,kBAA5B;AAEA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,SAASC,qBAAT,QAAsC,QAAtC;;AAMA,MAAMC,mBAAmB,GAAG,MAAM;AAAA;;AAChC,QAAM,CAACC,sBAAD,EAAyBC,yBAAzB,IAAsDX,QAAQ,CAAoB,EAApB,CAApE;AACA,QAAM,CAACY,WAAD,EAAcC,cAAd,IAAgCb,QAAQ,CAAS,IAAT,CAA9C;AACA,QAAM;AAAEc,IAAAA;AAAF,MAAcZ,YAAY,EAAhC;AACA,QAAM;AAAEa,IAAAA;AAAF,MAAkBR,UAAU,EAAlC;AAEAR,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMiB,aAAa,GAAG,YAAY;AAChC,YAAMC,KAAK,GAAGX,WAAW,CAACY,GAAZ,CAAiBC,IAAD,KAAW;AACvCC,QAAAA,OAAO,EAAEhB,oBAAoB,EADU;AAEvCiB,QAAAA,IAAI,EAAE,aAFiC;AAGvCC,QAAAA,MAAM,EAAE,CAACH,IAAI,CAACI,GAAN,EAAWT,OAAX;AAH+B,OAAX,CAAhB,CAAd;AAMA,YAAMU,UAAU,GAAG,MAAMrB,SAAS,CAACE,aAAD,EAAgBY,KAAhB,CAAlC;AACA,YAAMQ,OAAO,GAAGnB,WAAW,CAACY,GAAZ,CAAgB,CAACC,IAAD,EAAOO,KAAP,MAAkB,EAAE,GAAGP,IAAL;AAAWQ,QAAAA,OAAO,EAAE,IAAI1B,SAAJ,CAAcuB,UAAU,CAACE,KAAD,CAAxB;AAApB,OAAlB,CAAhB,CAAhB;AACA,YAAME,iBAAiB,GAAGH,OAAO,CAACI,MAAR,CAAgBC,WAAD,IAAiBA,WAAW,CAACH,OAAZ,CAAoBI,EAApB,CAAuB,CAAvB,CAAhC,CAA1B;AACA,YAAMC,WAAW,GAAGJ,iBAAiB,CAACK,MAAlB,CAAyB,CAACC,KAAD,EAAQC,OAAR,KAAoB;AAC/D,cAAMC,aAAa,GAAG,IAAInC,SAAJ,CAAckC,OAAO,CAACR,OAAtB,CAAtB;;AACA,YAAIS,aAAa,CAACC,EAAd,CAAiB,CAAjB,CAAJ,EAAyB;AACvB,iBAAOH,KAAP;AACD;;AACD,eAAOA,KAAK,GAAGE,aAAa,CAACE,GAAd,CAAkB9B,qBAAlB,EAAyC+B,QAAzC,EAAf;AACD,OANmB,EAMjB,CANiB,CAApB;AAQA5B,MAAAA,yBAAyB,CAACiB,iBAAD,CAAzB;AACAf,MAAAA,cAAc,CAACmB,WAAD,CAAd;AACD,KApBD;;AAsBA,QAAIlB,OAAJ,EAAa;AACXE,MAAAA,aAAa;AACd;AACF,GA1BQ,EA0BN,CAACF,OAAD,EAAUC,WAAV,CA1BM,CAAT;AA4BA,SAAO;AAAEL,IAAAA,sBAAF;AAA0BE,IAAAA;AAA1B,GAAP;AACD,CAnCD;;GAAMH,mB;UAGgBP,Y,EACIK,U;;;AAiC1B,eAAeE,mBAAf","sourcesContent":["import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport { farmsConfig } from 'config/constants'\nimport { FarmConfig } from 'config/constants/types'\nimport useRefresh from 'hooks/useRefresh'\nimport { DEFAULT_TOKEN_DECIMAL } from 'config'\n\nexport interface FarmWithBalance extends FarmConfig {\n  balance: BigNumber\n}\n\nconst useFarmsWithBalance = () => {\n  const [farmsWithStakedBalance, setFarmsWithStakedBalance] = useState<FarmWithBalance[]>([])\n  const [earningsSum, setEarningsSum] = useState<number>(null)\n  const { account } = useWeb3React()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalances = async () => {\n      const calls = farmsConfig.map((farm) => ({\n        address: getMasterChefAddress(),\n        name: 'pendingCake',\n        params: [farm.pid, account],\n      }))\n\n      const rawResults = await multicall(masterChefABI, calls)\n      const results = farmsConfig.map((farm, index) => ({ ...farm, balance: new BigNumber(rawResults[index]) }))\n      const farmsWithBalances = results.filter((balanceType) => balanceType.balance.gt(0))\n      const totalEarned = farmsWithBalances.reduce((accum, earning) => {\n        const earningNumber = new BigNumber(earning.balance)\n        if (earningNumber.eq(0)) {\n          return accum\n        }\n        return accum + earningNumber.div(DEFAULT_TOKEN_DECIMAL).toNumber()\n      }, 0)\n\n      setFarmsWithStakedBalance(farmsWithBalances)\n      setEarningsSum(totalEarned)\n    }\n\n    if (account) {\n      fetchBalances()\n    }\n  }, [account, fastRefresh])\n\n  return { farmsWithStakedBalance, earningsSum }\n}\n\nexport default useFarmsWithBalance\n"]},"metadata":{},"sourceType":"module"}