{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport { useSelector } from 'react-redux';\nimport { useAppDispatch } from 'state';\nimport Nfts from 'config/constants/nfts';\nimport { fetchWalletNfts } from './index';\nexport const useGetCollectibles = () => {\n  _s();\n\n  const {\n    account\n  } = useWeb3React();\n  const dispatch = useAppDispatch();\n  const {\n    isInitialized,\n    isLoading,\n    data\n  } = useSelector(state => state.collectibles);\n  const identifiers = Object.keys(data);\n  useEffect(() => {\n    // Fetch nfts only if we have not done so already\n    if (!isInitialized) {\n      dispatch(fetchWalletNfts(account));\n    }\n  }, [isInitialized, account, dispatch]);\n  return {\n    isInitialized,\n    isLoading,\n    tokenIds: data,\n    nftsInWallet: Nfts.filter(nft => identifiers.includes(nft.identifier))\n  };\n};\n\n_s(useGetCollectibles, \"+OJP6i7Yx7acr6GgAtxV2TRO7fk=\", false, function () {\n  return [useWeb3React, useAppDispatch, useSelector];\n});","map":{"version":3,"sources":["/Users/thomas/Documents/pancake-frontend/pankcake-frontend/src/state/collectibles/hooks.ts"],"names":["useEffect","useWeb3React","useSelector","useAppDispatch","Nfts","fetchWalletNfts","useGetCollectibles","account","dispatch","isInitialized","isLoading","data","state","collectibles","identifiers","Object","keys","tokenIds","nftsInWallet","filter","nft","includes","identifier"],"mappings":";;AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,YAAT,QAA6B,kBAA7B;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,cAAT,QAA+B,OAA/B;AACA,OAAOC,IAAP,MAAiB,uBAAjB;AAEA,SAASC,eAAT,QAAgC,SAAhC;AAEA,OAAO,MAAMC,kBAAkB,GAAG,MAAM;AAAA;;AACtC,QAAM;AAAEC,IAAAA;AAAF,MAAcN,YAAY,EAAhC;AACA,QAAMO,QAAQ,GAAGL,cAAc,EAA/B;AACA,QAAM;AAAEM,IAAAA,aAAF;AAAiBC,IAAAA,SAAjB;AAA4BC,IAAAA;AAA5B,MAAqCT,WAAW,CAAEU,KAAD,IAAkBA,KAAK,CAACC,YAAzB,CAAtD;AACA,QAAMC,WAAW,GAAGC,MAAM,CAACC,IAAP,CAAYL,IAAZ,CAApB;AAEAX,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,QAAI,CAACS,aAAL,EAAoB;AAClBD,MAAAA,QAAQ,CAACH,eAAe,CAACE,OAAD,CAAhB,CAAR;AACD;AACF,GALQ,EAKN,CAACE,aAAD,EAAgBF,OAAhB,EAAyBC,QAAzB,CALM,CAAT;AAOA,SAAO;AACLC,IAAAA,aADK;AAELC,IAAAA,SAFK;AAGLO,IAAAA,QAAQ,EAAEN,IAHL;AAILO,IAAAA,YAAY,EAAEd,IAAI,CAACe,MAAL,CAAaC,GAAD,IAASN,WAAW,CAACO,QAAZ,CAAqBD,GAAG,CAACE,UAAzB,CAArB;AAJT,GAAP;AAMD,CAnBM;;GAAMhB,kB;UACSL,Y,EACHE,c,EAC0BD,W","sourcesContent":["import { useEffect } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { useSelector } from 'react-redux'\nimport { useAppDispatch } from 'state'\nimport Nfts from 'config/constants/nfts'\nimport { State } from '../types'\nimport { fetchWalletNfts } from './index'\n\nexport const useGetCollectibles = () => {\n  const { account } = useWeb3React()\n  const dispatch = useAppDispatch()\n  const { isInitialized, isLoading, data } = useSelector((state: State) => state.collectibles)\n  const identifiers = Object.keys(data)\n\n  useEffect(() => {\n    // Fetch nfts only if we have not done so already\n    if (!isInitialized) {\n      dispatch(fetchWalletNfts(account))\n    }\n  }, [isInitialized, account, dispatch])\n\n  return {\n    isInitialized,\n    isLoading,\n    tokenIds: data,\n    nftsInWallet: Nfts.filter((nft) => identifiers.includes(nft.identifier)),\n  }\n}\n"]},"metadata":{},"sourceType":"module"}