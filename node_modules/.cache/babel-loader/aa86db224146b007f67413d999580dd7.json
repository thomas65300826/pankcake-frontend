{"ast":null,"code":"var _jsxFileName = \"/Users/thomas/Documents/pancake-frontend/src/views/Profile/ProfileCreation/Mint.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport BigNumber from 'bignumber.js';\nimport { Card, CardBody, Heading, Text } from '@pancakeswap/uikit';\nimport { useWeb3React } from '@web3-react/core';\nimport { useTranslation } from 'contexts/Localization';\nimport useApproveConfirmTransaction from 'hooks/useApproveConfirmTransaction';\nimport { DEFAULT_TOKEN_DECIMAL } from 'config';\nimport { useCake, useBunnyFactory } from 'hooks/useContract';\nimport useHasCakeBalance from 'hooks/useHasCakeBalance';\nimport nftList from 'config/constants/nfts';\nimport SelectionCard from '../components/SelectionCard';\nimport NextStepButton from '../components/NextStepButton';\nimport ApproveConfirmButtons from '../components/ApproveConfirmButtons';\nimport useProfileCreation from './contexts/hook';\nimport { MINT_COST, STARTER_BUNNY_IDENTIFIERS } from './config';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst nfts = nftList.filter(nft => STARTER_BUNNY_IDENTIFIERS.includes(nft.identifier));\nconst minimumCakeBalanceToMint = new BigNumber(MINT_COST).multipliedBy(DEFAULT_TOKEN_DECIMAL);\n\nconst Mint = () => {\n  _s();\n\n  const [variationId, setVariationId] = useState(null);\n  const {\n    actions,\n    minimumCakeRequired,\n    allowance\n  } = useProfileCreation();\n  const {\n    account\n  } = useWeb3React();\n  const cakeContract = useCake();\n  const bunnyFactoryContract = useBunnyFactory();\n  const {\n    t\n  } = useTranslation();\n  const hasMinimumCakeRequired = useHasCakeBalance(minimumCakeBalanceToMint);\n  const {\n    isApproving,\n    isApproved,\n    isConfirmed,\n    isConfirming,\n    handleApprove,\n    handleConfirm\n  } = useApproveConfirmTransaction({\n    onRequiresApproval: async () => {\n      // TODO: Move this to a helper, this check will be probably be used many times\n      try {\n        const response = await cakeContract.allowance(account, bunnyFactoryContract.address);\n        const currentAllowance = new BigNumber(response.toString());\n        return currentAllowance.gte(minimumCakeRequired);\n      } catch (error) {\n        return false;\n      }\n    },\n    onApprove: () => {\n      return cakeContract.approve(bunnyFactoryContract.address, allowance.toJSON());\n    },\n    onConfirm: () => {\n      return bunnyFactoryContract.mintNFT(variationId);\n    },\n    onSuccess: () => actions.nextStep()\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Text, {\n      fontSize: \"20px\",\n      color: \"textSubtle\",\n      bold: true,\n      children: t('Step %num%', {\n        num: 1\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Heading, {\n      as: \"h3\",\n      scale: \"xl\",\n      mb: \"24px\",\n      children: t('Get Starter Collectible')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Text, {\n      as: \"p\",\n      children: t('Every profile starts by making a “starter” collectible (NFT).')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Text, {\n      as: \"p\",\n      children: t('This starter will also become your first profile picture.')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Text, {\n      as: \"p\",\n      mb: \"24px\",\n      children: t('You can change your profile pic later if you get another approved Pancake Collectible.')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Card, {\n      mb: \"24px\",\n      children: /*#__PURE__*/_jsxDEV(CardBody, {\n        children: [/*#__PURE__*/_jsxDEV(Heading, {\n          as: \"h4\",\n          scale: \"lg\",\n          mb: \"8px\",\n          children: t('Choose your Starter!')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Text, {\n          as: \"p\",\n          color: \"textSubtle\",\n          children: t('Choose wisely: you can only ever make one starter collectible!')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Text, {\n          as: \"p\",\n          mb: \"24px\",\n          color: \"textSubtle\",\n          children: t('Cost: %num% CAKE', {\n            num: MINT_COST\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, this), nfts.map(nft => {\n          const handleChange = value => setVariationId(Number(value));\n\n          return /*#__PURE__*/_jsxDEV(SelectionCard, {\n            name: \"mintStarter\",\n            value: nft.variationId,\n            image: `/images/nfts/${nft.images.md}`,\n            isChecked: variationId === nft.variationId,\n            onChange: handleChange,\n            disabled: isApproving || isConfirming || isConfirmed || !hasMinimumCakeRequired,\n            children: /*#__PURE__*/_jsxDEV(Text, {\n              bold: true,\n              children: nft.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 88,\n              columnNumber: 17\n            }, this)\n          }, nft.identifier, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 15\n          }, this);\n        }), !hasMinimumCakeRequired && /*#__PURE__*/_jsxDEV(Text, {\n          color: \"failure\",\n          mb: \"16px\",\n          children: t('A minimum of %num% CAKE is required', {\n            num: MINT_COST\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(ApproveConfirmButtons, {\n          isApproveDisabled: variationId === null || isConfirmed || isConfirming || isApproved,\n          isApproving: isApproving,\n          isConfirmDisabled: !isApproved || isConfirmed || !hasMinimumCakeRequired,\n          isConfirming: isConfirming,\n          onApprove: handleApprove,\n          onConfirm: handleConfirm\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(NextStepButton, {\n      onClick: actions.nextStep,\n      disabled: !isConfirmed,\n      children: t('Next Step')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Mint, \"WBzSb75XUxr41am0jQKgUgh3DbU=\", false, function () {\n  return [useProfileCreation, useWeb3React, useCake, useBunnyFactory, useTranslation, useHasCakeBalance, useApproveConfirmTransaction];\n});\n\n_c = Mint;\nexport default Mint;\n\nvar _c;\n\n$RefreshReg$(_c, \"Mint\");","map":{"version":3,"sources":["/Users/thomas/Documents/pancake-frontend/src/views/Profile/ProfileCreation/Mint.tsx"],"names":["React","useState","BigNumber","Card","CardBody","Heading","Text","useWeb3React","useTranslation","useApproveConfirmTransaction","DEFAULT_TOKEN_DECIMAL","useCake","useBunnyFactory","useHasCakeBalance","nftList","SelectionCard","NextStepButton","ApproveConfirmButtons","useProfileCreation","MINT_COST","STARTER_BUNNY_IDENTIFIERS","nfts","filter","nft","includes","identifier","minimumCakeBalanceToMint","multipliedBy","Mint","variationId","setVariationId","actions","minimumCakeRequired","allowance","account","cakeContract","bunnyFactoryContract","t","hasMinimumCakeRequired","isApproving","isApproved","isConfirmed","isConfirming","handleApprove","handleConfirm","onRequiresApproval","response","address","currentAllowance","toString","gte","error","onApprove","approve","toJSON","onConfirm","mintNFT","onSuccess","nextStep","num","map","handleChange","value","Number","images","md","name"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { Card, CardBody, Heading, Text } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { useTranslation } from 'contexts/Localization'\nimport useApproveConfirmTransaction from 'hooks/useApproveConfirmTransaction'\nimport { DEFAULT_TOKEN_DECIMAL } from 'config'\nimport { useCake, useBunnyFactory } from 'hooks/useContract'\nimport { Nft } from 'config/constants/types'\nimport useHasCakeBalance from 'hooks/useHasCakeBalance'\nimport nftList from 'config/constants/nfts'\nimport SelectionCard from '../components/SelectionCard'\nimport NextStepButton from '../components/NextStepButton'\nimport ApproveConfirmButtons from '../components/ApproveConfirmButtons'\nimport useProfileCreation from './contexts/hook'\nimport { MINT_COST, STARTER_BUNNY_IDENTIFIERS } from './config'\n\nconst nfts = nftList.filter((nft) => STARTER_BUNNY_IDENTIFIERS.includes(nft.identifier))\nconst minimumCakeBalanceToMint = new BigNumber(MINT_COST).multipliedBy(DEFAULT_TOKEN_DECIMAL)\n\nconst Mint: React.FC = () => {\n  const [variationId, setVariationId] = useState<Nft['variationId']>(null)\n  const { actions, minimumCakeRequired, allowance } = useProfileCreation()\n\n  const { account } = useWeb3React()\n  const cakeContract = useCake()\n  const bunnyFactoryContract = useBunnyFactory()\n  const { t } = useTranslation()\n  const hasMinimumCakeRequired = useHasCakeBalance(minimumCakeBalanceToMint)\n  const { isApproving, isApproved, isConfirmed, isConfirming, handleApprove, handleConfirm } =\n    useApproveConfirmTransaction({\n      onRequiresApproval: async () => {\n        // TODO: Move this to a helper, this check will be probably be used many times\n        try {\n          const response = await cakeContract.allowance(account, bunnyFactoryContract.address)\n          const currentAllowance = new BigNumber(response.toString())\n          return currentAllowance.gte(minimumCakeRequired)\n        } catch (error) {\n          return false\n        }\n      },\n      onApprove: () => {\n        return cakeContract.approve(bunnyFactoryContract.address, allowance.toJSON())\n      },\n      onConfirm: () => {\n        return bunnyFactoryContract.mintNFT(variationId)\n      },\n      onSuccess: () => actions.nextStep(),\n    })\n\n  return (\n    <>\n      <Text fontSize=\"20px\" color=\"textSubtle\" bold>\n        {t('Step %num%', { num: 1 })}\n      </Text>\n      <Heading as=\"h3\" scale=\"xl\" mb=\"24px\">\n        {t('Get Starter Collectible')}\n      </Heading>\n      <Text as=\"p\">{t('Every profile starts by making a “starter” collectible (NFT).')}</Text>\n      <Text as=\"p\">{t('This starter will also become your first profile picture.')}</Text>\n      <Text as=\"p\" mb=\"24px\">\n        {t('You can change your profile pic later if you get another approved Pancake Collectible.')}\n      </Text>\n      <Card mb=\"24px\">\n        <CardBody>\n          <Heading as=\"h4\" scale=\"lg\" mb=\"8px\">\n            {t('Choose your Starter!')}\n          </Heading>\n          <Text as=\"p\" color=\"textSubtle\">\n            {t('Choose wisely: you can only ever make one starter collectible!')}\n          </Text>\n          <Text as=\"p\" mb=\"24px\" color=\"textSubtle\">\n            {t('Cost: %num% CAKE', { num: MINT_COST })}\n          </Text>\n          {nfts.map((nft) => {\n            const handleChange = (value: string) => setVariationId(Number(value))\n\n            return (\n              <SelectionCard\n                key={nft.identifier}\n                name=\"mintStarter\"\n                value={nft.variationId}\n                image={`/images/nfts/${nft.images.md}`}\n                isChecked={variationId === nft.variationId}\n                onChange={handleChange}\n                disabled={isApproving || isConfirming || isConfirmed || !hasMinimumCakeRequired}\n              >\n                <Text bold>{nft.name}</Text>\n              </SelectionCard>\n            )\n          })}\n          {!hasMinimumCakeRequired && (\n            <Text color=\"failure\" mb=\"16px\">\n              {t('A minimum of %num% CAKE is required', { num: MINT_COST })}\n            </Text>\n          )}\n          <ApproveConfirmButtons\n            isApproveDisabled={variationId === null || isConfirmed || isConfirming || isApproved}\n            isApproving={isApproving}\n            isConfirmDisabled={!isApproved || isConfirmed || !hasMinimumCakeRequired}\n            isConfirming={isConfirming}\n            onApprove={handleApprove}\n            onConfirm={handleConfirm}\n          />\n        </CardBody>\n      </Card>\n      <NextStepButton onClick={actions.nextStep} disabled={!isConfirmed}>\n        {t('Next Step')}\n      </NextStepButton>\n    </>\n  )\n}\n\nexport default Mint\n"]},"metadata":{},"sourceType":"module"}