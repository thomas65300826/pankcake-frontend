{"ast":null,"code":"import BigNumber from 'bignumber.js';\nimport { convertSharesToCake } from 'views/Pools/helpers';\nimport { multicallv2 } from 'utils/multicall';\nimport cakeVaultAbi from 'config/abi/cakeVault.json';\nimport { getCakeVaultAddress } from 'utils/addressHelpers';\nimport { BIG_ZERO } from 'utils/bigNumber';\nexport const fetchPublicVaultData = async () => {\n  try {\n    const calls = ['getPricePerFullShare', 'totalShares', 'calculateHarvestCakeRewards', 'calculateTotalPendingCakeRewards'].map(method => ({\n      address: getCakeVaultAddress(),\n      name: method\n    }));\n    const [[sharePrice], [shares], [estimatedCakeBountyReward], [totalPendingCakeHarvest]] = await multicallv2(cakeVaultAbi, calls);\n    const totalSharesAsBigNumber = shares ? new BigNumber(shares.toString()) : BIG_ZERO;\n    const sharePriceAsBigNumber = sharePrice ? new BigNumber(sharePrice.toString()) : BIG_ZERO;\n    const totalCakeInVaultEstimate = convertSharesToCake(totalSharesAsBigNumber, sharePriceAsBigNumber);\n    return {\n      totalShares: totalSharesAsBigNumber.toJSON(),\n      pricePerFullShare: sharePriceAsBigNumber.toJSON(),\n      totalCakeInVault: totalCakeInVaultEstimate.cakeAsBigNumber.toJSON(),\n      estimatedCakeBountyReward: new BigNumber(estimatedCakeBountyReward.toString()).toJSON(),\n      totalPendingCakeHarvest: new BigNumber(totalPendingCakeHarvest.toString()).toJSON()\n    };\n  } catch (error) {\n    return {\n      totalShares: null,\n      pricePerFullShare: null,\n      totalCakeInVault: null,\n      estimatedCakeBountyReward: null,\n      totalPendingCakeHarvest: null\n    };\n  }\n};\nexport const fetchVaultFees = async () => {\n  try {\n    const calls = ['performanceFee', 'callFee', 'withdrawFee', 'withdrawFeePeriod'].map(method => ({\n      address: getCakeVaultAddress(),\n      name: method\n    }));\n    const [[performanceFee], [callFee], [withdrawalFee], [withdrawalFeePeriod]] = await multicallv2(cakeVaultAbi, calls);\n    return {\n      performanceFee: performanceFee.toNumber(),\n      callFee: callFee.toNumber(),\n      withdrawalFee: withdrawalFee.toNumber(),\n      withdrawalFeePeriod: withdrawalFeePeriod.toNumber()\n    };\n  } catch (error) {\n    return {\n      performanceFee: null,\n      callFee: null,\n      withdrawalFee: null,\n      withdrawalFeePeriod: null\n    };\n  }\n};\nexport default fetchPublicVaultData;","map":{"version":3,"sources":["/Users/thomas/Documents/PycharmProjects/pancake-frontend/src/state/pools/fetchVaultPublic.ts"],"names":["BigNumber","convertSharesToCake","multicallv2","cakeVaultAbi","getCakeVaultAddress","BIG_ZERO","fetchPublicVaultData","calls","map","method","address","name","sharePrice","shares","estimatedCakeBountyReward","totalPendingCakeHarvest","totalSharesAsBigNumber","toString","sharePriceAsBigNumber","totalCakeInVaultEstimate","totalShares","toJSON","pricePerFullShare","totalCakeInVault","cakeAsBigNumber","error","fetchVaultFees","performanceFee","callFee","withdrawalFee","withdrawalFeePeriod","toNumber"],"mappings":"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","sourcesContent":["import BigNumber from 'bignumber.js'\nimport { convertSharesToCake } from 'views/Pools/helpers'\nimport { multicallv2 } from 'utils/multicall'\nimport cakeVaultAbi from 'config/abi/cakeVault.json'\nimport { getCakeVaultAddress } from 'utils/addressHelpers'\nimport { BIG_ZERO } from 'utils/bigNumber'\n\nexport const fetchPublicVaultData = async () => {\n  try {\n    const calls = [\n      'getPricePerFullShare',\n      'totalShares',\n      'calculateHarvestCakeRewards',\n      'calculateTotalPendingCakeRewards',\n    ].map((method) => ({\n      address: getCakeVaultAddress(),\n      name: method,\n    }))\n\n    const [[sharePrice], [shares], [estimatedCakeBountyReward], [totalPendingCakeHarvest]] = await multicallv2(\n      cakeVaultAbi,\n      calls,\n    )\n\n    const totalSharesAsBigNumber = shares ? new BigNumber(shares.toString()) : BIG_ZERO\n    const sharePriceAsBigNumber = sharePrice ? new BigNumber(sharePrice.toString()) : BIG_ZERO\n    const totalCakeInVaultEstimate = convertSharesToCake(totalSharesAsBigNumber, sharePriceAsBigNumber)\n    return {\n      totalShares: totalSharesAsBigNumber.toJSON(),\n      pricePerFullShare: sharePriceAsBigNumber.toJSON(),\n      totalCakeInVault: totalCakeInVaultEstimate.cakeAsBigNumber.toJSON(),\n      estimatedCakeBountyReward: new BigNumber(estimatedCakeBountyReward.toString()).toJSON(),\n      totalPendingCakeHarvest: new BigNumber(totalPendingCakeHarvest.toString()).toJSON(),\n    }\n  } catch (error) {\n    return {\n      totalShares: null,\n      pricePerFullShare: null,\n      totalCakeInVault: null,\n      estimatedCakeBountyReward: null,\n      totalPendingCakeHarvest: null,\n    }\n  }\n}\n\nexport const fetchVaultFees = async () => {\n  try {\n    const calls = ['performanceFee', 'callFee', 'withdrawFee', 'withdrawFeePeriod'].map((method) => ({\n      address: getCakeVaultAddress(),\n      name: method,\n    }))\n\n    const [[performanceFee], [callFee], [withdrawalFee], [withdrawalFeePeriod]] = await multicallv2(cakeVaultAbi, calls)\n\n    return {\n      performanceFee: performanceFee.toNumber(),\n      callFee: callFee.toNumber(),\n      withdrawalFee: withdrawalFee.toNumber(),\n      withdrawalFeePeriod: withdrawalFeePeriod.toNumber(),\n    }\n  } catch (error) {\n    return {\n      performanceFee: null,\n      callFee: null,\n      withdrawalFee: null,\n      withdrawalFeePeriod: null,\n    }\n  }\n}\n\nexport default fetchPublicVaultData\n"]},"metadata":{},"sourceType":"module"}