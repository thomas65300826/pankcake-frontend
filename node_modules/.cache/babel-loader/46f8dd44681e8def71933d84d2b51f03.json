{"ast":null,"code":"var _jsxFileName = \"/Users/thomas/Documents/PycharmProjects/pancake-frontend/src/views/Pools/components/PoolsTable/Apr.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { Flex, useModal, CalculateIcon, Skeleton, Button } from '@pancakeswap/uikit';\nimport ApyCalculatorModal from 'components/ApyCalculatorModal';\nimport Balance from 'components/Balance';\nimport { useTranslation } from 'contexts/Localization';\nimport { getAprData } from 'views/Pools/helpers';\nimport { getAddress } from 'utils/addressHelpers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Apr = ({\n  pool,\n  showIcon,\n  performanceFee = 0,\n  ...props\n}) => {\n  _s();\n\n  const {\n    stakingToken,\n    earningToken,\n    isFinished,\n    earningTokenPrice,\n    apr\n  } = pool;\n  const {\n    t\n  } = useTranslation();\n  const {\n    apr: earningsPercentageToDisplay,\n    roundingDecimals,\n    compoundFrequency\n  } = getAprData(pool, performanceFee);\n  const apyModalLink = stakingToken.address ? `/swap?outputCurrency=${getAddress(stakingToken.address)}` : '/swap';\n  const [onPresentApyModal] = useModal( /*#__PURE__*/_jsxDEV(ApyCalculatorModal, {\n    tokenPrice: earningTokenPrice,\n    apr: apr,\n    linkLabel: t('Get %symbol%', {\n      symbol: stakingToken.symbol\n    }),\n    linkHref: apyModalLink,\n    earningTokenSymbol: earningToken.symbol,\n    roundingDecimals: roundingDecimals,\n    compoundFrequency: compoundFrequency,\n    performanceFee: performanceFee\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this));\n\n  const openRoiModal = event => {\n    event.stopPropagation();\n    onPresentApyModal();\n  };\n\n  return /*#__PURE__*/_jsxDEV(Flex, {\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n    ...props,\n    children: earningsPercentageToDisplay || isFinished ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Balance, {\n        onClick: openRoiModal,\n        fontSize: \"16px\",\n        isDisabled: isFinished,\n        value: isFinished ? 0 : earningsPercentageToDisplay,\n        decimals: 2,\n        unit: \"%\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }, this), !isFinished && showIcon && /*#__PURE__*/_jsxDEV(Button, {\n        onClick: openRoiModal,\n        variant: \"text\",\n        width: \"20px\",\n        height: \"20px\",\n        padding: \"0px\",\n        marginLeft: \"4px\",\n        children: /*#__PURE__*/_jsxDEV(CalculateIcon, {\n          color: \"textSubtle\",\n          width: \"20px\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(Skeleton, {\n      width: \"80px\",\n      height: \"16px\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Apr, \"CH8vxo7uNeVgHFK2O5nDzK61NLI=\", false, function () {\n  return [useTranslation, useModal];\n});\n\n_c = Apr;\nexport default Apr;\n\nvar _c;\n\n$RefreshReg$(_c, \"Apr\");","map":{"version":3,"sources":["/Users/thomas/Documents/PycharmProjects/pancake-frontend/src/views/Pools/components/PoolsTable/Apr.tsx"],"names":["React","Flex","useModal","CalculateIcon","Skeleton","Button","ApyCalculatorModal","Balance","useTranslation","getAprData","getAddress","Apr","pool","showIcon","performanceFee","props","stakingToken","earningToken","isFinished","earningTokenPrice","apr","t","earningsPercentageToDisplay","roundingDecimals","compoundFrequency","apyModalLink","address","onPresentApyModal","symbol","openRoiModal","event","stopPropagation"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { Flex, useModal, CalculateIcon, Skeleton, FlexProps, Button } from '@pancakeswap/uikit'\nimport ApyCalculatorModal from 'components/ApyCalculatorModal'\nimport Balance from 'components/Balance'\nimport { Pool } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { getAprData } from 'views/Pools/helpers'\nimport { getAddress } from 'utils/addressHelpers'\n\ninterface AprProps extends FlexProps {\n  pool: Pool\n  showIcon: boolean\n  performanceFee?: number\n}\n\nconst Apr: React.FC<AprProps> = ({ pool, showIcon, performanceFee = 0, ...props }) => {\n  const { stakingToken, earningToken, isFinished, earningTokenPrice, apr } = pool\n  const { t } = useTranslation()\n\n  const { apr: earningsPercentageToDisplay, roundingDecimals, compoundFrequency } = getAprData(pool, performanceFee)\n\n  const apyModalLink = stakingToken.address ? `/swap?outputCurrency=${getAddress(stakingToken.address)}` : '/swap'\n\n  const [onPresentApyModal] = useModal(\n    <ApyCalculatorModal\n      tokenPrice={earningTokenPrice}\n      apr={apr}\n      linkLabel={t('Get %symbol%', { symbol: stakingToken.symbol })}\n      linkHref={apyModalLink}\n      earningTokenSymbol={earningToken.symbol}\n      roundingDecimals={roundingDecimals}\n      compoundFrequency={compoundFrequency}\n      performanceFee={performanceFee}\n    />,\n  )\n\n  const openRoiModal = (event: React.MouseEvent<HTMLElement>) => {\n    event.stopPropagation()\n    onPresentApyModal()\n  }\n\n  return (\n    <Flex alignItems=\"center\" justifyContent=\"space-between\" {...props}>\n      {earningsPercentageToDisplay || isFinished ? (\n        <>\n          <Balance\n            onClick={openRoiModal}\n            fontSize=\"16px\"\n            isDisabled={isFinished}\n            value={isFinished ? 0 : earningsPercentageToDisplay}\n            decimals={2}\n            unit=\"%\"\n          />\n          {!isFinished && showIcon && (\n            <Button onClick={openRoiModal} variant=\"text\" width=\"20px\" height=\"20px\" padding=\"0px\" marginLeft=\"4px\">\n              <CalculateIcon color=\"textSubtle\" width=\"20px\" />\n            </Button>\n          )}\n        </>\n      ) : (\n        <Skeleton width=\"80px\" height=\"16px\" />\n      )}\n    </Flex>\n  )\n}\n\nexport default Apr\n"]},"metadata":{},"sourceType":"module"}